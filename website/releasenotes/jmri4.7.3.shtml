<!DOCTYPE html>
<html lang="en">

<head>
 <title>
 JMRI: Release Notes for 4.7.3
 </title>
    <meta name="author" content="Bob Jacobsen">
    <meta name="keywords" content="java model railroad JMRI 4.7.3 decoderpro panelpro loconet lenz nce easydcc dcc nmra">

<!-- Style -->
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>

<!--#include virtual="/Header.shtml" -->

  <div id="mBody">
    <!--#include virtual="../download/Sidebar.shtml" -->
    <div id="mainContent">
      <h2>
      Release Notes for JMRI 4.7.3 release
      </h2>

    <p>Date: April 17, 2017</p>
    <p>From: Bob Jacobsen</p>
    <p>Subject: Test Release 4.7.3 of JMRI/DecoderPro is available for download.</p>

<!-- 
<p><b>This is a draft release note only; the download links do not yet work</b></p>
 -->

<h3>Notes:</h3>

<p>This is a test release.  Please post a note if you encounter any new or old bugs!
And please back up your JMRI files before installing this, in case you want to go
back to an earlier version.</p>

<p>This is the next in a series of test releases. We expect this series
to end in the next JMRI production release around the middle of 2017.
(See the <a href="https://github.com/JMRI/JMRI/milestones?state=open"><em>tentative</em> release schedule</a>)</p>

<p>Some of the changes involved are quite extensive.
They may require a certain amount of experience before they are working well.
Therefore, this test release should be considered experimental.</p>

<p><b>
JMRI is now only available under the
<a href="/COPYING">GNU General Public License</a>. For more information, please
see our
<a href="/copyright.shtml">copyright and licensing page</a>.</b></p>

<h3>Known problems with this release</h3>

<ul>
    <li>Under some conditions, in this release SE8c Signal Heads will "loop", 
    sending an unending stream of Turnout messages.
    This most commonly hit LocoNet systems, but as SE8c boards
    can be used with any DCC system, it's a general problem.
    This is fixed in <a href="jmri4.7.4.shtml">JMRI 4.7.4<a/></li>
</ul>

<!--
If any of those effect you, please either wait for
<a href="jmri4.7.4.shtml">JMRI 4.7.4</a>, due out shortly after this one,
or (once there's a fix for the problem) pick up a
<a href="http://jmri.tagadab.com/jenkins/job/Development/job/Packages/">development build installer</a>
from
<a href="http://jmri.tagadab.com/jenkins/job/Development/job/Packages/">Jenkins</a>.</p>
 -->

<a id="warnings" name="warnings"></a>
<h3>New warnings for this release:</h3>

<ul>
    <li>This release will not start cleanly if installed over earlier versions of JMRI (the Windows installer ensures
    this is not an issue). Remove the JAR files <em>jackson-annotations-2.0.6.jar</em>, <em>jackson-core-2.0.6.jar</em>,
    and <em>jackson-databind-2.0.6.jar</em> from the <em>lib</em> directory within the installation directory to resolve
    this.</li>

</ul>

<h3>Older warnings</h3>

See the <a href="jmri4.6.shtml#warnings">JMRI 4.6 release note</a> for warnings predating the 4.6 development series.
These may be relevant to you if you're updating from an earlier version.

<p><em>(Since JMRI 4.7.1)</em> JMRI no longer supports the portable paths <code>resource:</code> or <code>file:</code> that
        were deprecated in JMRI 2.13. When loading a panel, an error message will be displayed
        if the panel contains a path that starts with <code>resource:</code> and the panel will
        not load until changed using an external editor. Paths starting with <code>file:</code>
        cannot be automatically flagged because JMRI allows file: URLs.
        
<p><em>(Since JMRI 4.7.1)</em> JMRI applications will not load a panel file that fails XML validation; an error will be
        shown that should explains the error, allowing it to be fixed using an editor. (The
	    explanations remain a work in progress.)

<p><em>(Since JMRI 4.7.1)</em>
        The LocoNet Server (the LocoNetRMI service; not the LocoNetOverTcp service)
        in this version of JMRI doesn't properly interoperate with JRMI 4.6 or before.
        The workaround is to update both client and server JMRI machines to the same
        JMRI version.  We expect this will be fixed in <a href="jmri4.7.1.shtml">JMRI 4.7.5</a>.

<p><em>(Since JMRI 4.5.6)</em> 
        As part of fixing the 
        <a href="https://github.com/JMRI/JMRI/issues/2081">TMCC throttle issue</a>,
        the handling of TMCC preferences was changed.  If you have a TMCC
        connection configured, please go to the 
        "<a href="http://jmri.org/help/en/package/apps/TabbedPreferences.shtml#Connection">Defaults</a>"
        pane in the Preferences window and make sure that the 
        TMCC connection is selected for the appropriate device types.

<p><em>(Since JMRI 4.5.2)</em>This and future releases of JMRI may not function on OS X if the Java SE 6 provided by Apple is installed. OS X
    operating system updates routinely remove this version of Java SE 6. Please raise any issues concerning this on the
    user's group.
    <p>To remove Java SE 6 from OS X, follow these steps (these steps assume
      JMRI is installed in the folder <em>/Applications/JMRI</em>, if not,
      adjust the following paths as needed):</p>
    <ol>
      <li>Open <em>Terminal.app</em>.
        <p><em>El Capitan only:</em> Reboot into Recovery Mode by restarting your
          Mac and pressing Cmd-R until the Apple logo appears. Once in Recovery Mode,
          select Terminal from the Utilities menu.</p>
        </li>
      <li>Run the command <code>/Applications/JMRI/PanelPro.app/Contents/Resources/uninstall-java6.sh</code> It can take
        up to a half hour to complete. Wait for the message <em>Removed Apple Java SE6</em>.
        <p><em>El Capitan only:</em> Run the command <code>bash /Volumes/Macintosh\ HD/Applications/JMRI/PanelPro.app/Contents/Resources/uninstall-java6.sh /Volumes/Macintosh\ HD</code>
          It can take up to a half hour to complete. Wait for the message <em>Removed Apple Java SE6</em>.</p>
        </li>
      <li><em>El Capitan only:</em> Restart your Mac.</li>
    </ol>
  
<p><em>(Since JMRI 4.5.2)</em>Support for directly executing AppleScript within JMRI has been removed
    due to changes in macOS and Java outside our control. If you require the
    ability to use AppleScript, you may be able to add this capability on your
    own by visiting <a href="https://jmri.github.io/applescript">JMRI
      AppleScript Support</a>, but please be aware that this may not work
    on upcoming releases of macOS or Java.

<p><em>(Since JMRI 4.5.1)</em>Internal turnouts and sensors need to have complete, individual system names.
    The names "IT" and "IS" (without any suffix) are no longer permitted:
    "IT12" is fine, but just "IT" is not. Most panel files that contain these should
    automatically migrate them to new names when saved, but in some cases you might need to manually update them.

<p><em>(Since JMRI 4.3.3)</em> You can now set the order of your startup items: If you're opening panel files, running scripts, etc as
    the program starts up, there's a preferences pane that lets you easily set the order in which those happen.
    If you've set the order manually (e.g. by editing configuration files) in the past, please check this
    preference to make sure it's set the way you want.</p>

<p><em>(Since JMRI 4.1.2)</em> Jython has been upgraded to version 2.7.0 with the following potentially breaking changes:</p>
    <ul>
      <li>The decodeJmriFilename() function is no longer available by default. Use the  FileUtil.getExternalFilename() method instead.</li>
      <li>The simple propertyListener object is no longer available by default. Create your own, following the examples provided in the jython folder in the JMRI distribution.</li>
      <li>jmri_defaults.py included in the JMRI distribution is no longer executed by default, but will be executed before any other Jython scipts if included in your User Files location.</li>
      <li>The default behavior of python.cachedir.skip is now true. If using a custom python.properties file, include "python.cachedir.skip=false" in that file.</li>
      <li>Certain Python scripts are too large to be evaluated in Jython. If a script fails with the <code>java.io.IOException: Mark invalid</code> error, set "jython.exec=true" in a custom python.properties file or rewrite the script to be less than 100,000 characters per file. Note that when using "jython.exec=true" it may be desirable to run the included script jmri_bindings.py as a startup action to emulate the evaluation environment used when jython.exec=false.</li>
    </ul>

<p><em>(Since JMRI 4.1.1)</em> Decoder definitions that use the "ivariable" form are now deprecated.  Definitions
    included with this release have been converted to the new form.
    If you have decoder definitions with the older "ivariable" form, they will no longer
    validate, but can still be used for the first couple of test releases in this series.
    Please ask on the JMRI Users group
    for help converting them, or just drop them and use the current definitions.</p>


<h3>Download links:</h3>

Please note that the download links in this and future JMRI releases link to 
<a href="https://github.com/JMRI/JMRI/releases/tag/v4.7.3">Github servers</a>.
If that doesn't work for you, the files are also still available from the
<a href="https://sourceforge.net/projects/jmri/files/test%20files">SourceForge.net servers</a>. 
Please <a href="mailto:jmri.@jmri.net">let us know</a> of any problems.

<ul>
<li>OS X / macOS: <a
	href="https://github.com/JMRI/JMRI/releases/download/v4.7.3/JMRI.4.7.3.R202c9ee.dmg">https://github.com/JMRI/JMRI/releases/download/v4.7.3/JMRI.4.7.3.R202c9ee.dmg</a><br/>
  sha256: c4ca7d32789de60a1764cc0c50cf2b73e2357ecd8e407a79b2c229193487858f</li>

<li>Windows: <a
	href="https://github.com/JMRI/JMRI/releases/download/v4.7.3/JMRI.4.7.3.R202c9ee.exe">https://github.com/JMRI/JMRI/releases/download/v4.7.3/JMRI.4.7.3.R202c9ee.exe</a><br/>
   sha256: 4fe5b78e96444939bf9933ad2c0d486a36ec40a472b2dcf1de30c8ffe6edb03b</li>

<li>Linux: <a
	href="https://github.com/JMRI/JMRI/releases/download/v4.7.3/JMRI.4.7.3.R202c9ee.tgz">https://github.com/JMRI/JMRI/releases/download/v4.7.3/JMRI.4.7.3.R202c9ee.tgz</a><br/>
   sha256: 87a1cf58c3c39a47cdc22a29ce24469051ee4ae559b804df66dbbe274e520e47</li>
</ul>

<!-- 
Preliminary build files (not the final released files) can be found
on the
<a href="http://jmri.tagadab.com/jenkins/job/TestReleases/job/4.7.3/">CI project page</a>.

<p>During development leading to the actual release, you can find test download files on the
<a href="http://builds.jmri.org/jenkins/job/Development/job/Packages/">continuous integration build page</a>.
These are development files, and might not be working at any particular time.</p>
 -->

<h3>Changes since <a href="jmri4.6.shtml">production release 4.7.2</a>:</h3>

The <a href="https://github.com/JMRI/JMRI/issues?utf8=✓&q=is%3Aclosed&q=milestone%3A4.7.3+">list of included commits</a> is available from our
<a href="https://github.com/JMRI/JMRI">GitHub code repository</a>.

    <h4>DecoderPro</h4>

        <p>DecoderPro now has two additional options for 
           how it handles CV reads and writes.  These are set via the
           <a href="http://jmri.org/help/en/package/apps/TabbedPreferences.shtml#programmer">Programmer section of the Roster preferences panel</a>.
           <ul>
          <li>"Allow caching when writing index CVs for read or write 
                operations": Some decoders require that specific values
                be written to "index" CVs before certain other locations can be 
                read or written. QSI and ESU decoders use this extensively.
                When doing a lot of reads or writes, for example an entire
                decoder, the index CVs can end up being written with the
                same value many times in a row.  When selected, this 
                option allows DecoderPro to skip (save time on) writes 
                of the same index value that are otherwise redundant.  
                Don't use this (or use it only in combination with the
                following operation) if you have reliability problems
                writing decoders, as proper operation of this option depends on reliable writes.
                <p>
                More detail:  A single bad write with this option off trashes
                one CV; writing a bad index with this option off trashes the CV that was supposed 
                to be written and the wrong one addressed by the bad write,
                but the write to the next CV in the sequence is OK due to the 
                redundant next write of the index; writing a bad
                index with this option on leaves that badly-written index value in place, so writes a sequence 
                of bad CV values. Bottom line:  If working with a complicated
                decoder with lots of CVs, you need a reliable programming connection, see next option.
                
          <li>"When possible, confirm CV writes by following this with a read": 
               When selected, DecoderPro will read each CV after writing it.
               If the value doesn't match, it marks the write as failed.
               <p>If you're having intermittent trouble writing to a decoder, this 
               may improve reliability. If DecoderPro is never able to properly write, 
               this won't help; it only helps if the problem is occasional,
               and retrying will get it right more often than not.
               <p>Some DCC systems will check for a "write acknowledge pulse"
               from the decoder before declaring the write a success.  
               Those are almost as reliable as this, and much faster.  
               So if you're using one of those DCC systems, this might 
               not be needed.
               On the other hand, if you're using a DCC system that
               "writes blind", with no check, this might be really useful.
               To tell if you have one of those, try writing CVs with
               the locomotive off the track.  If DecoderPro thinks the write
               succeeded, then the DCC system is writing blindly, without checking.
               <p>This doesn't help (but doesn't hurt) if you can't read back
               the decoder. Most DCC systems can't read during ops mode 
               programming, for example. Some command stations (Digitrax DB150)
               can't read from the decoder. In those cases, this option 
               just asks the command station to write without reading back.
          </ul>
          These options are stored with the preferences for future use.  A new DecoderPro Roster window
          will pick up new values of the options, without having to close and restart the program.
           
    <h4>Hardware Support</h4>

        <p><a href="http://jmri.org/help/en//html/apps/DecoderPro/CreateDecoderAdvanced.shtml#capability">Programming capability facades</a> 
            are little tools that are used to handle things
            like indexed CVs, special ways to write upper-address CVs not supported by a command station, etc.
            Previously, these would have trouble recovering when they encountered multiple errors.
            (This came up in the context of the time that the DCS240 command station takes to do writes, 
            which JMRI thought was an error) This has now been greatly improved.</p>

        <h5>C/MRI</h5>
            <ul>
            <li>Much work on the reliability of the C/MRI support, fixing
                bugs in both setting preferences and normal running.</li>
            <li>Having multiple C/MRI connections should now basically work,
                although there may still be some issues when starting up
                C/MRI tools from the Preferences, e.g. opening the C/MRI
                Monitor automatically at startup.  Work on all this is
                proceeding.
            </ul>

        <h5>Digitrax</h5>
            <ul>
                <li>The Digitrax DCS240 command station sometimes takes a long time to write CVs
                    It's thought that this is happening because it's doing a read-after-write to ensure
                    the right value was stored in the right place.  In any case, it takes so
                    long that JMRI was timing out and and retrying while waiting for it to complete. 
                    This has now been improved.
                    It's still slow, excruciatingly slow if writing indexed CVs, but the timing is properly handled.</li>
		<li>The DS64 configuration tool now has the ability to configure the addresses for the 
		    turnout outputs, and to configure the DS64 "routes".</li>
            </ul>

    <h4>New / Updated decoder definitions</h4>
      <ul>
        <li>The 
            <a href="http://jmri.org/help/en//html/apps/DecoderPro/CreateDecoderAdvanced.shtml#capability">programming capability facade</a> 
            for handling indexed CVs has been improved to reduce the number of times that 
            it has to write values to the "PI" and "SI" index CVs.  Some decoders require that e.g.
            you write a value to CV31, then another value to CV32, then finally access the specific
            CV you're looking for.  This can take a long time, especially when using a command station 
            that writes slowly (see comment about DCS240 above)
            The indexed CV support has been updated so that it can skip writes when the previous 
            operation was to an indexed CV with the exact same indexed values, and the command
            station didn't report any errors.  This speeds things up greatly (can save over an hour when reading
            an ESU LokSound V4 decoder with a DCS240).  
            <p>
            This option is under user control, see above, and defaults to off.
            If a decoder cannot do this, e.g. the index values really do have to be written every time, 
            that should be signaled by setting "skipDupIndexWrite" to false in the decoder definition, 
            see the
            <a href="http://jmri.org/help/en//html/apps/DecoderPro/CreateDecoderAdvanced.shtml#indexedcap">documentation page</a>.
        </li>
     </ul>

    <h4>Logix</h4>
        <ul>
          <li><strong>Name selection options</strong> &mdash; Two new methods for 
          selecting names for "State Variables" and "Actions"
          have been added.  Choose the desired option using the Logix Table
          <strong>Options</strong> menu:
            <ul>
              <li><strong>Use Traditional Pick Lists</strong> &mdash; The default option uses a
              	 text field where the system or user name is entered, such as a
              	 turnout or sensor.  This method also provides a Pick List window
              	 with tabs for each type of object.  Drag a name from the pick list
                 and drop it on the name field.</li>
              <li><strong>Use Single Pick Lists</strong> &mdash; This option also uses a
                 text field, but the Pick List only displays the names for the
                 current object, such as sensors.  Clicking on a name in the
                 Pick List will automatically copy the name to the text field.</li>
              <li><strong>Use Combo Name Boxes</strong> &mdash; The Combo Box option changes
                 the text field to a drop down combo box.  Clicking on an item
                   selects the name.</li>
            </ul>
          </li>
          <li><strong>Conditional Browser</strong> &mdash; A <strong>Browse</strong> option has
          been added to the <strong>Select</strong> menu for each Logix in the table.  Selecting this
          entry will open a window that contains a formatted list of
          the conditionals contained within the selected Logix.</li>
          <li>The Logix help documents have been updated.</li>
        </ul>

    <h4>Panel Editors</h4>
        <ul>
            <li>Egbert Broerse added a new type of panel, <a href="http://jmri.org/help/en/package/jmri/jmrit/display/SwitchboardEditor.shtml">Switchboards</a>. They provide a grid of buttons to control turnouts, lights or sensors. Existing items will show their current state and allow you to toggle their state. This first edition include German and Dutch translations.</li>
        </ul>

    <h4>Signals</h4>

        <h5>Signal Systems</h5>
            <ul>
                <li>Greg McCartney provided new definitions for the
                    <a href="http://jmri.org/xml/signals/SOU-1981/index.shtml">Southern 1981 system</a></li>
            </ul>

        <h5>Signal Heads</h5>
            <ul>
                <li>SE8c Signal Heads now follow traffic on the layout, so 
                if another signal system is setting the hardware SE8c signals, 
                the JMRI panel signals will follow them.</li>
            </ul>

   <h4>Warrants</h4>
        <ul>
            <li>The Create/Edit Warrants help file was updated to explain the "Share Route" and "Don't Ramp" options.</li>
            <li>Implementation of these options was completed.</li>
            <li>A bug preventing restarts of cleared occupancy was fixed.</li>
        </ul>

   <h4>Web Access</h4>
        <ul>
            <li>New feature to upload new or updated Roster Entry xml files and images. At top of existing Roster page.</li>
        </ul>

   <h4>Internationalization</h4>
        <ul>
            <li>Much more Danish translation from Sonnys Hansen.</li>
            <li>Print outs of roster reports from DecoderPro were updated by Egbert Broerse to  use translatable headings (don't translate the word 'CV')</li>
        </ul>
        
    <h4>Miscellaneous</h4>
        <ul>
            <li>User Names entered by the user are checked for spaces at the start and end before they are applied. 
                We expect this will prevent some hard to spot errors.</li>
            <li>The naming scheme for JMRI builds has changed slightly. Build metadata (the building user, build date/time,
	    and git revision at time of build) are now deliniated using plus (+) signs instead of hyphens. The build
	    date/time is now ISO 8601 parsable. (<a href="https://github.com/JMRI/JMRI/pull/3253">#3253</a>)</li>
	    <li>The library used to identify connected systems on Windows has been updated. Although this should have no
	    impact, scripts that accessed the Windows Registry using the WinRegistry should be updated to use Java Native
	    Access. (<a href="https://github.com/JMRI/JMRI/pull/3353">#3353</a>)</li>
        </ul>

   <!--#include virtual="/Footer.shtml" -->
  </div><!-- closes #mainContent-->
  </div> <!-- closes #mBody-->
 <script src="/js/main.js"></script>
</body>
</html>
