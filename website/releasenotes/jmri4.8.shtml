<!DOCTYPE html>
<html lang="en">
<head>
 <title>
 JMRI: Release Notes for 4.8
 </title>
    <meta name="author" content="Bob Jacobsen">
    <meta name="keywords" content="java model railroad JMRI 4.8 decoderpro panelpro loconet lenz nce easydcc dcc nmra">

<!-- Style -->
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>

<!--#include virtual="/Header.shtml" -->

  <div id="mBody">
    <!--#include virtual="../download/Sidebar.shtml" -->
    <div id="mainContent">
      <h1>
      Release Notes for JMRI 4.8 release
      </h1>

    <p>Date: July 23, 2017</p>
    <p>From: Bob Jacobsen</p>
    <p>Subject: Production Release 4.8 of JMRI/DecoderPro is available for download.</p>

<!-- 
<p><b>This is a draft release note only; the download links do not yet work</b></p>
 -->

<p>We are very pleased to announce that the 4.7 series of JMRI test releases has resulted in a
version that's good enough to be recommended for general use, including by new users.
We're therefore making that version, "Production Release 4.8" available for download today.</p>

<h2>Notes:</h2>

<p><b>
JMRI is now only available under the
<a href="/COPYING">GNU General Public License</a>. For more information, please
see our
<a href="/copyright.shtml">copyright and licensing page</a>.</b></p>

<a href="images/jmri-4.7.4-B.png"><img src="images/jmri-4.7.4-B.png" alt="after image" align="right" height="173" width="293"></a>
<a href="images/jmri-4.7.4-A.png"><img src="images/jmri-4.7.4-A.png" alt="before image" align="right" height="173" width="295"></a>
<a id="migration" name="migration"></a>
<h3>Required Migration Step<span class="since">Since <a href="jmri4.7.4.shtml">JMRI 4.7.4</a></span></h3>
JMRI was updated in JMRI 4.7.4 to use a new serial library. Depending on your exact
circumstances, you may need to do some migrations:
<ul>
<li>If you are using JMRI on Linux or macOS / OS X and are updating from an older JMRI version,
<em>you must open the JMRI preferences and make sure that the selections are 
correct for your serial device(s).</em> Be sure to save the changes.
<p>
In general, previous versions used serial device names like 
"/dev/cu.usbserial-ABC123FG". This version will generally omit the prefix, and
use serial device names like "cu.usbserial-ABC123FG".
(If given the choice between a name starting with "tty" and one starting with "cu", 
pick the "cu" one). See the before and after images to the right.
<li>
If you are using Linux and have previously used the "JMRI_SERIAL_PORTS"
option to make sure your serial device is visible to JMRI, you'll have 
to change that to use the "purejavacomm.portnamepattern" option instead.
See the 
<a href="http://jmri.org/install/FAQLinux.shtml#usb">JMRI Linux install page</a> for more information.
<li>
If you use your own JMRI scripts to access a serial device, you'll have to update
their library references:
    <ul>
    <li>Any 
        <code>import gnu.io</code> statements will have to be replaced by 
        <code>import purejavacomm</code> statements.
    <li>More generally, any reference to 
        <code>gnu.io</code>, e.g. a reference to a class like 
        <code>gnu.io.SerialPort</code>, statements will have to be replaced by 
        a reference to the corresponding 
        <code>purejavacomm</code> class.
    </ul>
</ul>

<a id="problems" name="problems"></a>
<h3>Known problems with this release</h3>

<ul>
    <li>None
    </li>
</ul>

<!--
If any of those effect you, please either wait for
<a href="jmri4.9.1.shtml">JMRI 4.9.1</a>, due out shortly after this one,
or (once there's a fix for the problem) pick up a
<a href="http://jmri.tagadab.com/jenkins/job/Development/job/Packages/">development build installer</a>
from
<a href="http://jmri.tagadab.com/jenkins/job/Development/job/Packages/">Jenkins</a>.</p>
 -->

<a id="warnings" name="warnings"></a>
<h3>New warnings for this release:</h3>

<p><span class="since">Since <a href="jmri4.7.6.shtml">JMRI 4.7.6</a></span>
    If you're having trouble getting your DCC programmer to work, try
    checking that the "Defaults" under "Preferences" are set to your
    hardware system.
    The reason: This version of JMRI (and all later) provides more options for
    "default systems": If you have multiple sets of hardware attached, which
    should be used for throttles, for programming, etc.  JMRI tries to 
    guess the right settings for these when you upgrade to this version, but 
    apparently it sometimes gets that wrong (we haven't been able to track
    that down yet). Setting them manually fixes any wrong guesses.

<p><span class="since">Since <a href="jmri4.7.5.shtml">JMRI 4.7.5</a></span>
    This version of JMRI (and all later) writes a slightly streamlined
    version of panel file contents.  
    Older files should still be readable by this version of JMRI, 
    but files written by this version may not be readable by versions
    before JMRI 4.2 depending on their contents.

<p><span class="since">Since <a href="jmri4.7.5.shtml">JMRI 4.7.5</a></span>
    The LocoNetOverTCP server has changes that may break scripts that reference it. Scripts refering to
    the class jmri.jmrix.loconet.loconetovertcp.Server need to refer instead to
    jmri.jmrix.loconet.loconetovertcp.LnTcpServer.

<p><span class="since">Since <a href="jmri4.7.3.shtml">JMRI 4.7.3</a></span> 
    This release will not start cleanly if installed over earlier versions of JMRI (the Windows installer ensures
    this is not an issue). Remove the JAR files <em>jackson-annotations-2.0.6.jar</em>, <em>jackson-core-2.0.6.jar</em>,
    and <em>jackson-databind-2.0.6.jar</em> from the <em>lib</em> directory within the previous installation directory to resolve
    this.

<p><span class="since">Since <a href="jmri4.7.1.shtml">JMRI 4.7.1</a></span>
        JMRI no longer supports the portable paths <code>resource:</code> or <code>file:</code> that
        were deprecated in JMRI 2.13. When loading a panel, an error message will be displayed
        if the panel contains a path that starts with <code>resource:</code> and the panel will
        not load until changed using an external editor. Paths starting with <code>file:</code>
        cannot be automatically flagged because JMRI allows file: URLs.
        
<p><span class="since">Since <a href="jmri4.7.1.shtml">JMRI 4.7.1</a></span>
        The LocoNet Server (the LocoNetRMI service; not the LocoNetOverTcp service)
        in this version of JMRI doesn't properly interoperate with 
        <a href="jmri4.7.1.shtml">JMRI 4.7.1</a> through <a href="jmri4.7.4.shtml">JMRI 4.7.4</a>.
        It does work fine with <a href="jmri4.6.shtml">JMRI version 4.6</a> or before.
        If you encounter a problem with version compatibility, you'll see an error
        message that includes "<code>local class incompatible</code>".
        The workaround is to update both client and server JMRI machines to the same
        JMRI version. 
        
<p><span class="since">Since <a href="jmri4.7.1.shtml">JMRI 4.7.1</a></span>
        JMRI applications will not load a panel file that fails XML validation; an error will be
        shown that should explains the error, allowing it to be fixed using an editor. (The
	    explanations remain a work in progress.) The usual cause of something like this is (imperfect) 
	    manual editing of the file, but it can happen for multiple reasons. If you encounter this, try these things:
	    <ul>
	    <li>Use a copy of JMRI 4.6 to 
	    load and rewrite the file into the proper format; 
	    <li>Or set your
	    preferences to execute the 
	    "<a href="http://jmri.org/jython/TurnOffXmlValidation.py">TurnOffXmlValidation.py</a>" script
	    <em>before</em> JMRI loads your panel file;
	    <li>Or finally, ask for help fixing the file on the JMRIusers list.
	    </ul>
	    <p>It's a good idea to keep a copy of the original file as you work on this, just in case.</p>

<h3>Older warnings</h3>

<p>See the <a href="jmri4.6.shtml#warnings">JMRI 4.6 release note</a> for more warnings predating the 4.6 development series.
These may be relevant to you if you're updating from an earlier version.</p>

<p><span class="since">Since <a href="jmri4.5.6.shtml">JMRI 4.5.6</a></span>  
        As part of fixing the 
        <a href="https://github.com/JMRI/JMRI/issues/2081">TMCC throttle issue</a>,
        the handling of TMCC preferences was changed.  If you have a TMCC
        connection configured, please go to the 
        "<a href="http://jmri.org/help/en/package/apps/TabbedPreferences.shtml#Connection">Defaults</a>"
        pane in the Preferences window and make sure that the 
        TMCC connection is selected for the appropriate device types.

<p><span class="since">Since <a href="jmri4.5.2.shtml">JMRI 4.5.2</a></span>
    This and future releases of JMRI may not function on MacOS / OS X if the Java SE 6 provided by Apple is installed,
    but it may be reinstalled with other software programs. macOS
    operating system updates routinely remove this version of Java SE 6. Please raise any issues concerning this on the
    user's group.
    To remove Java SE 6 from macOS / OS X, follow these steps (these steps assume
      JMRI is installed in the folder <em>/Applications/JMRI</em>. If you've installed it in a different location,
      adjust the following paths as needed):</p>
    <ol>
      <li>Open <em>Terminal.app</em>.
        <p><em>OS X El Capitan only:</em> Reboot into Recovery Mode by restarting your
          Mac and pressing Cmd-R until the Apple logo appears. Once in Recovery Mode,
          select Terminal from the Utilities menu.</p>
        </li>
      <li>Run the command <code>/Applications/JMRI/PanelPro.app/Contents/Resources/uninstall-java6.sh</code><br>It can take
        up to a half hour to complete. Wait for the message <em>Removed Apple Java SE6</em>.
        <p><em>OS X El Capitan only:</em> Run the command <code>bash /Volumes/Macintosh\ HD/Applications/JMRI/PanelPro.app/Contents/Resources/uninstall-java6.sh /Volumes/Macintosh\ HD</code>
      <br>It can take up to a half hour to complete. Wait for the message <em>Removed Apple Java SE6</em>.</p>
        </li>
      <li><em>OS X El Capitan only:</em> Restart your Mac.</li>
    </ol>
  
<p><span class="since">Since <a href="jmri4.5.2.shtml">JMRI 4.5.2</a></span>
    Support for directly executing AppleScript within JMRI has been removed
    due to changes in macOS and Java outside our control. If you require the
    ability to use AppleScript, you may be able to add this capability on your
    own by visiting <a href="https://jmri.github.io/applescript">JMRI
      AppleScript Support</a>, but please be aware that this may not work
    on upcoming releases of macOS or Java.

<p><span class="since">Since <a href="jmri4.5.1.shtml">JMRI 4.5.1</a></span> 
    Internal turnouts and sensors need to have complete, individual system names.
    The names "IT" and "IS" (without any suffix) are no longer permitted:
    "IT12" is fine, but just "IT" is not. Most panel files that contain these should
    automatically migrate them to new names when saved, but in some cases you might need to manually update them.

<p><span class="since">Since <a href="jmri4.3.3.shtml">JMRI 4.3.3</a></span>
    You can now set the order of your startup items: If you're opening panel files, running scripts, etc as
    the program starts up, there's a preferences pane that lets you easily set the order in which those happen.
    If you've set the order manually (e.g. by editing configuration files) in the past, please check this
    preference to make sure it's set the way you want.</p>

<p><span class="since">Since <a href="jmri4.1.2.shtml">JMRI 4.1.2</a></span>
    Jython has been upgraded to version 2.7.0 with the following potentially breaking changes:</p>
    <ul>
      <li>The decodeJmriFilename() function is no longer available by default. Use the  FileUtil.getExternalFilename() method instead.</li>
      <li>The simple propertyListener object is no longer available by default. Create your own, following the examples provided in the jython folder in the JMRI distribution.</li>
      <li>jmri_defaults.py included in the JMRI distribution is no longer executed by default, but will be executed before any other Jython scipts if included in your User Files location.</li>
      <li>The default behavior of python.cachedir.skip is now true. If using a custom python.properties file, include "python.cachedir.skip=false" in that file.</li>
      <li>Certain Python scripts are too large to be evaluated in Jython. If a script fails with the <code>java.io.IOException: Mark invalid</code> error, set "jython.exec=true" in a custom python.properties file or rewrite the script to be less than 100,000 characters per file. Note that when using "jython.exec=true" it may be desirable to run the included script jmri_bindings.py as a startup action to emulate the evaluation environment used when jython.exec=false.</li>
    </ul>

<p><span class="since">Since <a href="jmri4.1.1.shtml">JMRI 4.1.1</a></span>
    Decoder definitions that use the "ivariable" form are now deprecated.  Definitions
    included with this release have been converted to the new form.
    If you have decoder definitions with the older "ivariable" form, they will no longer
    validate, but can still be used for the first couple of test releases in this series.
    Please ask on the JMRI Users group
    for help converting them, or just drop them and use the current definitions.</p>

<a id="download" name="download"></a>
<h2>Download links:</h2>

<p>Please note that the download links in this and future JMRI releases link to 
<a href="https://github.com/JMRI/JMRI/releases/tag/v4.8">Github servers</a>.
If that doesn't work for you, the files are also still available from the
<a href="https://sourceforge.net/projects/jmri/files/production%20files">SourceForge.net servers</a>. 
Please <a href="mailto:jmri.@jmri.net">let us know</a> of any problems.</p>

<ul>
<li>macOS / OS X: <a
	href="https://github.com/JMRI/JMRI/releases/download/v4.8/JMRI.4.8.Rbe0ff15.dmg">https://github.com/JMRI/JMRI/releases/download/v4.8/JMRI.4.8.Rbe0ff15.dmg</a><br/>
  sha256: 0cc00f0a676e659bedd871c1a2dd4517de22a159bb3a47cb2815aa0d3ff17d31</li>

<li>Windows: <a
	href="https://github.com/JMRI/JMRI/releases/download/v4.8/JMRI.4.8.Rbe0ff15.exe">https://github.com/JMRI/JMRI/releases/download/v4.8/JMRI.4.8.Rbe0ff15.exe</a><br/>
   sha256: 734e2c73f7f9de654bfe2b417dd87a777f6e4e65ca5bf7f048c6d71c13972fa8</li>

<li>Linux: <a
	href="https://github.com/JMRI/JMRI/releases/download/v4.8/JMRI.4.8.Rbe0ff15.tgz">https://github.com/JMRI/JMRI/releases/download/v4.8/JMRI.4.8.Rbe0ff15.tgz</a><br/>
   sha256: 4492e3466d35c2c4685e9173a252b8d0f09cb5e871d9fa0af50780ef47786756</li>
</ul>

<!-- 
Preliminary build files (not the final released files) can be found
on the
<a href="http://jmri.tagadab.com/jenkins/job/TestReleases/job/4.8/">CI project page</a>.
 -->

<!--
<p>During development leading to the actual release, you can find test download files on the
<a href="http://builds.jmri.org/jenkins/job/Development/job/Packages/">continuous integration build page</a>.
These are development files, and might not be working at any particular time.</p>
-->

<h2>Changes since <a href="jmri4.6.shtml">production release 4.6</a>:</h2>

<p>The full lists of changes in each of the preceding test releases 
(<a href="https://github.com/JMRI/JMRI/issues?utf8=✓&q=is%3Aclosed&q=milestone%3A4.7.1+">4.7.1<a>,
<a href="https://github.com/JMRI/JMRI/issues?utf8=✓&q=is%3Aclosed&q=milestone%3A4.7.2+">4.7.2<a>,
<a href="https://github.com/JMRI/JMRI/issues?utf8=✓&q=is%3Aclosed&q=milestone%3A4.7.3+">4.7.3<a>,
<a href="https://github.com/JMRI/JMRI/issues?utf8=✓&q=is%3Aclosed&q=milestone%3A4.7.4+">4.7.4<a>,
<a href="https://github.com/JMRI/JMRI/issues?utf8=✓&q=is%3Aclosed&q=milestone%3A4.7.5+">4.7.5<a>,
<a href="https://github.com/JMRI/JMRI/issues?utf8=✓&q=is%3Aclosed&q=milestone%3A4.7.6+">4.7.6<a>,
<a href="https://github.com/JMRI/JMRI/issues?utf8=✓&q=is%3Aclosed&q=milestone%3A4.7.7+">4.7.7<a>,
<a href="https://github.com/JMRI/JMRI/issues?utf8=✓&q=is%3Aclosed&q=milestone%3A4.7.8+">4.7.8<a>)
are available in our 
<a href="https://github.com/JMRI/JMRI">GitHub code repository</a>.</p>

    <h3>DecoderPro</h3>
         <ul>
            <li>DecoderPro now has two additional options for 
               how it handles CV reads and writes. These are set via the
               <a href="http://jmri.org/help/en/package/apps/TabbedPreferences.shtml#programmer">Programmer section of the Roster preferences panel</a>.
               <ul>
               <li>"Allow caching when writing index CVs for read or write 
                    operations": Some decoders require that specific values
                    be written to "index" CVs before certain other locations can be 
                    read or written. QSI and ESU decoders use this extensively.
                    When doing a lot of reads or writes, for example an entire
                    decoder, the index CVs can end up being written with the
                    same value many times in a row.  When selected, this 
                    option allows DecoderPro to skip (save time on) writes 
                    of the same index value that are otherwise redundant.  
                    Don't use this (or use it only in combination with the
                    following operation) if you have reliability problems
                    writing decoders, as proper operation of this option depends on reliable writes.
                    <br>
                    More detail:  A single bad write with this option off trashes
                    one CV; writing a bad index with this option off trashes the CV that was supposed 
                    to be written and the wrong one addressed by the bad write,
                    but the write to the next CV in the sequence is OK due to the 
                    redundant next write of the index; writing a bad
                    index with this option on leaves that badly-written index value in place, so writes a sequence 
                    of bad CV values. Bottom line:  If working with a complicated
                    decoder with lots of CVs, you need a reliable programming connection, see next option.</li>
                
              <li>"When possible, confirm CV writes by following this with a read": 
                   When selected, DecoderPro will read each CV after writing it.
                   If the value doesn't match, it marks the write as failed.
                   <p>If you're having intermittent trouble writing to a decoder, this 
                   may improve reliability. If DecoderPro is never able to properly write, 
                   this won't help; it only helps if the problem is occasional,
                   and retrying will get it right more often than not.
                   <p>Some DCC systems will check for a "write acknowledge pulse"
                   from the decoder before declaring the write a success.  
                   Those are almost as reliable as this, and much faster.  
                   So if you're using one of those DCC systems, this might 
                   not be needed.
                   On the other hand, if you're using a DCC system that
                   "writes blind", with no check, this might be really useful.
                   To tell if you have one of those, try writing CVs with
                   the locomotive off the track.  If DecoderPro thinks the write
                   succeeded, then the DCC system is writing blindly, without checking.
                   <p>This doesn't help (but doesn't hurt) if you can't read back
                   the decoder. Most DCC systems can't read during ops mode 
                   programming, for example. Some command stations (Digitrax DB150)
                   can't read from the decoder. In those cases, this option 
                   just asks the command station to write without reading back.</li>
              </ul>
              These options are stored with the preferences for future use.  A new DecoderPro Roster window
              will pick up new values of the options, without having to close and restart the program.
            </li>
            <li>
                The Single CV Programmer now supports Ops Mode Accessory Programming
                (Program Accessory Decoder on the Main).
                <br>This should work with most DCC systems<sup>*</sup>,
                but only with Accessory Decoders that support this programming mode.
                (Dave Heap)
                <br><br><sup>*</sup>Please advise if your system does not work,
                preferably by creating a
                <a href="https://github.com/JMRI/JMRI/issues/" target="_blank">new issue on GitHub</a>.
                We may be able to help.
            </li>
            <li>
                The Single CV Programmer now also supports:
                <ul>
                    <li>Ops Mode Accessory Programming (Program Accessory Decoder on the Main)</li>
                    <li>Ops Mode Extended Accessory Programming (Program Signal Decoder on the Main)</li>
                </ul>
                (Dave Heap &amp Alex Shepherd)
            </li>
        </ul>
           
    <h3>Hardware Support</h3>
        <ul>
            <li><a href="http://jmri.org/help/en//html/apps/DecoderPro/CreateDecoderAdvanced.shtml#capability">Programming capability facades</a> 
                are little tools that are used to handle things
                like indexed CVs, special ways to write upper-address CVs not supported by a command station, etc.
                Previously, these would have trouble recovering when they encountered multiple errors.
                (This came up in the context of the time that the DCS240 command station takes to do writes, 
                which JMRI thought was an error) This has now been greatly improved.</p>
            <li>Turnouts now have a DELAYED feedback mode. In this mode, when you
                command a turnout to move, it first goes to INCONSISTENT state for 
                a few seconds (to give the points time to move), before finishing up
                in the commanded state.  This is intended for cases where you don't have any
                hardware to specifically read back point position from the layout.</li>
        </ul>
        
	    <h4>Bachrus Speedo</h4>
            <ul>
                <li>Added custom scale selection</li>
            </ul>

        <h4>C/MRI</h4>
            <ul>
                <li>Much work was done on the reliability of the C/MRI support, fixing
                    bugs in both setting preferences and normal running.</li>
                <li>Having multiple C/MRI connections should now basically work,
                    although there may still be some issues when starting up
                    C/MRI tools from the Preferences, e.g. opening the C/MRI
                    Monitor automatically at startup.  Work on all this is
                    proceeding.
                    Working now:
                    <ul>
                    <li>Multiple connections, with the extra ones either identified by
                        a new letter ('K', etc) or a suffix ('C2', 'C3', etc). Each 
                        connection has to have its own nodes defined via the preferences screen.
                    <li>The connections
                        can be of mixed type:  Multiple serial, or multiple network, or 
                        a mix of serial and network.
                    <li>Sensors, Turnouts and Lights can be defined in all the 
                        C/MRI connections through the respective tables.
                    </ul>
                Not yet in this release:
                    <ul>
                    <li>You can't (yet) configure start-up actions to work with 
                        the 2nd and later C/MRI connections. E.g. if you open a 
                        C/MRI monitor in the startup, it'll be using the 1st connection.
                    <li>Some of the labeling and documentation needs to be updated.
                    </ul>
                </li>
                <li>The C/MRI menu and tools were updated for screen layout and translations (German and Dutch provided).</li>
            </ul>

        <h4>DCC++</h4>
            <ul>
                <li>DCCppOverTCP support has been updated.  The SEND/RECEIVE prefixes between
                    host and client have been removed.  New code is backward compatible with
                    old (4.6 or previous)</li>
                <li>Fixed a bug in DCCppOverTCP throttle message translation.</li>
                <li>Fixed a bug in the &lt;s&gt; command response</li>
                <li>Fixed a problem loading and storing Sensors to panel files.</li>
            </ul>

        <h4>Digitrax</h4>
            <ul>
                <li>When a JMRI program is configured to use the DCS240 as a standalone programmer, upon program exit the
		            DCS240 will be re-configured as a LocoNet interface.  This allows other LocoNet devices to access the
		            DCS240 service-mode programming track after the JMRI program is closed.</li>
		        <li>Bob Milhaupt improved the handling of the LocoNet-specific programmers for
		            the SE8C, PM4 and BDL168</li>
                <li>The Digitrax DCS240 command station sometimes takes a long time to write CVs
                    It's thought that this is happening because it's doing a read-after-write to ensure
                    the right value was stored in the right place.  In any case, it takes so
                    long that JMRI was timing out and and retrying while waiting for it to complete. 
                    This has now been improved.
                    It's still slow, excruciatingly slow if writing indexed CVs, but the timing is properly handled.</li>
                <li>The DS64 configuration tool now has the ability to configure the addresses for the 
                    turnout outputs, and to configure the DS64 "routes".</li>
                <li>The LocoNet over TCP server has been refactored with the following changes (<a href="https://github.com/JMRI/JMRI/pull/3498">#3498</a>):
		            <ul>
                        <li>The server can now be started automatically using the Startup preferences.</li>
                        <li>Server preferences are set in the application preferences window.</li>
                        <li>The server classname has changed to jmri.jmrix.loconet.loconetovertcp.LnTcpServer
                            (any scripts referencing the server will need to be changed).
                        </li>
                    </ul>
                </li>
                <li>The LocoNet Download Firmware tool has been updated to report an error when reading a 
                firmware download file which is for a device which requires special LocoNet message timings
                which are not supported by this tool.  Using the wrong protocol would corrupt the device's
                firmware and require factory repair of the unit.  This change prevents this tool from 
                corrupting the firmware of devices including the DCS210, DCS210, DB210, DB210-Opto, and DB220.
                The Digitrax program <em>DigiIPLII.exe</em> may be used to perform firmware updates for these devices.</li>

                <li>The LocoNet Download Firmware tool has been updated to provide slower timings which 
                improve the success-rate of firmware updates, including the UR92.  The tool was also improved
                to prevent other GUI operations from inadvertently interrupting a progressing firmware update.</li>
		
                <li>LocoBuffer, LocoBuffer-II, and LocoBuffer-USB connections may be configured as "Standalone LocoNet" 
		            connections.</li>

		        <li>LocoStats Monitor was corrected to display only "interface status" LocoNet messages.</li>
            </ul>

        <h4>MERG CBUS</h4>
            <ul>
                <li>Fixed a crash when printing</li>
                <li>MERG tools were updated for screen layout and translations (German and Dutch provided).</li>
            </ul>

        <h4>Roco z21/Z21</h4>
            <ul>
                <li>Paul Bender fixed an addressing problem with Roco Handheld throttles.</li>
                <li>Paul Bender improved the Z21 support.</li>
            </ul>

        <h4>SPROG</h4>
            <ul>
                <li>The SPROG command station code has been updated to fix an issue whereby users had observed
		            very slow packet update rates on the rails causing locos to become unresponsive.</li>
		        <li>The SPROG tools can be fully translated</li>
            </ul>

        <h4>ZTC</h4>
            <ul>
                <li>Added Support for the ZTC611 Command Station's internal USB connection</li>
                <li>Added a ZTC611 specific implementation of XPressNet Turnouts</li>
            </ul>

    <h3>New / Updated decoder definitions</h3>

      <ul>
        <li>
            Programming of Accessory Decoders on the Main
            (<a href="../help/en/html/apps/DecoderPro/CreateDecoderAdvanced.shtml#accessoryops"
            target="_blank">Accessory Decoder Ops Mode</a>)
            is now possible, if supported by the decoder.
            You will need to configure your definition to enable this, as per
            <a href="../help/en/html/apps/DecoderPro/CreateDecoderAdvanced.shtml#accessoryops"
            target="_blank">this link</a>.
            <br>
            Some limitations remain:
              <ul>
                <li>There are no progress messages in the status bar.</li>
                <li>For multiple CV writes, programming may continue for some time after the "OK" appears.</li>
                <li>This has been tested with NCE and SPROG systems. Some DCC systems may need extra code,
                    please advise if your system doesn't work.</li>                
                <li>Some accessory decoders do not cope well with closely spaced commands
                    and may miss changing some CVs with "Write All" or "Write Changes".</li>
             </ul>
        </li>
        <li>Wayne Geary provided a number of spelling fixes that covered a number of decoder files.
        </li>
        <li>The 
            <a href="http://jmri.org/help/en//html/apps/DecoderPro/CreateDecoderAdvanced.shtml#capability">programming capability facade</a> 
            for handling indexed CVs has been improved to reduce the number of times that 
            it has to write values to the "PI" and "SI" index CVs.  Some decoders require that e.g.
            you write a value to CV31, then another value to CV32, then finally access the specific
            CV you're looking for.  This can take a long time, especially when using a command station 
            that writes slowly (see comment about DCS240 above)
            The indexed CV support has been updated so that it can skip writes when the previous 
            operation was to an indexed CV with the exact same indexed values, and the command
            station didn't report any errors.  This speeds things up greatly (can save over an hour when reading
            an ESU LokSound V4 decoder with a DCS240).  
            <p>
            This option is under user control, see above, and defaults to off.
            If a decoder cannot do this, e.g. the index values really do have to be written every time, 
            that should be signaled by setting "skipDupIndexWrite" to false in the decoder definition, 
            see the
            <a href="http://jmri.org/help/en//html/apps/DecoderPro/CreateDecoderAdvanced.shtml#indexedcap">documentation page</a>.
        </li>
        <li>
            Programming of both Accessory & Signal (Extended Accessory) Decoders on the Main
            (<a href="../help/en/html/apps/DecoderPro/CreateDecoderAdvanced.shtml#accessoryops"
            target="_blank">Accessory Decoder Ops Mode</a>)
            is now possible, if supported by the decoder.
            You will need to configure your definition to enable this, as per
            <a href="../help/en/html/apps/DecoderPro/CreateDecoderAdvanced.shtml#accessoryops"
            target="_blank">this link</a>.
            (Dave Heap)
        </li>
     </ul>

        <h4>Arnold</h4>
            <ul>
                <li>Alain Carasso fixed a missing consist problem with the Arnold 81210 decoder definition (<a href="https://github.com/JMRI/JMRI/pull/2938">#2938</a>)</li>
            </ul>

        <h4>BLI</h4>
            <ul>
                <li>Mike Mosher updated some BLI definitions</li>
            </ul>

        <h4>Digitrax</h4>
            <ul>
                <li>21MTC HO: DH166MT, SDH186MT, SDXH186MT and Kato N scale: SDXN146K1E, SDXN146K2 and SDXN146K4 definitions added by Marc N. Fournier, completed by Alain Le Marchand (<a href="https://github.com/JMRI/JMRI/pull/3057">#3057</a>)</li>
            </ul>

        <h4>Doehler &amp; Haas</h4>
            <ul>
                <li>Ronald Kuhn added/updated definitions for several decoders (<a href="https://github.com/JMRI/JMRI/pull/2736">#2736</a>):
                    <ul>
                        <li>SD10</li>
                        <li>SD16</li>
                        <li>SD18</li>
                        <li>SD21</li>
                        <li>SD22A</li>
                        <li>FH05B</li>
                        <li>DH05</li>
                    </ul>
            </ul>

        <h4>ESU</h4>
            <ul>
                <li>Dave Heap made the following changes:</li>
                <ul>
                    <li>Added the ESU SwitchPilot series.</li>
                    <li>Added new Product IDs.</li>
                    <li>Added Heavy Load and Coast Mode logical functions as per latest firmware for the soon-to-be-released Full Throttle steam projects.</li>
                    <li>Added Drive Hold (Logical Function) for LokPilot. (Dave Heap)</li>
                    <li>Added/updated some models and Product IDs. (Dave Heap)</li>
                </ul>
            </ul>

        <h4>Hornby</h4>
            <ul>
                <li>Dave Heap made the following changes:
                <ul>
                    <li>Added the "Hornby TTS 9F 2-10-0".</li>
                    <li>Improved Hornby model identification.</li>
                    <li>
                        Replace the incorrectly named "Hornby TTS A4 4-6-0" definition with "Hornby TTS A4 4-6-2".
                        <br>
                        ("Update Decoder Definitions" from the "Actions" menu will fix existing roster entries.)
                    </li>
                </ul>
                </li>
            </ul>

        <h4>Kuehn</h4>
            <ul>
                <li>Ronald Kuhn updated definitions for the N45 and 5Moto decoder familes (<a href="https://github.com/JMRI/JMRI/pull/2736">#2736</a>)</li>
            </ul>

        <h4>Lenz</h4>
            <ul>
                <li>Alain Carasso fixed the missing function map pane for older Lenz Silver decoders (<a href="https://github.com/JMRI/JMRI/pull/2873">#2873</a>)</li>
            </ul>

        <h4>TCS</h4>
            <ul>
                <li>Michael Mosher updated some TCS WOW definitions</li>
            </ul>

        <h4>SoundTraxx</h4>
            <ul>
                <li>Added OEM decoder definitions for some PIKO G scale steam locomotives (Marc Fournier <a href="https://github.com/JMRI/JMRI/pull/2716">#2716</a>)</li>
            </ul>

        <h4>Viessmann</h4>
            <ul>
                <li>Added support for the 4557, 4558, 4559 and 4960 decoders (Alain Le Marchand <a href="https://github.com/JMRI/JMRI/pull/2842">#2842</a>)</li>
            </ul>

        <h4>ZIMO</h4>
            <ul>
                <li>Ronald Kuhn added the MX681 and MX685 decoders (<a href="https://github.com/JMRI/JMRI/pull/2736">#2736</a>)</li>
                <li>Ronald Kuhn updated German translations for several Zimo decoders (<a href="https://github.com/JMRI/JMRI/pull/2736">#2736</a>)</li>
            </ul>


   <h3>Dispatcher</h3>
        <ul>
             <li>Modify auto allocation operation of Dispatcher to allow overriding the default
             practice of allocating no more than three sections in front of the train - this is 
             configurable when creating a train. 
             The override allows Dispatcher to allocate all the way to the designated end 
             block barring other criteria such as occupation. (Jason Janzen)</li>
        </ul>

    <h3>Layout Editor</h3>
        <ul>
            <li>George Warner improved the handling of the Turnout circle to make it easier to hit. (<a href="https://github.com/JMRI/JMRI/pull/2851">#2851</a>)</li>
            <li>Sonnys Hansen improved the Danish translation</li>
            <li>
                New Options menu items:
                <ul>
                    <li>
                        <b>Highlight Selected Block</b> -- Use the alternate track color to verify track component block assignments.
                    </li><li>
                        <b>ToolBar</b>
                        <ul>
                            <li>
                                <b>ToolBar Side</b> -- Position the tool bar on top (default), left, bottom and right.  There is also a Float option which creates a toolbox that can be moved anywhere on the screen.
                            </li><li>
                                <b>Wide ToolBar</b> -- Force the <b>top</b> and <b>bottom</b> tool bars to use the wide mode which may result in horizontal scroll bars.
                            </li><li>
                                <b>Drop Down List Display Order</b> -- Select which names (user and/or system) to use for drop down combo boxes.  This will affect the sort order.  Changes will take effect the next time you start PanelPro.  Note:  This feature is not completely functional yet.
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li>
                Tool bar changes:
                <ul>
                    <li>
                        Mutually exclusive checkboxes have been changed to radio buttons.  Related fields are enabled as needed.
                    </li><li>
                        All text fields, except for text labels,  have been changed to drop-down combo boxes with appropriate content, such as sensor names for the Sensor Icon.
                    </li><li>
                        Floating ToolBox:
                        <ul>
                            <li>
                                Tabs are used to group related toolbar items.
                            </li><li>
                                Clicking on the Close button <em><b>hides</b></em> the ToolBox.  Use the Window menu to make it visible.
                            </li><li>
                                Clicking on the Minimize button creates an icon on the operating system task bar.
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li>Dave Sand <a href="https://github.com/JMRI/JMRI/pull/3623">fixed</a>
                an issue with duplicate block connections when edge connectors are used.</li>
            <li>George Warner improved the rendering of rotated text.</li>
        </ul>

    <h3>Logix</h3>
        <ul>
          <li><strong>Name selection options</strong> &mdash; Two new methods for 
          selecting names for "State Variables" and "Actions"
          have been added.  Choose the desired option using the Logix Table
          <strong>Options</strong> menu:
            <ul>
              <li><strong>Use Traditional Pick Lists</strong> &mdash; The default option uses a
              	 text field where the system or user name is entered, such as a
              	 turnout or sensor.  This method also provides a Pick List window
              	 with tabs for each type of object.  Drag a name from the pick list
                 and drop it on the name field.</li>
              <li><strong>Use Single Pick Lists</strong> &mdash; This option also uses a
                 text field, but the Pick List only displays the names for the
                 current object, such as sensors.  Clicking on a name in the
                 Pick List will automatically copy the name to the text field.</li>
              <li><strong>Use Combo Name Boxes</strong> &mdash; The Combo Box option changes
                 the text field to a drop down combo box.  Clicking on an item
                   selects the name.</li>
            </ul>
          </li>
          <li><strong>Conditional Browser</strong> &mdash; A <strong>Browse</strong> option has
          been added to the <strong>Select</strong> menu for each Logix in the table.  Selecting this
          entry will open a window that contains a formatted list of
          the conditionals contained within the selected Logix.</li>
          <li>The Logix help documents have been updated.</li>
          <li>Logix conditionals are now directly related
              to a parent Logix.  When an existing XML file is
              loaded, any <strong>conditional references</strong>
              are automatically converted.  A review of the 
              system console for any messages is recommended.  There
              are two possible messages:
              <ul>
                <li>Conditional has no parent Logix</li>
                <li>Conditional is not in the Logix index</li>
              </ul>
              Both of these were caused by errors in previous versions
              or manual changes to the panel xml file.  After saving the
              xml file, the errors will not occur.<br>
              Use <strong>Help &gt;&gt; System Console...</strong> to 
              display the system console.
          </li>
          <li>When creating a conditional reference, the input
              field has been replaced by two drop down combo boxes.
              The first one is used to select a Logix and the
              second one to select the Conditional within the
              selected Logix.
          </li>
        </ul>

    <h3>Operations</h3>
			<ul>
				<li>The Timetable sorting order can now be readjusted if needed.
					Simply reorder the table and the next time you open the Timetable
					window, the table order will be restored.</li>
                <li>Train and route departure times can now be set to one minute intervals. Previously, the
                    menus only allowed departure times to within five minute intervals.</li>
                <li>The option to make backup copies of manifests now also makes backup copies of switch lists.</li>
                <li>Some improvements to the UK locale. Fixed several references to "cars" rather than "wagons".</li>
                <li>Improvements to the Route windows. Now if a route is assigned to a train, and a train is built, you won't be
                able to modify the route until the train is either reset or terminated.</li>
                <li>Fixed some train manifest "time" reference bugs where the option to use 12 hour format was ignored. Also fixed
                a couple "time" bugs in the CSV file generation. Thanks to Dan Foltz for bringing these to our attention.</li>
			</ul>

   <h3>Panel Editors</h3>
        <ul>
            <li>Bug that disabled operation of zoomed multisensors is fixed.</li>
            <li>Egbert Broerse added a new type of panel, <a href="http://jmri.org/help/en/package/jmri/jmrit/display/SwitchboardEditor.shtml">Switchboards</a>. 
                They provide a grid of buttons to control turnouts, lights or sensors. Existing items will show their current state and allow you to toggle their state. 
                This first edition includes German and Dutch translations.</li>
            <li>Fixed initial size and position of new Switchboards</li>
            <li>George Warner improved the rendering of rotated text.</li>
        </ul>

    <h3>Roster</h3>
        <ul>
            <li>Proper display of new Roster Groups in the DecoderPro main window was fixed.</li>
            <li>The last modified date for Roster Entries can be correctly sorted. In some cases,
            the Roster Entry may need to be opened and saved again for this to work.</li>
            <li>Roster Entries are now saved with ISO 8601 formatted dates.</li>
        </ul>

    <h3>Turnouts, Lights and other elements</h3>
        <ul>
            <li>The pane to create new objects was modernized, with tooltips and a handy JSpinner to set the number of items to add (see the <a href="http://jmri.sourceforge.net/help/en/package/jmri/jmrit/beantable/TurnoutAddEdit.shtml">Turnout Add/Edit help</a>, Egbert Broerse).</li>
            <li>The <em>Cmd</em> column in the Turnout table, showing Closed/Thrown, was renamed <em>State</em> to align with the other tables.</li>
            <li>Egbert Broerse added the option to display the current state of Turnouts, Lights, Sensors and Blocks as graphics instead of text.
                It can be enabled in the Preferences &gt; Display &gt; GUI tab.</li>
            <li>Turnouts now have a DELAYED feedback mode. In this mode, when you
                command a turnout to move, it first goes to INCONSISTENT state for 
                a few seconds (to give the points time to move), before finishing up
                in the commanded state.  This is intended for cases where you don't have any
                hardware to specifically read back point position from the layout.</li>
        </ul>

    <h3>Scripting</h3>
        <ul>
            <li>Added "<a href="http://jmri.org/jython/TurnOffXmlValidation.py">TurnOffXmlValidation.py</a>" sample script to
                turn off validation when reading XML (panel) files</li>
            <li>Add two new script-based tools 
                <a href="http://jmri.org/jython/CombineTurnouts.py">CombineTurnouts</a> and 
                <a href="http://jmri.org/jython/CombineSensors.py">CombineSensors</a> 
                for mapping a single Turnout or Sensor onto multiple pieces of hardware. 
                Includes test routines which can serve as further examples.
                </li>
        </ul>

    <h3>Signals</h3>
        <ul>
            <li>There are new 
                <a href="http://jmri.org/jython/SignalFollower.py">SignalFollower.py</a> (for SignalHeads) and
                <a href="http://jmri.org/jython/SignalMastFollower.py">SignalMastFollower.py</a> (for SignalMasts)
                that lets you have one mast or head follow another's state.  This can be useful,
                for example, if you have a repeated signal on the fascia.             
            </li>
        </ul>

        <h4>Signal Systems</h4>
            <ul>
                <li>Greg McCartney provided new definitions for the
                    <a href="http://jmri.org/xml/signals/SOU-1981/index.shtml">Southern 1981 system</a></li>
            </ul>

        <h4>Signal Heads</h4>
            <ul>
                <li>In the Signal Heads table, pick any of the valid Appearances from a combobox instead having to follow a fixed order.<br>
                This change aligns the interface with the Signal Mast table. For developers, this interface element is reusable.</li>
                <li>The panes to add or edit a Signal Head were updated, with more tooltips and (translatable) warning dialogs.<br>
                Now uses JSpinners to set IDs for a DCC Head.</li>
                <li>The function of Turnouts in use as outputs for a Signal Head are now stored as localized Comments in the Turnout table.<br>
                Existing comments are retained until they are manually deleted, after which a change in outputs will be stored.</li>
                <li>After adding a new Head, the Name fields on the pane are emptied to help prevent using the same name again and receiving an error.</li>
                <li>Adding a Bachmann Acela Signal Head now requires an active system connection to guarantee the proper ID.</li>
                <li>The intention of the Home/Distant choice for a MERG head is explained in a clearer label and the items to choose from are adaptable per language.</li>
                <li>We've added a new 
                    <a href="http://jmri.org/jython/FollowSE8c.py">jython/FollowSE8c.py sample script</a>,
                    along with a 
                    <a href="http://jmri.org/jython/test/FollowSE8cTest.py">test case</a>
                    that shows you how it works. You can work with this if you want your
                    SE8c Signal Heads
                    listening to the layout and (attempting to) follow messages that are
                    happening there, so that if something other than JMRI changed 
                    the SE8c-shown color, the JMRI icon(s) would follow.  
                    </li>
            </ul>

        <h4>Signal Masts</h4>
            <ul>
                <li>Output Matrix Signal Mastst are stored as a separate class in your configuration. Existing masts are automatically updated once resaved.</li>
                <li>Per user request, the Output Matrix Signal Mast connection can be configured using up to 6 outputs instead of 5.</li>
                <li>Editing of Signal Mast Logic from the Signal Mast Table has been improved. The Signal Mast Pairs panel refreshes to immediately show newly created source-destination pairs. The lists to set up Control items and their Conditions now look and operate like real comboBoxes.</li>
            </ul>
            
    	<h4>Signal Groups</h4>
            <ul>
                <li>Configuring <a href="http://jmri.sourceforge.net/help/en/package/jmri/jmrit/beantable/SignalGroupAddEdit.shtml">Signal Groups</a> from the Signal Group Table has been fixed and a German translation added. The underlying code and xml were cleaned for readability and internationalization.</li>
            </ul>

	    <h4>NX Entry/Exit Logic</h4>
            <ul>
                <li>Andy Brown and Peter Ulvestad fixed a problem with storing multiple NX pairs</li>
            </ul>

	    <h4>USS CTC Logic</h4>
            <ul>
                <li>Added a new package of 
                <a href="http://jmri.org/help/en/html/tools/uss/index.shtml">tools for implementing US&amp;S CTC panels</a>.
                </li>
            </ul>

   <h3>Warrants</h3>
        <ul>
            <li>The look ahead problems of a Warrant are fixed. Paths of routes are 
                    maintained automatically. Trains resume running their scripts automatically
                    when signals or rouge occupations are cleared ahead of them.
            </li>
            <li>Warrants normally grant rights of track access solely to only one train.
                It now is possible to allow several warrants to share portions of their route.
                A 'Clearance to Share Route' checkbox has been added for this.
            </li>		
            <li>The NXWarrant window now is populated with defaults configured in Preferences.
                Users depending on the default 'throttle speed factor' may notice
                a difference in train speeds when trains respond to track conditions. 
                Use of speed profiles and input of distances of block paths enables more 
                precise calculation of train movements. 
            </li>
                <li>A 'Fast Acting' warrant has been added that makes instant speed changes
                    upon entering an approach block.  This warrant type also shares routes.
            </li>
            <li>The Create/Edit Warrants help file was updated to explain the "Share Route" and "Don't Ramp" options.</li>
            <li>Implementation of these options was completed.</li>
            <li>A bug preventing restarts of cleared occupancy was fixed.</li>

            <li>Warrants uses the RosterSpeedProfile whenever possible to get track speeds, distance traveled and time of travel.
            If a speed profile was created using measurements from one direction only, data requested for the other direction 
            is unreliable. This affects NXWarrants ability to generate a throttle command script.  If multiple error messages are
            posted to the console from the RosterSpeedProfile it may be preferable to delete the Speed Profile for that locomotive. 
            When no speed profile is available, warrants uses the 'throttle factor' to determine track speeds, distance traveled etc.</li>
        </ul>

   <h3>Web Access</h3>
        <ul>
            <li>New feature to upload new or updated Roster Entry xml files and images. At top of existing Roster page.</li>
            <li>Operations, Trains web page now auto-updates as trains are added, deleted or changed.</li>
        </ul>

   <h3>Internationalization</h3>
        <ul>
            <li>Expanded translations in
                <ul>
                <li>Catalan (Joan de Castro)</li>
                <li>Danish (Sonnys Hansen)</li>
                <li>German and Dutch (Egbert Broerse).</li>
                </ul>
            <li>Starting JMRI after changing Locale (language) in Preferences &gt; Display gives a more informative warning in the Console.</li>
            <li>Print outs of roster reports from DecoderPro were updated by Egbert Broerse to use translatable headings (don't translate the word 'CV')</li>
        </ul>
        
   <h3>Virtual Sound Decoder</h3>
        <ul>
            <li>VSDecoder Manager can now be auto-launched at startup through preferences.</li>
            <li>New location for sound sets was added at <a href="https://github.com/JMRI/vsdecoder">https://github.com/JMRI/vsdecoder</a>.</li>
            <li>New steam engine sound set Class64.vsd was added (provided by Klaus Killinger).</li>
        </ul>

    <h3>Miscellaneous</h3>
        <ul>
            <li>For those connections which have the ability to monitor the bus traffic, the
                feature to save the monitor data to a file has been improved.  If the tool is 
                unable to access the log file, a dialog box will appear to inform the user of 
                the problem.  Monitor log files will default to be placed in the configuration 
                profile directory, where in some cases, previous versions of JMRI could attempt 
                to place the log file in the program directory.  As before, the user may select
                a directory other than the configuration profile directory for storing the
                log file.  This improvement affects the monitoring tools for many connection 
                types.</li>
            <li>JMRI applications will not load a panel file that fails XML validation; an error will be
                shown that explains the error, allowing it to be fixed using an editor.
                (<a href="https://github.com/JMRI/JMRI/pull/2719">#2719</a>)</li>
	        <li>JMRI no longer supports the portable paths <code>resource:</code> or <code>file:</code> that
                were deprecated in JMRI 2.13. When loading a panel, an error message will be displayed
                if the panel contains a path that starts with <code>resource:</code> and the panel will
                not load until changed using an external editor. Paths starting with <code>file:</code>
                cannot be automatically flagged because JMRI allows file: URLs.
                (<a href="https://github.com/JMRI/JMRI/pull/2719">#2719</a>)</li>
    	    <li>If a connection fails to initialize correctly, startup actions will not be run. An error
                message will be displayed reading "Unable to run startup actions due to earlier failures."
                (<a href="https://github.com/JMRI/JMRI/pull/2799">#2799</a>)</li>
            <li>The WiThrottle window can now be resized so that when several client devices are
                connected, it's possible to adjust the list to see all of them without needing to scroll
                (<a href="https://github.com/JMRI/JMRI/pull/2857">#2857</a>)</li>
            <li>Added some additional tools for decoding and displaying NMRA DCC packets to the
                NmraPacket class.</li>
            <li>Added 
                <a href="http://jmri.org/help/en/html/doc/Technical/XmlPersistance.shtml">support for reading older panel files</a> 
                that use deprecated conversion classes</li>
            <li>Behind the scenes, a lot of error handling and code documentation was added.</li>
            <li>Klaus Killinger <a href="https://github.com/JMRI/JMRI/pull/3019">improved the sound support</a>.
            <li>User Names entered by the user are checked for spaces at the start and end before they are applied. 
                We expect this will prevent some hard to spot errors.</li>
            <li>The naming scheme for JMRI builds has changed slightly. Build metadata (the building user, build date/time,
                and git revision at time of build) are now deliniated using plus (+) signs instead of hyphens. The build
                date/time is now ISO 8601 parsable. (<a href="https://github.com/JMRI/JMRI/pull/3253">#3253</a>)</li>
            <li>The library used to identify connected systems on Windows has been updated. Although this should have no
                impact, scripts that accessed the Windows Registry using the WinRegistry should be updated to use Java Native
                Access. (<a href="https://github.com/JMRI/JMRI/pull/3353">#3353</a>)</li>
            <li>This version of JMRI (and all later) writes a slightly streamlined
                version of panel file contents.  
                Older files should still be readable by this version of JMRI, 
                but files written by this version may not be readable by versions
                before JMRI 4.7.4 if they contain definitions of Blocks or OBlocks.</li>
            <li>This version of JMRI uses a new library to access serial ports, including
                USB serial ports.  This is a major migration for JMRI, so 
                please let us know if you encounter any problems connecting to 
                your layout. See above for some steps you will have to take to 
                update settings in the preferences.
            <li>This version writes a slightly more verbose version of 
                panel files to (attempt to) have them readable all the
                way back to JMRI 4.2.  (JMRI 4.7.4 wrote files that
                could only be read by JMRI 4.7.4 and later)</li>
            <li>Improved the speed of loading panel files with lots of Sensors, Turnouts or Lights.</li>
            <li>Fixed some links in the help pages</li>
        </ul>

   <!--#include virtual="/Footer.shtml" -->
  </div><!-- closes #mainContent-->
  </div> <!-- closes #mBody-->
 <script src="/js/main.js"></script>
</body>
</html>
