<!DOCTYPE html>
<html lang="en">
<head>
<!-- Copyright ($Author: dat7719 $) 2009, 2010 -->
<!-- $Id: Comp_Speed_Talble.shtml 18193 2011-08-16 23:19:17Z dat7719 $ -->
<title>Comprehensive Programmer - Speed Control Pane</title>

    <!--#include virtual="/Style.shtml" -->
</head>

<body>
<!--#include virtual="/Header.shtml" -->

<!--#include virtual="Sidebar.shtml" -->
<div id="mainContent">

<a name="Top"></a>
<h1>DecoderPro&reg; Comprehensive Programmer</h1>
<h1>The Speed Table Pane</h1>

<div align="right">
<p><a href="Comp_Speed.shtml">Previous | </a>
  <a href="Comp_FMap.shtml">Next</a>
<p><a href="index.shtml#Advanced Programmer">Back to Index</a>
</div>

<hr>
<p>The <strong>Speed Table</strong> allows you to fine-tune the throttle response of your  locomotive. You might opt to match all of your locomotives so they run at the  same speed for the same throttle setting, or you might want to set the table up  so that your locomotive runs at the actual scale speed indicated by the  throttle. Or maybe you have someone in your operating group that likes to  switch the yard at Mach 2.5, and you want to slow them down a bit. There are a  lot of ways to use this feature. (This feature may vary by manufacturer and  decoder series) 
<p> You  now have the option of using <strong>Speed Table </strong>(this pane) which if selected  and written to the decoder will replace the <a href="Comp_Speed.shtml"><strong>Basic Speed Control</strong></a> to set your locomotive's  speed control mode. Which ever one you select last and write to your decoder  will be the method used for speed control. To select the use of speed tables, the <strong>Use Table</strong> radio button is selected at the top of the pane, and in the case of  Soundtraxx and QSI decoders, the drop down selection box must be used. See the discussion at the end of this section  for an example.
<p>The default speed table for most decoders is a straight line from zero on the left to maximum on the right.  The <b>
    <input type="button" name="button" id="button" value="Force Straight">
</b>  below the table duplicates that in the table..
<h1><img src="images/Speed_Table_Straight.png" width="922" height="797" alt="straight speed table"></h1>
<p align="center"><strong>Straight Line Speed Curve</strong></p>
<p>As you can see, you have both  numbers and sliders to work with. Changing either a number or slider will make the other change to  match it. If you are CV  inquisitive, you can use the tool tip to advantage. By hovering over any of the sliders, the tool  tip will reveal the CV  to which you are pointing .
<p>The <strong>
    <input type="button" name="button2" id="button2" value="Match ends">
</strong>  will  also result in a straight-line graph, but you can offset the beginning and end  by any amount you wish. The first and last steps are used to set to minimum and maximum values for the straight line. The  function will then draw a straight line between those two end points. Below is  an example of the result.

<h1><img src="images/Speed_Table_Match.png" width="914" height="315" alt="speed table match"></h1>
<p>Now if you've used  DecoderPro in the past, you're probably wondering what those little boxes at  the bottom of each slider are used for.  Well, they're difficult to explain, but easy to use. They basically allow you to set a slider to  control every slider in columns to its left as well as to its right. If you click two of the boxes and then move  one of those sliders you'll see that they are linked to the sliders between  them. Points to the right never are  higher than the slider being moved, and the points to the left are never lower  that the slider being moved. This &ldquo;always increasing left to right&rdquo; is normally  the way the sliders worked, but now the ones in between the check are linked. If  the slider is lowered and then raised the straight line is drawn between the  column checked to the right and the column that the slider is controlling. It's difficult to describe, but try it and  you'll see.
<p><br>
  What could that possibly  be used for, you ask? Well, many  decoders (like the Soundtraxx Tsunami in this example) do not support V-start,  V-mid and V-max. So, if you are trying  to use the simplified method of speed matching locos, these decoders won't  support it. Well now you have a  way. Check the left-hand, right-hand and  middle columns. Set the left-hand column  to V-start, the right-hand to V-max and then slide the middle slider up and  down until you get the V-mid that you want.  Now all you have to do is write this speed table to the loco and you've  accomplished what you wanted to do, but the decoder manufacturer didn't provide  for.
<h1><img src="images/Speed_Table_SpeedMatch.png" width="922" height="527" alt="Speed Match"></h1>
<p align="center"><strong>Substitute for Quick Speed Matching</strong></p>
<p align="left">If you want to set up a loco for switching you can set a start speed  that is the same for the first portion of the throttle revolution and  lower the top speed for use in the yard as shown below:</p>
<h1><img src="images/Speed_Table_Constant.png" alt="Speed Table - Constant Ratio Curve" border=5 height=270 width=800></h1>
<p align="center"><strong>Switcher Speed Curve</strong></p>
<p>if you don't desire a strait-line response curve there are other options available. The Constant ratio curve gives you a response that increases slowly in the low end and rapidly at high throttle. This function will also draw the curve between preset end points.</p>
<h1><img src="images/Speed_Table_Switcher.png" width="807" height="335" alt="switcher"></h1>
<p align="center"><strong>Constant Ratio Curve</strong></p>
<p>
  The <b>Log curve</b> reverses this response, giving you a logarithmic
  response curve with high acceleration at low speeds, but topping out
  quickly. It will also draw the curve between preset end points.
<h1><img src="images/Speed_Table_Log.png" width="851" height="345" alt="log"></h1>

<p align="center"><strong>Logarithmic Speed Curve</strong>
<p align="center">
<p>The
  <input type="button" name="button3" id="button3" value="Shift left">
  moves the entire speed table to the left  one space with each click on the button. The example below shows a linear 0-255 speed table that has been <b>Shifted left</b>  three times. 
  
<h1><img src="images/Speed_Table_ShiftLeft.png" width="840" height="369" alt="shift left"></h1>
<p align="center"><strong>Curve Shifted Left</strong></p>
<p>The 
  <input type="button" name="button4" id="button4" value="Shft right">
move the entire speed table to the right one space with each click on the button. The example below shows a linear 0-255 speed table that has been <b>Shifted right</b> three times. </p>
<h1><img src="images/Speed_Table_ShiftRight.png" width="824" height="331" alt="shift right"></h1>
<p align="center"><strong>Curve Shifted Right</strong></p>
<p>Of course, you can enter the numbers individually or move  the sliders one at a time to 
  create your own fully customized speed table. To aid you with  setting the individual  values, the slider value is shown at the top of each slider. Also, by hovering the mouse at a slider  column the number of the CV being entered will be revealed.
<p>
One very important thing to remember: <span class="ACCENT"><strong>No matter
how pretty your speed table looks, it has absolutely no effect on the locomotive
unless you write it to the decoder!</strong></span></p>
<p>And this point is especially pertinent with the QSI and  Soundtraxx Tsunami decoders, because they have a separate drop down box like  the QSI box below. They require that you  select the <strong>user defined</strong> speed table  entry in this box or your table will not be written to the decoder. Interestingly, Tsunami puts the selection at  the bottom of the list making it very easy to miss. </p>
<p align="center"><img src="images/Speed_Table_QSI.png" width="799" height="308" alt="QSI speed table"><br>
<hr>
<div align="right">
<p><a href="Comp_FMap.shtml"></a>
  <a href="Comp_Speed.shtml">Previous | </a> <a href="Comp_FMap.shtml">Next</a>
<p><a href="index.shtml#Advanced Programmer">Back to Index</a>
</div>

<!--#include virtual="/Footer.shtml" -->
</div> <!-- closes #container, started in sidebar -->
<script src="/js/main.js"></script>
</body>
</html>
