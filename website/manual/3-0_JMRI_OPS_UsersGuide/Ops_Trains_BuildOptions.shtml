<!DOCTYPE html>
<html lang="en">
<head>
<!-- Copyright ($Author: dat7719 $) 2009 -->
<!-- $Id: Ops_SelectTrainsRoutes.shtml 18257 2011-08-22 08:50:56Z dat7719 $ -->
<title>Comprehensive Programmer - Advanced Features Pane</title>

    <!--#include virtual="/Style.shtml" -->
</head>

<body>
<!--#include virtual="/Header.shtml" -->

<!--#include virtual="Sidebar.shtml" -->
<div id="mainContent">

<a name="Top"></a>
<h1>Using JMRI&reg; to Operate Trains</h1>
<h1>Build Options for Trains</h1>

<div align=right>
<p><a href="Ops_Trains.shtml">Back</a><a href="#"></a></p>
<p><a href="index.shtml#Operations">Back to Index</a></p>
</div>

<hr>
<p>The <strong>Options</strong> window is opened from the <strong>Trains</strong> window <strong>Tools</strong> menu.</p>
<table width="90%" border="0" cellspacing="1" cellpadding="2">
  <tr>
    <td width="57%" valign="top"><img src="images/Ops_Trains_BuildOptions.png" width="477" height="657" alt="options"></td>
    <td width="43%" valign="top"><p>Standard JMRI&reg; <strong>Window</strong> and <strong>Help</strong> menus</p>
    <p><strong>Build Options</strong><br>
      <input name="radio" type="radio" id="radio" value="radio" checked>
      <strong>Normal 
      <input type="radio" name="radio2" id="radio2" value="radio2">
      Agressive</strong> <br>
      Normal builds are recommended when you first begin the program. Normal builds guarantee that when a car is delivered (set out) by a train that there will be track space available for the car.<br>
      <br>
      Agressive builds makes the car's track space available as soon a a car is scheduled for pick up.<br>
      <br>
Note that once you've built a train, the build option can not be changed until all trains are terminated or reset.</p>
    <p><strong>Switcher Service</strong></p>
    <p>Next set of options control local car movements. Normally, it is beter not to allow a car to move from one spur directly to another spur in the same location.</p>
    <p><strong>Staging</strong></p>
    <p>
      <input name="checkbox2" type="checkbox" id="checkbox2" checked>
      <strong>Enable Type, Road and Load Restrictions into Staging</strong><br>
      When selected, the program will only deliver a train to a staging track that has the same rolling stock, road, and load name restrictions.</p>
    <p>
      <input type="checkbox" name="checkbox3" id="checkbox3">
      <strong>Prompt for Departure Track from Staging</strong><br>
    If selected the program ask you which track should depart from staging during the train build. Note that the program will only prompt you if there are two or more trains available in staging that meet the train's requirements.</p>
    <p>
      <input type="checkbox" name="checkbox5" id="checkbox5">
    Make departure track available after train is built</p>
    <p>
      <input type="checkbox" name="checkbox4" id="checkbox4">
      <strong>Prompt for Arrival Track into Staging</strong><br>
      If selected the program ask you which track should be used for arrival to staging during the train build. Note that the program will only prompt you if there are two or more trains available in staging that meet the train's requirements.</p>
    <p><strong>Car Routing Options<br>
    </strong><br>
      <input name="checkbox" type="checkbox" id="checkbox" checked>
      <strong>Enable Car Routing</strong><br>
      When enabled, the program will use multiple trains to deliver a car to its final destination. It is recommended that you leave this option enabled. When enabled , you can use <strong><a href="Ops_schedule.shtml">Schedule</a></strong> to deliver a car to a specific location.</p>
<p><strong>Logging Options<br>
</strong><br>
      You can have the progrm log your locomotive, car, or train movement to a file by selecting the appropriate check boxes. The program creates a new directory &quot;logger&quot; in the operations directory. For each day's sessioon the program will create a new file (.csv) using the day's date.</p>
    <p> <strong>Options</strong><br>
      Allow you to create your own custom manifest using .csv file. Import into a program like Excel to create a manifest to your liking.</p>
    <p>
      <input type="button" name="button" id="button" value="Save"> 
      settings to disk to preserve them.
      <br>
    </p></td>
  </tr>
  <tr>
    <td valign="top">&nbsp;</td>
    <td valign="top">&nbsp;</td>
  </tr>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>

<hr>

<div align=right>
<p><a href="Ops_Trains.shtml">Back</a></p>
<p><a href="index.shtml#Operations">Back to Index</a></p>
</div>

<!--#include virtual="/Footer.shtml" -->
</div> <!-- closes #container, started in sidebar -->
<script src="/js/main.js"></script>
</body>
</html>
