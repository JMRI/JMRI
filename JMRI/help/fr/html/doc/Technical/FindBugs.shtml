<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- Updated by  Herv&#233; BLOREC <bzh56420@yahoo.fr> on 2016-07-10 -->
<html lang="fr">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: Analyse statique avec SpotBugs</title>
  <meta name="author" content="Bob Jacobsen">
  <meta name="keywords" content="JMRI technical code">
  <!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
        <h1>JMRI: Analyse statique avec SpotBugs</h1>SpotBugs est un
        outil qui peut examiner le code pour trouver
      d'&eacute;ventuels probl&egrave;mes. Il fait un "analyse
      statique", en regardant &agrave; travers le code pour trouver
      certaines "mauvaises id&eacute;es connues ": Les choses qui
      sont susceptibles de causer des probl&egrave;mes
      occasionnels/intermittents, mauvaise performance, etc Parce
      que ces genre de probl&egrave;mes sont difficile &agrave;
      trouver avec les tests, les trouver par l'inspection est
      souvent la seule approche r&eacute;aliste. Disposer d'un
      outil qui peut faire les inspections automatiquement, afin
      qu'elles puissent se faire &agrave; chaque fois que quelque
      chose est chang&eacute;, prot&egrave;ge le code d'une
      d&eacute;gradation lente sans que quelqu'un le remarque
      jusqu'&agrave; ce qu'il soit trop tard.

      <p>Pour plus d'informations sur SpotBugs, voir <a href=
                                                        "https://spotbugs.github.io">la page d'accueil
              SpotBugs</a> .</p>

      <p>Nous ex&eacute;cutons sous forme d'une routine SpotBugs
          comme une partie de notre <a href=
      "ContinuousIntegration.shtml">processus continue
      d'int&eacute;gration</a>. Vous pouvez voir les
      r&eacute;sultats des plus r&eacute;centes constructions en
      ligne <a href=
      "https://jmri.ci.cloudbees.com/job/Development/job/FindBugs/lastBuild/">
      ici</a>.</p>

      <p>Si findBugs trouve une erreur positive, un bug qui n'est
      pas r&eacute;ellemnt un bug, vous pouvez l'&eacute;teindre
      avec une annotation tels que:</p>
      <pre style="font-family: monospace;">
@edu.umd.cs.findbugs.annotations.SuppressWarnings("FE_FLOATING_POINT_EQUALITY","OK pour comparer les flottantess, car m&eacute;me les plus infimes diff&eacute;rences 
devraient d&eacute;clencher les mises &agrave; jour")
</pre>Le second argument "justification" est optionnel, mais
hautement recommand&eacute;. Expliquer pourquoi vous avez
ajout&eacute; cette annotation pour supprimer un message aidera
Celui qui viendra apr&egrave;s vous et tentera de comprendre le
code. Il aidera &eacute;galement &agrave; vous assurer que vous
comprenez correctement la cause du rapport du bugg sous-jacent:
Parfois ce qui semble un faux positif ne l'est pas vraiment.

      <p>si vous avez besoin de mettre plus d'un type de message
      dans une annotation, utilisez la syntaxe en tableau:</p>
      <pre style="font-family: monospace;">
@edu.umd.cs.findbugs.annotations.SuppressWarnings("{type1},{type2}","Pourquoi les deux sont n&eacute;cessaire")
</pre>Les annotations de bug peuvent aider &agrave; mieux
comprendre votre code. Parfois, ils vont lui donner suffisamment de
compr&eacute;hension exemple: quand une variable peut &eacute;tre
nulle, que &ccedil;a ne va plus faire de fausses erreurs positives.
Pour plus d'information sur ceci, voir la <a href=
                                             "http://findbugs.sourceforge.net/manual/annotations.html">page des
    annotations SpotBugs</a> . Elle peut &eacute;tre utile pour marquer
les classes avec une des annotations suivantes de telle sorte que
SpotBugs fasse un bon travail de raisonnement &agrave; ce sujet:

      <ul>
        <li><a href=
               "http://findbugs.sourceforge.net/manual/annotations.html">edu.umd.cs.findbugs.annotations.CheckForNull</a>
            - une variable ou un param&egrave;tre peut avoir une valeur
        nulle ,donc toutes les utilisations devraient
        convenablement g&eacute;rer cela.</li>

        <li><a href=
               "http://findbugs.sourceforge.net/manual/annotations.html">edu.umd.cs.findbugs.annotations.CheckReturnValue</a>
            - cette m&eacute;thode n'a aucun effet secondaire, il n'y a
        donc pas lieu de l'appeler sans v&eacute;rifier que c'est
        la valeur de retour</li>

        <li><a href=
        "http://jcip.net/annotations/doc/net/jcip/annotations/Immutable.html">
        net.jcip.annotations.Immutable</a> - Un objet de cette
        classe ne peut pas &eacute;tre modifi&eacute; apr&egrave;s
        sa cr&eacute;ation. Cela permet &agrave; la fois la une
        meilleure v&eacute;rification de la logique, et de
        simplifier &eacute;galement l'utilisation par vos
        coll&egrave;gues, il est donc bon de marquer les classes
        avec cette propri&eacute;t&eacute;.</li>

        <li><a href=
        "http://jcip.net/annotations/doc/net/jcip/annotations/NotThreadSafe.html">
        net.jcip.annotations.NotThreadSafe</a> - une classe qui
        n'est pas un lien de s&eacute;curit&eacute;,ne devrait donc
        pas &eacute;tre v&eacute;rifi&eacute;e pour les
        probl&egrave;mes de simultan&eacute;it&eacute;. Souvent
        utilis&eacute; pour les classes Swing , mais il faut noter
        que certains composants Swing (par exemple, les
        fen&eacute;tres moniteur, les classes avec les auditeurs)
        ne doivent pas accepter l'entr&eacute;e d'autres
        liens.</li>

        <li><a href=
        "http://jcip.net/annotations/doc/net/jcip/annotations/ThreadSafe.html">
        net.jcip.annotations.ThreadSafe</a> - Les classes qui ne
        doivent &eacute;tre utilisables pour de multiples liens.
        SpotBugs l'assumes g&eacute;n&eacute;ralement, mais il est
        bon de le mettre sur une classe qui est destin&eacute;e
        &agrave; &eacute;tre un lien de s&eacute;curit&eacute;
        comme un rappel pour les d&eacute;veloppeurs futurs.</li>
      </ul>Pour de plus ample informations au sujet de ces
      annotations, svp voir la <a href=
      "http://jcip.net/annotations/doc/index.html">page dans l'API
      Concurrency</a>.
    </div>

    <p>Simon White a ajout&eacute; le support SpotBugs &agrave;
        notre Chaine de construction bas&eacute;e sur Ant pendant le
    d&eacute;veloppement du JMRI 2.5.5. Sa note sur ceci
    suit...</p>

    <p>Comme demande de fonctionnalit&eacute; par 1716873, j'ai
    ajout&eacute; une t&acirc;che Ant pour ex&eacute;cuter
    SpotBugs. Ceci va produire un rapport en HTML dans le
    m&eacute;me emplacement que le JMRI jar (c'est &agrave; dire le
    plus haut niveau du r&eacute;pertoire projet ). Notez la
    nouvelle t&acirc;che ex&eacute;cute en premier ant dist parce
    SpotBugs examine le dossier jmri.jar. Pour ex&eacute;cuter la
    t&acirc;che:</p>

    <ul>
        <li>Installer SpotBugs (pour moi j'ai mis cela dans
            C:/SpotBugs-3.1.1)</li>

        <li>soit ex&eacute;cuter
            <pre>
ant-Dspotbugs.home = C:/SpotBugs-1.3.8 spotbugs (rempla&ccedil;ant le param&egrave;tre de votre emplacement d'installation)
        </pre>

        <p>ou modifier le build.xml et modifier le param&egrave;tre
            comment&eacute; de spotbugs.home &agrave; votre emplacement
            d'installation, puis ex&eacute;cutez</p>
        <pre>
ant spotbugs
        </pre>
      </li>
    </ul>Sur mon ancienne machine il faut environ 20 minutes, mais
    votre dur&eacute;e peut varier.

    <p>Notez que dans le build.xml j'ai mis le r&eacute;glage
        maximal de m&eacute;moire-Xmx pour le t&acirc;che SpotBugs pour
        1024m. Si votre syst&egrave;me a plus de m&eacute;moire, la
    stimuler peut acc&eacute;l&eacute;rer les choses.</p>

    <p>L'ex&eacute;cution de ceci sur JMRI 2.5.4 donn&eacute; les
    r&eacute;sultats suivants:</p>

    <table border="1">
      <tr>
        <td>Avertissements Mauvaise pratique</td>

        <td>164</td>
      </tr>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

<div id="mainContent">

    <H1>JMRI: Analyse statique avec SpotBugs</H1>

SpotBugs est un outil qui peut examiner le code pour trouver d'&#233;ventuels
probl&#232;mes. Il fait un "analyse statique", en regardant &#224; travers le
code pour trouver certaines "mauvaises id&#233;es connues":
Les choses qui sont susceptibles de causer des probl&#232;mes occasionnels/intermittents,
mauvaise performance, etc
Parce que ces genre de probl&#232;mes sont difficile &#224; trouver avec les tests,
les trouver par l'inspection est souvent la seule approche r&#233;aliste.
Disposer d'un outil qui peut faire les inspections automatiquement,
afin qu'elles puissent se faire &#224; chaque fois que quelque chose est chang&#233;,
prot&#232;ge le code d'une d&#233;gradation lente sans que quelqu'un le
remarque jusqu'&#224; ce qu'il soit trop tard.
<P>
    Pour plus d'informations sur SpotBugs, voir
    <A href="https://spotbugs.github.io"> la page d'accueil SpotBugs  </A>.

<p>
    Nous ex&#233;cutons sous forme d'une routine SpotBugs comme une partie de notre
    <a href="ContinuousIntegration.shtml">processus continue d'int&#233;gration</a>.
Vous pouvez voir les r&#233;sultats des plus r&#233;centes constructions en ligne
<a href="https://jmri.ci.cloudbees.com/job/Development/job/FindBugs/lastBuild/">ici</a>.
 
<p>
    Si SpotBugs trouve une erreur positive, un bug qui n'est pas r&#233;ellemnt un
    bug, vous pouvez l'&#233;teindre avec une annotation 
tels que:
<pre><code>
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings("FE_FLOATING_POINT_EQUALITY","OK to compare floats, as even tiny differences should 
trigger update")
</code></pre>
Bien que Java lui-m&#234;me estime qu'il est facultatif, nous avons besoin du deuxi&#232;me argument "justification".
Expliquer pourquoi vous avez ajout&#233; cette annotation pour supprimer un message aidera
celui qui vient apr&#232;s vous et tente de comprendre le code.
Il aidera &#233;galement &#224; vous assurer que vous comprenez bien la cause du rapport de bogue sous-jacent: 
Parfois, ce qui semble un faux positif ne l'est vraiment pas.
Les Annotations sans une clause de justification
seront p&#233;riodiquement &#233;limin&#233;es.

<p>
Si vous avez besoin de mettre plus d'un type de message dans une annotation, utilisez la syntaxe de tableau:
<pre><code>
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings("{type1},{type2}","why both are needed")
</code></pre>

<p>
Il y a ausi des annotations Java et FingBugs qui peuvent vous aider 
&#224; mieux comprendre votre code. Parfois, ils vont lui donner suffisamment de compr&#233;hension, 
par exemple: quand une variable peut &#234;tre nulle, que &#231;a ne va plus faire des erreurs de faux positifs.
Pour en savoir plus, voir les
<a href="https://docs.oracle.com/javase/tutorial/java/annotations/">Annotations Java </a> et les
<a href="http://findbugs.sourceforge.net/manual/annotations.html">pages d'annotations SpotBugs </a>.

<p>
Les bases d'annotations sont couverts dans un <a href="https://docs.oracle.com/javase/tutorial/java/annotations/">Tutoriel annotation 
Java</a>.

<p>
Il peut &#234;tre utile de marquer le code avec une des annotaions suivantes
de telle sorte que SpotBugs fasse un bon travail de raisonnement &#224; ce sujet:
<ul>
    <li><a href="http://findbugs.sourceforge.net/manual/annotations.html"><code>javax.annotation.Nonnull</code></a> -
        L'element annot&#233; ne doit pas &#234;tre nul.
	Les champs annot&#233;s ne doivent pas &#234;tre nuls apr&#232;s la construction termin&#233;e.
	Les m&#233;thodes annot&#233;es doivent avoir des valeurs non-nulles retourn&#233;es
	Utiliser javax.annotation.ParametersAreNonnullByDefault pour d&#233;finir pour toute une classe.
	Pr&#233;f&#233;rer l'usage de <code>CheckForNull</code>.

    <li><a href="http://findbugs.sourceforge.net/manual/annotations.html"><code>javax.annotation.CheckForNull</code></a> -
        La variable, param&#232;tre ou valeur annot&#233;e peut avoir une valeur nulle, de sorte que tous les utilisateurs devraient les traiter 
	convenablement. S'il vous pla&#238;t mettre cela dans des d&#233;finitions de m&#233;thode pour signaler que la valeur de retourn&#233;e doit &#234;tre 
	v&#233;rifi&#233; pour &#234;tre nulle
<li><a href="http://findbugs.sourceforge.net/manual/annotations.html"><code>edu.umd.cs.findbugs.annotations.OverrideMustInvoke
        </code></a> Utilis&#233; pour annoter une m&#233;thode qui, si surcharg&#233;e, doit (ou devrait) &#234;tre super invoqu&#233;e dans le m&#233;thode red&#233;finie.
	Des exemples de tels proc&#233;d&#233;s comprennent la finalisation () et clone ().
	L'argument de la m&#233;thode indique quand la super invocation doit se produire: &#224; tout moment ( ANYTIME ), au d&#233;but de la m&#233;thode 
	d&#233;rogatoire ( FIRST ), ou &#224; la fin de la m&#233;thode d&#233;rogatoire ( LAST ), par d&#233;faut &#224; tout moment, 
	par exemple <Code> @OverrideMustInvoke ( valeur = ANYTIME ) </code>

<li><a href="http://findbugs.sourceforge.net/manual/annotations.html"><code>javax.annotation.CheckReturnValue</code></a> -
    annoter une m&#233;thode pour dire QUE la m&#233;thode n'a pas d'effets secondaires, donc il n'y a aucun point en appelant sans v&#233;rifier sa 
	valeur de retour

<li><a href="http://jcip.net/annotations/doc/net/jcip/annotations/Immutable.html"><code>net.jcip.annotations.Immutable</code></a> -
	Un objet de cettte classe ne peut pas &#234;tre chang&#233; apr&#232;s avoir &#233;t&#233; cr&#233;&#233;. Ceci permet &#224; la fois une meilleure v&#233;rification 
	de la logique et aussi simplifie l'usage pour vos coll&#232;gues, aussi il est bon de cr&#233;er des classes qui ont cette 
	propri&#233;t&#233; et de les annoter. 

<li><a href="http://jcip.net/annotations/doc/net/jcip/annotations/ThreadSafe.html"><code>net.jcip.annotations.ThreadSafe</code></a> -
	classes qui doivent &#234;tre utilisables pour plusieurs threads.Fidbugs l'assume g&#233;n&#233;ralement,
	mais il es bon de de le mettre dans une classe qui est pr&#233;vue pour &#234;tre thread-safe comme un rappel 
	pour de futures d&#233;veloppeurs. 

</ul>
Pour avoir plus d'information &#224; propos de ces annotations, SVP voir la
<a href="http://jcip.net/annotations/doc/index.html">Page dans l'API Concurrency</a>.

<p>
Nous n'utilisons pas ces annotations:
<ul>
    <li><a href="http://findbugs.sourceforge.net/manual/annotations.html"><code>javax.annotation.Nullable</code></a> -
        cela ne signifie pas vraiment ce que les gens pensent qu'il fait, comme SpotBugs ne v&#233;rifie pas vraiment
    pas quelque chose quand il est utilis&#233;. De la documentation:
        SpotBugs traitera les articles annot&#233;s comme s'ils n'avaient aucune annotation.
        Dans la pratique, cette annotation est utile que pour des raisons imp&#233;rieuses d'une annotation globale non nulle.
	Utilisez javax.annotation.ParametersAreNullableByDefault pour le d&#233;finir comme une classe enti&#232;re.
	Pref&#233;rez l'usage de <code>CheckForNull</code>.
</ul>

<h3><H3>Suppression Avertissements</h3>

    Nous avons d&#233;sactiv&#233; les SpotBugs de routine de contr&#244;le de certains types de conditions:
    <dl>
        <dt><a href="http://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#ri-class-implements-same-interface-as-superclass-ri-redundant-interfaces">RI_REDUNDANT_INTERFACES</a>
        <dd>Ce drapeaux au cas o&#249; une classe impl&#233;mente une interface, et aussi h&#233;rite d'une 
	superclasse qui impl&#233;mente d&#233;j&#224; cette interface. Ceci est redondant et inutile, mais il ne peut pas provoquer de dysfonctionnement 
	du code.Nous avons assez d'entre eux que nousavons &#233;teint l'avertissement, et nous y reviendrons plus tard.
        <dt><a href="http://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#sic-could-be-refactored-into-a-named-static-inner-class-sic-inner-should-be-static-anon">SIC_INNER_SHOULD_BE_STATIC_ANON
                , 
                <dt><a href="http://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#sic-could-be-refactored-into-a-static-inner-class-sic-inner-should-be-static-needs-this">
                        SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS</a>
	<dd>Static oppos&#233; &#224; non-static,
	les classes internes ( classes d&#233;finies au c&#339;ur d'autres classes ) prennent moins de place
	parce qu'ils ne maintiennent pas de r&#233;f&#233;rences &#224; l'objet contenant. Cet avertissement sugg&#232;re de d&#233;placer 
	une classe anonyme interne (d&#233;finie dans la ligne du code) &#224; une classe r&#233;guli&#232;re (non d&#233;finie en ligne) ainsi elles peuvent
	&#234;tre statiques. Bien que ce soit probablement une petite am&#233;lioration, c'est un peu de travail pour une petite am&#233;lioration.
	Nous avons assez de ceux o&#249; nous avons coup&#233; les avertissements, et et nous y reviendront plus tard.
        <dt><a href="http://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#sic-could-be-refactored-into-a-named-static-inner-class-sic-inner-should-be-static-anon">SIC_INNER_SHOULD_BE_STATIC_ANON</a>,
            <a href="http://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#sic-could-be-refactored-into-a-static-inner-class-sic-inner-should-be-static-needs-this">
                SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS</a>
	<dd>Statique, comme oppos&#233; &#224; non-statique,
	Les inner classes ( classes d&#233;finies au sein d'autres classes ) prennent peu de place
	parce qu'lles ne permettent pas de maintenir les r&#233;f&#233;rences &#224; l'objet contenant. Cet avertissement sugg&#232;re de d&#233;placer une classe 
	interne anonyme ( d&#233;finie dans la ligne du code ) vers une classe r&#233;guli&#232;re ( non d&#233;fini pas en ligne ) ainsi elle peut 
	&#234;tre rendue statique.Bien que ce soit probablement une petite am&#233;lioration, c'est un peu de travail pour une petite am&#233;lioration. 
	Nous en avons assez aussi nous avons eteint l'avertissement, et il reviendra un peu plus tard.
        <dt><a href="http://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#pzla-consider-returning-a-zero-length-array-rather-than-null-pzla-prefer-zero-length-arrays">PZLA_PREFER_ZERO_LENGTH_ARRAYS</a>
        <dd>Que doit faire une m&#233;thode qui retourne un tableau de valeurs quand il n'y en a pas?
	Retourner "Nulle", oppos&#233; &#224; un tableau vides, exige tout le code d'appel pour traiter un cas particulier.
	Dans beaucoup de cas, retourner un tableau vide rend le code plus simple. Mais pour du code existant, la simplification est 
	marginale. Comme cela est un probl&#232;me de conception, mais il surgit souvent nous avons supprim&#233; ceci 
	pour nous focaliser maintenant sur des probl&#232;mes plus presssants
<dt>Code Malveillant
	<dd>C'est une classe d'avertissement centr&#233;e autour d'une id&#233;e que les donn&#233;es et les m&#233;thodes de codes  ne doivent pas &#234;tre trop 
	visibles sp&#233;cialement en statique. Ceci est vrai, mais JMRI n'est pas une biblioth&#232;que tremp&#233;e qui est publi&#233;e dans un monde de 	
	gens qui essaient de le briser, aussi ces changements ne sont pas une grande priorit&#233;.
<dt>Nm<dd>La convention est que les noms de cette clase d&#233;marre avec une lettre capitale et les noms de proc&#233;d&#233; ( donn&#233; et code ) avec 
	une lettre minuscule. 
<dt>Se,SvVI<dd>Cette une grande classe d'averissementss associ&#233;es avec la s&#233;rialisation Java. JMRI 
	n'utilise pas la s&#233;rialisation et il est peu probable qu'il le  fasse &#224; l'avenir, de sorte que nous supprimons ces derniers pour 
	&#233;lever la qualit&#233; moyenne des avertissements &#233;mis.
</dl>	

<h3>Arri&#232;re Plan</h3>

<p>
Simon White a ajout&#233; le support FindBugs &#224; notre Chaine de construction bas&#233;e sur Ant pendant le d&#233;veloppement du 
JMRI 2.5.5. Sa note sur ceci suit...

<p>
    Comme demande de fonctionnalit&#233; par 1716873, j'ai ajout&#233; une t&#226;che Ant pour ex&#233;cuter SpotBugs.
    Ceci va produire un rapport en HTML dans le m&#233;me emplacement que le  JMRI jar 
( c'est &#224; dire le plus haut niveau du r&#233;pertoire projet ). Notez  la nouvelle t&#226;che ex&#233;cute en premier ant dist 
parce SpotBugs examine le dossier jmri.jar.

Pour ex&#233;cuter la t&#226;che:
<ul>
    <li> Installer SpotBugs ( pour moi j'ai mis cela dans C:/SpotBugs-3.1.1 )

    <li> soit ex&#233;cuter
 
</code><pre>
ant-Dspotbugs.home=C:/SpotBugs-3.1.1 spotbugs ( rempla&#233;ant le param&#232;tre de votre emplacement d'installation )
</pre> </code>

<p>
ou modifier le build.xml et modifier le param&#232;tre comment&#233;
de spotbugs.home &#224; votre emplacement d'installation, puis ex&#233;cutez

</code> <pre>
ant spotbugs
</pre> </code>
</ul>

Sur mon ancienne machine il faut environ 20 minutes, mais votre dur&#233;e peut varier.
<p>
Notez que dans le build.xml j'ai mis le r&#233;glage maximal de m&#233;moire-Xmx pour le
t&#226;che SpotBugs pour 1024m.
Si votre syst&#232;me a plus de m&#233;moire, la stimuler peut acc&#233;l&#233;rer les choses.

<p>
L'ex&#233;cution de ceci sur JMRI 2.5.4 donn&#233; les r&#233;sultats suivants:
<p>
<table border="1">
<tr> <td> Avertissements Mauvaise pratique</td><td>164</td></tr>
<tr> <td> Avertissements Correction<td><td>77</td></tr>
<tr> <td> Avertissements exp&#233;rimentaux</td><td>7</td></tr>
<tr> <td> Avertissements vuln&#233;rabilit&#233; code malveillant</td><td>221</td></tr>
<tr> <td> Avertissements multithread exactitude<td><td>90</td></tr>
<tr> <td> Avertissements Performance</td><td>459</td></tr>
<tr> <td> Avertissements Louche</td><td>304</td></tr>
<tr> <th> Total</th><th>1322</th></tr>

</table>
<p>Beaucoup de travail a &#233;t&#233; fait dans JMRI pendant le cycle de lib&#233;ration 2.12 pour
amener le compteur de bug &#224; z&#233;ro. Le <a
  href = "ContinuousIntegration.shtml"> serveur d'int&#233;gration continue a fait </a>
fonctionner SpotBugs deux fois par jour, ce qui permet aux d&#233;veloppeurs de voir les r&#233;sultats de
leur codage sans avoir &#224; ex&#233;cuter spotbugs eux-m&#233;mes.</p>

<p>Si vous regardez le code dans le d&#233;p&#244;t Subversion JMRI,
s'il vous pla&#238;t v&#233;rifier le serveur CI et assurez-vous que vos modifications ne vont pas
introduire de nouvelles erreurs.</p>



<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>
