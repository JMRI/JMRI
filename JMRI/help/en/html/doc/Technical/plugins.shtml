<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: Plug-in mechanisms</title>
  <meta name="author" content="Bob Jacobsen">
  <meta name="keywords" content=
  "JMRI technical code plugins extension plug-in">
  <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
  <!-- are an arbitrary design pattern used by the update.pl script to -->
  <!-- easily replace the common header/footer code for all the web pages -->
  <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
  <!-- or change them to reflect your alternative logo -->
  <!--#include virtual="/Style" -->
</head><!--#include virtual="/Header" -->

<body>
  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
      <h1>JMRI Code: Plug-in mechanisms</h1>

      <p>The original goal of the JMRI project was to produce a library upon
      which people could use to build their own applications. Although some
      people do that, more use the existing applications such as DecoderPro
      and PanelPro.<br>
      We want to make this more flexible by providing a way to
      extend those programs without having to rebuild them from scratch.
      </p>
      <p>There are three supported mechanisms that can be used to plug
        additional capabilities into JMRI:
      </p>
      <ul>
        <li><a href="#script">Script JMRI</a></li>
        <li><a href="#service">Implement a Service Provider</a></li>
        <li><a href="#jmriPlugin">Override jmri.JmriPlugin</a></li>
      </ul>

      <h2 id="script">Script JMRI</h2>

      <p><a href="../../tools/scripting">Scripting JMRI</a> is often the easiest
        way to extend JMRI, however there are limitations to that which are
        covered by the other mechanisms.
      </p>
      <p>The principal limitations to scripting JMRI are:
      </p>
      <ul>
        <li>scripts can only be run late in the application start process</li>
        <li>scripts cannot be used to define new connection types</li>
        <li>scripts cannot be used to add items to the preferences window</li>
      </ul>
      <p>The details of scripting are <a href="../../tools/scripting">covered
        elsewhere</a>.
      </p>
      <p>Examples of scripts that modify JMRI behavior are:</p>
      <ul>
        <li><a href="http://jmri.org/jython/AddButton.py">AddButton.py</a>
          sample script adds a script button to the main window.
        </li>
        <li><a href="http://jmri.org/jython/DisableOpsMode.py">DisableOpsMode.py</a>
          shows how how to modify the main window to remove the ops-mode
          programming button.
        </li>
        <li><a href="http://jmri.org/jython/ReporterFontControl.py">ReporterFontControl.py</a>
          sample script is an even more advanced example that changes
          the appearance of items on panel screens.
        </li>
      </ul>

      <h2 id="service">Implement a Service Provider</h2>

      <p>Java contains a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html">Service Loader</a>
        that allows classes implementing a specific API to provide a service to
        a Java application without requiring that the application have prior
        dependencies defined for that service.
      </p>
      <p>Services are provided by creating a JAR for that service and appending
        it to the JMRI classpath. See <a href="StartUpScripts.html">Startup Scripts</a>
        for details on appending a JAR to the classpath and the
        <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html">Service Loader</a>
        documentation concerning what needs to be in that JAR.
      </p>
      <p>JMRI uses Service Loaders to allow a JMRI application to be extended
        in specific ways:
      </p>
      <dl>
        <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrix/ConnectionTypeList.html">ConnectionTypeList</a></dt>
        <dd>Every manufacturer selectable when creating a configuration is
          defined by a ConnectionTypeList service. Implement this (and other
          required classes) to create a new system connection type. See
          <a href="NewSystem.shtml">Adding a New System</a> for details.
        </dd>
        <dt><a href="http://jmri.org/JavaDoc/doc/jmri/InstanceInitializer.html">InstanceInitializer</a></dt>
        <dd>Add new factories for creating default instances of objects
          managed by the <a href="http://jmri.org/JavaDoc/doc/jmri/InstanceManager.html">InstanceManager</a>.
        </dd>
        <dt><a href="http://jmri.org/JavaDoc/doc/jmri/spi/JsonServiceFactory.html">JsonServiceFactory</a></dt>
        <dd>The JMRI JSON services used in the JMRI web services can be extended
          using service implementations of this class. See the
          <a href="http://jmri.org/JavaDoc/doc/jmri/spi/JsonServiceFactory.html">JsonServiceFactory Javadocs</a> for details.
        </dd>
        <dt><a href="http://jmri.org/JavaDoc/doc/jmri/spi/PreferencesManager.html">PreferencesManager</a></dt>
        <dd>Add a new preferences manager to JMRI. Preferences managers store,
          retrieve, and validate preferences within a JMRI configuration
          profile. If a plugin needs to take action very early in the JMRI
          application startup sequence, it would need to provide a
          PreferencesManager service.
        </dd>
        <dt><a href="http://jmri.org/JavaDoc/doc/jmri/swing/PreferencesPanel.html">PreferencesPanel</a></dt>
        <dd>Additional preferences can be displayed in the preferences window by
          providing an implementation of this class.</dd>
        <dt><a href="http://jmri.org/JavaDoc/doc/apps/startup/StartupActionFactory.html">StartupActionFactory</a></dt>
        <dd>Startup Actions can be run at application start or attached to the
          application's main window as a button. Implementations of this factory
          class expose additional startup actions that can be selected by the
          user.
        </dd>
        <dt><a href="http://jmri.org/JavaDoc/doc/apps/startup/StartupModelFactory.html">StartupModelFactory</a></dt>
        <dd>Startup Models provide a mechanism to define optional startup
          actions that require user-provided parameters to be automatically run.
          Implementations of this factory class provide the hooks so that the
          Startup preferences can allow a user to set the parameters for a
          given action.
        </dd>
        <dt><a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html">HttpServlet</a>
            with <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/annotation/WebServlet.html">WebServlet</a> annotation</dt>
        <dd>Additional servlets in the web server can be added using these
            mechanisms. Note that the WebServlet annotation needs to provide a
            name and urlPatterns.</dd>
        <dt><a href="http://jmri.org/JavaDoc/doc/jmri/server/web/spi/WebServerConfiguration.html">WebServerConfiguration</a></dt>
        <dd>Additional file paths, redirections, explicitly blocked paths in the
            JMRI web server can be specified by providing a service that
            implements this.</dd>
      </dl>

      <h2 id="jmriPlugin">Override jmri.JmriPlugin</h2>

      <p>The first instance of
        <a href="http://jmri.org/JavaDoc/doc/apps/startup/StartupModelFactory.html">JmriPlugin</a>
        will have its
        <a href="http://jmri.org/JavaDoc/doc/jmri/JmriPlugin.html#start-javax.swing.JFrame-javax.swing.JMenuBar-">start</a>
        method called while the JMRI application launches. This makes it
        possible to allow the application's main window and main menu to be
        extended. Use of this mechanism is limiting because JmriPlugin can only
        be overridden once.
      </p>

      <!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
