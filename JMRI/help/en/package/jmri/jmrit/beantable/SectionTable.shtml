<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: Section Table Help</title>
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <meta name="author" content="Dave Duchamp">
  <meta name="keywords" content="JMRI help Section Table">
  <!--#include virtual="/Style" -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div class="nomenu" id="mBody">
    <div id="mainContent">
      <h1>The Section Table</h1>
      <p>Before we dive into the workings of the Section Table, lets
      provide some background on Sections and how they are used with
      <a href="../dispatcher/Dispatcher.shtml">Dispatcher</a>.

      <h2>Requirements for using Sections</h2>

      <p>Sections may be used with a Panel Editor Panel, with a
      <a href="../display/LayoutEditor.shtml">Layout Editor</a>
      Panel, with a CTC machine, or directly without
      any Panel provided. Sections are part of <a href=
      "../dispatcher/Dispatcher.shtml">Dispatcher</a>
      and build on JMRI's Blocks and Paths structure.
      So before attempting to create any Sections, you
      should have <a href="BlockTable.shtml">Blocks</a>
      and <a href="BlockTable.shtml#blockPaths">Paths</a>
      fully initialized for your layout.<br>
      (An easy way to automatically initialize your Blocks
      and Paths is to sketch out a
      <a href="../display/LayoutEditor.shtml">Layout Editor</a>
      Panel of your layout, with Blocks assigned to each Track
      Segment, Turnout, etc. By assigning Blocks &ndash;and Occupancy
      Sensors&ndash; to all track items in Layout Editor, the Paths can
      be created automatically for you by the software.)</p>

      <!-- image by Egbert Broerse @silverailscolo 2018 -->
      <img src="images/DispatcherSection.png" width="842" height="137">

      <p>Layout blocking should be carefully planned, to provide
      "<i>reasonable</i>" Sections&mdash;Sections that make sense for a
      dispatcher to allocate to a
      <a href="../dispatcher/NewTrain.shtml">Train</a>.<br>
      For right-handed or left-handed turnouts switching mainline track,
      for example, this usually means including the turnout in
      the same block as the track entering at the turnout throat,
      and providing
      separate blocks for continuing and diverging tracks. Some
      prefer to have a turnout in a separate block, and that works
      fine also. From a dispatching perspective, tracks of mainline
      turnouts that branch to industries do not need to be
      separately blocked, but blocking here is acceptable. A layout
      blocking scheme that works well for Signals, should work fine
      for Sections also.</p>

      <p>Signals are not required for using Sections, but Sections
      will work fine with signals installed. If
      <a href="../../../../html/tools/signaling/index.shtml#tools">signals</a>
      are installed, the direction sensors included in Sections provide
      an easy way to set up simple APB signaling (see below).</p>

      <h2>Using the Section Table</h2>

      <p>All the Sections that JMRI knows about can be viewed using
      the <b>Section Table</b>. Sections can either be created
      manually within the Section Table pane, or they can be
      created automatically if you also plan to use Signal Mast
      Logic <a href="#SignalMast">(see below)</a>.</p>

      <p>To open this tool, select <b>Sections</b> in the
      <b>Tables</b> submenu of the <b>Tools</b> menu of the main
      JMRI program window.</p>

      <h3>Section Table Columns</h3>
      You may change the order of the columns by dragging their titles,
      and sort the rows by clicking one of the sort triangles next to
      a column title. There are eight columns in the Section Table:

      <ul>
        <li><b>System Name</b> - The system name is assigned to the
        Section when it's created, and can't be changed.</li>

        <li><b>User Name</b> - If you're interested in having your
        Sections carry "human readable" names, you can click in the
        "User Name" column and change that information to whatever
        you want.</li>

        <li><b>State</b> - The state of a Section tells whether a
        section is "allocated" or "in use" by one or more trains.
        The state of a newly added section is always <b>FREE</b>.
        When a Section is allocated for travel in the direction
        from the "First Block" toward the "Last Block", the state
        is <b>FORWARD</b>. When allocated for travel in the
        opposite direction, the state is <b>REVERSE</b>.</li>

        <li><b>Comment</b> - This column is for your use to record
        any comment you may want to use to keep track of your
        Sections. It is for information only.</li>

        <li><a href="images/SectionDeleteWarning.png"><img src=
        "images/SectionDeleteWarning.png" height="57"
        width="279" align="right"></a>Click the <b>Delete</b>
        button in a specific row to
        delete the Section in that row. Remember to remove any
        Transits that are using this Section. Any Transit that uses a
        deleted Section will be broken! Review the warning dialog
        and use this button with caution!
        </li>

        <li><b>First Block</b> - This column displays the first
        block in the Section. Since a section is a group of one or
        more connected blocks, there is always an entry.</li>

        <li><b>Last Block</b> - This column shows the final block
        in the Section. Since a section may contain only one block,
        the Last Block may be the same as the First Block.</li>

        <li>Click the <b>Edit</b> button in a row to view or change
        entered information for a Section. System name cannot be
        changed. User name may be changed, blocks may be redefined,
        entry points may be reconfigured, etc. Only one Section may
        be edited at a time. A Section may not be edited while another one
        is being created.</li>
      </ul>

      <h3>Creating a new Section</h3>

      <p>To Create a new Section, click the
      "<a href="SectionAddEdit.shtml">Add...</a>" button at the bottom of the
      Section Table pane. A window will be brought up that will
      allow you to define the blocks included in the new Section,
      and if necessary, designate which entry points to the section
      result in travel in the FORWARD and REVERSE directions.</p>

      <p>Currently the user must manually select <b>FORWARD</b> or
      <b>REVERSE</b> for each Entry Point after all Blocks are
      added to a Section. The program will set some directions
      automatically, but others are left as <b>UNKNOWN</b>. An
      Entry Point should be set to FORWARD if a train entering the
      Section at that Entry Point would be traveling in the FORWARD
      direction. Otherwise it should be set to REVERSE. A possible
      future addition is to set directions of Entry Points
      automatically from the connectivity found in a Layout Editor
      panel.</p>

      <p>For Sections with more than one Block, travel from a
      lower-numbered block to a higher-numbered block is FORWARD
      travel. Stated a different way, moving from a block higher in
      the block list to a block lower in the list is FORWARD
      travel. Similarly moving from a higher-numbered block to a
      lower-numbered block is REVERSE travel. For Sections with
      only one block, it doesn't make any difference which
      direction through the Section is designated FORWARD, as long
      as Entry Point travel directions are consistent. That is:</p>

      <ul>
        <li>REVERSE and FORWARD directions of travel must be
        opposite.</li>

        <li>Entering at any FORWARD Entry Point must result in
        travel in the same direction as entering at all other
        FORWARD Entry Points.</li>

        <li>Entering at any REVERSE Entry Point must result in
        travel in the same direction as entering at all other
        REVERSE Entry Points.</li>
      </ul>

      <p><b>WARNING: If Entry Points are not consistent strange
      behavior may result when using the Section.</b></p>

      <a name="tools" id="tools"></a>
      <h3>Section Table Tools</h3>

      <p>The Section Table has a <b>Tools</b> menu to facilitate
      use of Sections. Normally these tools would be used after all
      Sections are defined. The menu items and their use are
      described below:</p>

      <ul>
        <li>
          <b>Validate All Sections...</b> - When this item is
          selected, each Section is tested for self consistency.
          Current tests include checking the connectivity between
          multiple blocks, checking that there are no missing Entry
          Points or extra Entry Points, and, if a Layout Editor
          panel is available, checking that Paths are correctly set
          up for the Blocks in the Sections. <b>This tool does not
          check if the FORWARD and REVERSE directions are correctly
          set for each Entry Point</b>, but that feature is a
          planned future addition. After testing is complete, a
          message is displayed giving the results of the testing.
          Detailed error messages, if any, are placed in the JMRI
          error log.
        </li>

        <li>
          <b>Set Direction Sensors in Logic...</b> (Not required
          when using SignalMast Logic) - When this item is
          selected, direction sensors defined for each Section are
          placed in the signal logic of appropriate signal
          heads--those signal heads internal to the Section or
          protecting entry to the Section. Direction sensors follow
          the allocation status of their Sections. When a Section
          is FREE (not allocated), both of its direction sensors
          are set ACTIVE. By placing these sensors in appropriate
          signal head logic, all signals internal to or protecting
          entry points to the Section are forced RED when the
          Section is FREE. When a Section is allocated for travel
          in the FORWARD direction, its forward direction sensor is
          set INACTIVE, allowing signal head logic to function
          normally for travel through the Section in the FORWARD
          direction, but keeping signals governing travel in the
          REVERSE direction set RED. Similarly, when the Section is
          allocated for travel in the REVERSE direction, the
          reverse direction sensor is set INACTIVE, and the forward
          direction sensor is set ACTIVE, allowing signals to clear
          travel in the REVERSE direction, but to block travel in
          the FORWARD direction. Setting the state of direction
          sensors is done automatically by software in <a href=
          "../dispatcher/Dispatcher.shtml">Dispatcher</a> that
          allocates Sections.

          <p>Note: Dispatcher can place direction sensors in SSL
          signal logic automatically when a train is activated.
          Dispatcher will place direction sensors if it is provided
          with a Layout Editor panel and allowed to use its
          connectivity (required for automatic running). This
          allows using direction-based signaling even if the panel
          is stored with these sensors removed from signal
          logic.</p>

          <p>This tool should only be used after all Sections have
          been defined and all signal head logic has been set up. A
          Layout Editor panel is required, because the software
          needs the panel's connectivity to figure out which signal
          heads need which direction sensor. If a direction sensor
          is already in the Simple Signal Logic (SSL) for a signal
          head, it is not duplicated. However, if an incorrect
          direction sensor is present in the SSL, it is not
          removed. (Use the tool described below to remove
          direction sensors.) After placing direction sensors is
          complete a message is displayed giving results. Detailed
          error messages, if any, are placed in the JMRI error log.
          When an error occurs, the most common reasons are 1)
          missing information (signal heads missing or signal logic
          not set up) or 2) errors in setting up Section Entry
          Point directions.</p>
        </li>

        <li><b>Remove Direction Sensors from Logic...</b> (not
        required when using SignalMast Logic) - This tool assembles
        a list of all direction Sensors defined in Sections
        currently in the Section Table, then removes all Sensors
        that are contained in this list from the Simple Signal
        Logic (SSL) of all Signal Heads. This tool cancels the
        effect of the <b>Set Direction Sensors in Logic...</b>
        tool, removes any direction Sensors that may have been
        placed by <a href=
        "../dispatcher/Dispatcher.shtml">Dispatcher</a>, and in
        addition removes any defined direction Sensors that might
        be in an incorrect SSL. If errors were noted while setting
        direction sensors using the above tool, then corrected,
        running this tool before attempting to set direction
        sensors again is sometimes useful.</li>

        <li style="list-style: none">
          A Layout Editor Panel is required to run this tool.
          After removal of direction Sensors from Signal Logic is
          completed a message is displayed giving the results of
          running the tool. Detailed error messages, if any, are
          placed in the JMRI error log.
        </li>
      </ul>

      <h2>Direction and Stopping Sensors</h2>

      <p>Optionally, each Section may have two <i>direction
      sensors</i>, one for the Forward direction and one for the
      Reverse direction. These are normally internal Sensors,
      bearing system names that begin with IS. They automatically
      follow the state of their Section. A Section has three
      states: <b>FREE</b> (not allocated to a train),
      <b>FORWARD</b> (allocated for travel in the forward
      direction), and <b>REVERSE</b> (allocated for travel in the
      reverse direction. When the state of the Section is
      <b>FREE</b>, both direction sensors are set <b>ACTIVE</b>.
      When the state of the Section is <b>FORWARD</b>, the forward
      direction sensor is <b>INACTIVE</b> and the reverse direction
      sensor is <b>ACTIVE</b>. Similarly, when the state of the
      Section is <b>REVERSE</b>, the forward direction sensor is
      <b>ACTIVE</b> and the reverse direction sensor is
      <b>INACTIVE</b>. These sensors may be used in signal logic to
      force signals for travel in the direction opposite to the
      allocated direction to <b>RED</b> (Stop). Tools are provided in
      the Section Table menu to automatically add direction sensors
      to signal logic or to automatically remove all direction
      sensors from Signal Mast Logic (<a href="#tools">see
      above</a>). Alternatively, if <a href=
      "../dispatcher/Dispatcher.shtml"><b>Dispatcher</b></a> is
      being used, it can add direction sensors to signal logic as
      needed.</p>

      <p>Also optionally each Section may have two <i>stopping
      sensors</i> that indicate when a train in the Section has
      reached the end of the Section by traveling in the forward
      direction or in the reverse direction. Stopping sensors
      should be physical sensors on the layout, for example
      infrared point detectors. For manual dispatching, these
      sensors may be displayed on a panel to indicate to the
      dispatcher when a train has reached the end of its
      allocation. For automatic running, these sensors may be used
      to stop a train before it reaches the end of its allocated
      Section, and before it overruns a red signal, if signals are
      present.</p>

      <h2><a name='SignalMast' id="SignalMast">Using Signal Mast
      Logic with Sections</a></h2>

      <p>If your signaling is based on <a href=
      "../beantable/SignalMastLogicTable.shtml">Signal Mast Logic</a> and the
      associated logic has been generated using the Layout
      Editor, then it is possible to also have Sections
      automatically generated based upon that same logic.</p>

      <p>The tool to accomplish this can be found in the <b>Signal Mast
      Logic Table</b> | <b>Tools</b> | <b>Generate Sections</b>.
      Running this will
      immediately create Sections that each contain all of the
      Blocks between any already-defined Signal Mast Pairs. It will
      also set up each "Automatically Generated" Section so that
      they include those Blocks in the correct order, with the
      direction being set as FORWARD travel, going from the Source
      to the Destination Signal Mast. Please note that the Block
      details are not saved when the Panel is stored, but are
      re-created when the file is loaded.</p>

      <p>The tool will also automatically create forward and
      reverse direction Sensors and place them in the Section,
      however currently the Signal Mast Logic does not use these
      and their creation is only there to allow validation of the
      Section (or inclusion by the user in unrelated Logix if
      desired).</p>

      <p>Sections generated with the tool will only have a pair of
      Entry Points and simply follow the Path between the two
      Signals.</p>

      <p>Direction Sensors (Forward and Reverse) are created by the
      <b>Generate Sections</b> tool, but - if desired - Stopping Sensors
      (Forward and Reverse) need to be added manually by the user via the
      <b><a href="SectionAddEdit.shtml#editsection">Edit Sections</a></b>
      pane that opens when you click the <b>Edit</b> button for a
      specific Section in the Section Table.</p>

      <p>The details of the Optional Direction and Stopping Sensors
      are saved when the Panel file is stored.</p>

      <p>To use the Sections that have been built this way, you will
      next need to set up <a href="TransitTable.shtml">Transits</a>.
      Following that, you will also need to set the <a href=
      "../dispatcher/Dispatcher.shtml"><b>Dispatcher</b></a> to use
      SignalMast Logic via the Dispatcher's <a href=
      "../dispatcher/Options.shtml"><b>Options</b></a> menu.</p>

      <h2>Saving Sections to Disk</h2>

      <p>Use the <b>Store</b> item in the <b>File</b> menu of the
      Section Table (or the <b>Store Panels...</b> item in the
      <b>Panels</b> menu of the main JMRI window) to save Section
      information to disk. This information (and any modified
      Signal Mast Logic information) is saved with the configuration and
      Panels in an XML file, along with Control Panel setup and
      similar stuff. To store your panels in the same file
      (recommended), select <b>File&gt;Store&gt;Store Configuration
      and Panels To File...</b> or select <b>Panels&gt;Store
      Panels...</b> in the main JMRI window.</p>

      <p>Back to the <a href=
      "../../../../html/tools/Sections.shtml">Sections help
      intro</a>.</p>
      <!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
