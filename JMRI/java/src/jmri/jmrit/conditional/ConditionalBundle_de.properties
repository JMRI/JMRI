# conditional.ConditionalBundle_de.properties
# based on a COPY from LogixTableBundle.properties, cleaned up 201803
#
# German properties for the jmri.jmrit.conditional GUI elements
# Translation by Simon Ginsburg und Egbert Broerse

LogixUserNameHint2 = Gebe einen neuen Nutzernamen f\u00fcr ein Logixelement an, z.B. 'Signal 2 Steuerung'
ConditionalSystemName = Bedingung Systemname
ConditionalUserName = Bedingung Nutzername
ConditionalUserNameHint = Gebe Nutzernamen f\u00fcr Bedingung an, z.B. 'Signal 2 Rot'

SinglePickFrame = Single Pick List

ColumnLabelRow = Zeile
ColumnLabelOperator = Oper
ColumnLabelNot = Invers
ColumnLabelDescription = Zustandsvariablenbeschreibung
ColumnLabelTriggersCalculation = Berechne Aktivierungen

# logix node edit pane items
NodeEditTitle   = Active Node Edit
NodeEditText = Another node cannot be selected while editing a node. Select Cancel or Update to complete the edit.

# Select Conditional Reference
SelectLogix = Select Logix
SelectConditional = Select Conditional
SelectFirstRow = Select a Conditional...

TitleEditLogix = Logix bearbeiten
TitleEditConditional = Bedingung bearbeiten
TitleEditAction = Ereignis bearbeiten
TitleEditVariable = Variable bearbeiten
TitleLogicalExpression = Logischer Ausdruck
TitleAntecedentPhrase = Zustandsvariablen
TitleConsequentPhrase = Folgenden Ereignis
TitleAction = Ereignisse

# next key both in LogixTableAction and ConditionalEdit
TitlePickList = W\u00e4hllisten

ConditionalTableTitle = Bedingungen (in der Reihenfolge der Berechnung)
ActionTableTitle = Folgenden Ereignisse (das 'denn' Teil)
StateVariableTableTitle = Zustandsvariablen (das 'wenn' Teil)
triggerOnAny = Ereignisse ausf\u00fchren bei jeden Ansto\u00df
triggerOnChange = Ereignisse ausf\u00fchren nur bei Zustands\u00e4nderung
OnTrigger = Immer wenn angesto\u00dfen
OnTriggerToFalse = Wenn angesto\u00dfen nach Unwahr
OnTriggerToTrue = Wenn angesto\u00dfen nach Wahr
OnChangeToTrue = Beim \u00dcbergang zu "Wahr"
OnChangeToFalse = Beim \u00dcbergang zu "Unwahr"
OnChange = Beim \u00dcbergang
FromFile = aus Datei
After = , nach
Seconds = Sekunden
to = nach
onWarrant = auf Fahrerlaubnis
onBlock = im Block
onPath = im Pfad
ValueInMemory = (Speicherwert)
ExecJythonCmd = Jythonbefehl

# Conditional TreeView
# Labels
LabelConditionalActions = Conditional:
LabelAntecedentActions = Antecedent:
LabelLogicTypeActions = Logic Type:
LabelTriggerModeActions = Trigger Mode:
LabelVariablesActions = Variables:
LabelVariableActions = Variable:
LabelActionsActions = Actions:
LabelActionActions = Action:
LabelMove = Move:
LabelAntecedentHeader = Antecedent Logic

# Nodes
NodeVariablesExpanded = Variables:
NodeVariablesCollapsed = Variables
NodeActions = Actions

# Hints
HintAddButton = Add a new item
HintEditButton = Edit the selected item
HintUpButton = Move the selected item up one row
HintDownButton = Move the selected item down one row
HintDeleteButton = Delete the selected item
HintDoneButton = Close the conditional edit and return to the Logix table
HintSaveButton = Save the add/edit changes and close
HintCancelButton = Close without saving the add/edit changes
HintHelpButton = Open a help window with detail Antecedent instructions
HintCheckButton = Update the state
HintToggleButton = Toggle the Action trigger mode

# Dialog Titles, not in use
TitleEditTypeDialog = Edit Logic Type
TitleEditConditionalDialog = Edit Conditional Name
TitleEditAntecedentDialog = Edit Antecedent Logic

# ConditionalHelpText
ConditionalHelpText1 = Mischen von UND''s und ODER''s kann doppelsinnige Ergebnisse verursachen. Die vorlaufende\n
ConditionalHelpText2 = Anweisung wird evaluiert von Links nach Rechts, gleich die Berechnung vom\n
ConditionalHelpText3 = innerste Variable zur linke Seite bis zur \u00e4u\u00dferste Variable zur rechte Seite.\n
ConditionalHelpText4 = Um die Folge der Berechnung zu \u00e4ndern, kann man runde Klammer die gew\u00fcnschte Folge
ConditionalHelpText5 = der Logik eingeben. Auch kan man die Operatoren eingeben. Die logische
ConditionalHelpText6 = Ausdruck 'Mixed' betrifft der Inhalt des vorgehenden Feldes und nicht die\n
ConditionalHelpText7 = Operatoren wie gezeigt in den Spalten der Variablentabelle.

DoneButtonHint = Klicke um Nutzernamen zu speichern und zur Logixtabelle zur\u00fcckzukehren
DeleteLogixButtonHint = Klicke um die Logix mit allen Bedingungen zu l\u00f6schen
CancelButtonHint = Klicke um abzubrechen und ohne \u00c4nderungen zur Bedingungsbearbeitung zur\u00fcckzukehren
NewConditionalButton = Neue Bedingung
NewConditionalButtonHint = Klicke um neue Bedingung einzugeben
CalculateButton = Berechne
CalculateButtonHint = Klicke um Zustandsvariablen zu berechnen ohne Ereignisse
ReorderButton = Neu ordnen
ReorderButtonHint = Klicke um rechte Spalte in gew\u00fcnschter Reihenfolge zu ordnen (nicht aktiv bei Gemischt)
AddVariableButton = Zustandsvariable hinzuf\u00fcgen
AddVariableButtonHint = Klicken um neue Zeile in der Zustandstabelle zu erzeugen.
CheckVariableButton = Zustandsvariablen kontrollieren
CheckVariableButtonHint = In Zustandsspalte dr\u00fccken um informationen in Zustandstabelle zu kontrollieren.
UpdateConditionalButtonHint = Dr\u00fccken um \u00c4nderungen durch zu f\u00fchren und zu Logixbearbeitung zur\u00fcckzukehren
CancelConditionalButtonHint = Dr\u00fccken um ohne \u00c4nderungen zu speichern zu Logixbearbeitung zur\u00fcckzukehren
DeleteConditionalButton = Bedingung l\u00f6schen
DeleteConditionalButtonHint = Dr\u00fccken um Bedingung zu l\u00f6schen und zu Logixbearbeitung zur\u00fcckzukehren
addActionButton = Ereignis hinzuf\u00fcgen
addActionButtonHint = Dr\u00fccke um eine neue Spalte an die Ereignistabelle hinzuzuf\u00fcgen
UpdateButtonHint = Dr\u00fccke um \u00c4nderungen durch zu f\u00fchren und zu Bedingung Bearbeiten zur\u00fcckzukehren
DeleteButtonHint = Dr\u00fccke um Eingabe zo l\u00f6schen und zur\u00fcckzukehren nach Bedingung Bearbeiten

NameHintTurnout = Gebe System- oder Nutzernamen ein f\u00fcr Weiche (z.B. LT12)
NameHintSensor = Gebe System- oder Nutzernamen ein f\u00fcr Detektor (z.B. CS2)
NameHintSignal = Gebe System- oder Nutzernamen ein f\u00fcr Signalschirm (z.B. IH34)
NameHintLight = Gebe System- oder Nutzernamen ein f\u00fcr Licht (z.B. CL12)
NameHintRoute = Gebe System- oder Nutzernamen ein f\u00fcr zu beeinflussende Weichenstra\u00dfe
NameHintMemory = Gebe System- oder Nutzernamen ein f\u00fcr zu beeinflussenden Speicher
NameHintLogix = Gebe System- oder Nutzernamen ein f\u00fcr Logix
NameHintAudio = Gebe System- oder Nutzernamen ein f\u00fcr Audioquelle (z.B. IAS2)
NameHintConditional = Gebe Systemnamen ein f\u00fcr Bedingung (oder Nutzernamen wenn Teil dieses Logixes)
NameHintFromMemory = Gebe System- oder Nutzernamen ein f\u00fcr den Speicher wovon kopiert werden soll
NameHintOBlock = Gebe System- oder Nutzernamen ein f\u00fcr Besetztblock
NameHintEntryExit = Enter Name of Entry/Exit Pair
NameHintSignalMast = Gebe System- oder Nutzernamen ein f\u00fcr Signalmast und drucke Enter/Return um die betriffende Signalbegriffe zu laden
NameHintWarrant = Gebe System- oder Nutzernamen ein f\u00fcr Fahrerlaubnis
CompareHintMemory = W\u00e4hle einen Operator um Speicherwerte zu vergleichen
CompareTypeHint = W\u00e4hle den w\u00f6rtlichen Wert oder den Speicherinhalt

DataHintBlockValue = Gebe Wert ein f\u00fcr den Block
DataHintLightIntensity = Gebe Lichtintensit\u00e4t ein in Prozent (0 - 100)
DataHintLightTransitionTime = Gebe Dauer in Betriebsuhrminuten ein f\u00fcr \u00dcbergang von 0% nach 100%.
DataHintThrottleFactor = Gebe ein Dezimalwert ein f\u00fcr das Fahrreglerverh\u00e4ltnis
DataHintTime = Zeit (hh:mm) eingeben in 24-Stunden-Darstellung
DataHintToMemory = Gebe Sytem- oder Nutzername der Zielspeicher ein
DataHintTrainId = Gebe eine g\u00fcltige Zug ID vom Lokpark ein - oder eine DCC Adresse, lang oder kurz bzw. 1234(L) oder 10(S)
DataHintTrainName = Gebe eine Name ein f\u00fcr den Zug
DataHintValue = Gebe zu vergleichenden Wert ein
DataHintDelayedSensor = Gebe Verz\u00f6gerungszeit ein (in Sekunden) um Detektorzustand zu \u00e4ndern
DataHintDelayedTurnout = Gebe Verz\u00f6gerungszeit (Sekunden) f\u00fcr Weiche ein
DataHintMemory = W\u00e4hle geforderter Zustand des Speichers
DataHintSound = W\u00e4hle zu spielende Audiodatei
DataHintScript = W\u00e4hle zu startendes Ablaufskript

VariableTypeHint = W\u00e4hle Art der Zustandsvariable zum Bedingungsvergleich
VariableOperHint = Select AND or OR for the operator, default is AND
VariableNotHint = Check to indicate that this variable is to be negated, default is unchecked
VariableTriggerHint = Check to indicate that this variable is used to trigger actions, default is checked
VariableStateHint = W\u00e4hle Art der Zustandsvariable zum Vergleich
VariableLogixHint = Select the Logix that contains the conditional to be checked
VariableConditionalHint = Select the desired conditional
VariableAspectHint = W\u00e4hle Signalbegriff zum Vergleich

TurnoutSetHint = W\u00e4hle "Geradeaus" oder "Abzweigung" je nach Vorgabe der Weichenstellung
SensorSetHint = W\u00e4hle "Besetzt" oder "Frei" je nach Vorgabe des Detektorstatus
LightSetHint = W\u00e4hle "Ein" oder "Aus" je nach Vorgabe der Bedingung f\u00fcr Licht
SignalSetHint = W\u00e4hle geforderte Signalstellung
SignalMastSetHint = W\u00e4hle Signalbegriff und drucke Enter/Return um es ein zu lesen
LockSetHint = W\u00e4hle ge- oder entsperrt
SetHintAudio = W\u00e4hle Ereignis zum ausf\u00fchren
SetHintJythonCmd = Gebe Jython Befehle ein
SetHintSound = Klicke im Dokumentwahldialog auf einer Audiodatei der Wahl
SetHintScript = Klicke im Dokumentwahldialog auf einer Skriptdatei der Wahl
BlockPathsSetHint = W\u00e4hle ein Blockpfad

PromptLoadMastName = (Gebe Signalmastname ein und dr\u00fccke Enter Taste um alle g\u00fcltige Signaldarstellungen zu laden)
PromptLoadHeadName = (Gebe Signalschirmname ein und dr\u00fccke Enter Taste um alle g\u00fcltige Signalbegriffe zu laden)

# Buttons used in multiple jmri.* packages, must stay here for older Logix .rb method
ButtonFirst = Erstes
ButtonNext = N\u00e4chstes
ReorderMessage = Bitte zuerst "Erstes" dr\u00fccken, danach "N\u00e4chstes", "N\u00e4chstes" usw. in der gew\u00fcnschten Anordnung.
ButtonMove = Schritt
ConfirmIndirectReference = Dr\u00fccke "{1}" wenn Speicher "{0}" w\u00e4hrend der Laufzeit einen g\u00fcltigen Namen f\u00fcr diese Ereignis enth\u00e4lt.\\Dr\u00fccke "{2}" um den Namen direkt ein zu geben.\nDr\u00fccke "{3}" um diese Warnung zu unterdr\u00fccken.\n

# Variable State combo box states used in jmri.implementation.DefaultConditionalAction
TurnoutUnlock = Entsperre
TurnoutLock = Sperre
LightOn = Ein
LightOff = Aus
StateMemoryCompare = Speicher (Gro\u00df-/Kleinschreibung-unterscheidend)
StateMemoryCompareInsensitive = Speicher (schreibungsunabh\u00e4ngig)
StateMemoryEquals = Wert (Gro\u00df-/Kleinschreibung-unterscheidend)
StateMemoryEqualsInsensitive = Wert (schreibungsunabh\u00e4ngig)

# Variable State combo box states used in jmri.implementation.DefaultConditionalAction
# here for ConditionalVariable via rbx:
StateSignalMastHeld = Signalmast gehalten
StateRouteFree = Weichenstra\u00dfe Frei
StateRouteIsSet = Weichenstra\u00dfe gestellt
stateRouteOccupied = Weichenstra\u00dfe belegt
StateRouteReserved = Weichenstra\u00dfe zugewiesen
StateSignalMastLit = Signalmast Erleuchtet
StateTrainRunning = Zug unterwegs

TypeSensorActive = Detektor Aktiv
TypeSensorInactive = Detektor Inaktiv
TypeTurnoutThrown = Weiche Abzweigend
TypeTurnoutClosed = Weiche Geradeaus
TypeConditionalTrue = Conditional True
TypeConditionalFalse = Conditional False
TypeLightOn = Licht Ein
TypeLightOff = Licht Aus
TypeFastClockRange = Spieluhr Bereich
# head test type strings picked up from jmri.NamedBeanBundle
#TypeSignalHeadRed = Signalschirm Rot
#TypeSignalHeadYellow = Signalschirm Gelb
#TypeSignalHeadGreen = Signalschirm Gr\u00fcn
#TypeSignalHeadDark = Signalschirm Dunkel
#TypeSignalHeadFlashRed = Signalschirm Rot Blinkend
#TypeSignalHeadFlashYellow = Signalschirm Gelb Blinkend
#TypeSignalHeadFlashGreen = Signalschirm Gr\u00fcn Blinkend
#TypeSignalHeadLit = Signalschirm Erleuchtet
#TypeSignalHeadHeld = Signalschirm Gehalten
TypeRouteIsSet = Gestellt
TypeLogicHint = W\u00e4hle logischer Operator um Zustandsvariablen (das 'wenn' Teil) dieser Bedingung zu verbinden
TypeMemoryEquals = Speicher vergleichen mit Wert (Gro\u00df-/Kleinschreibung-unterscheidend)
TypeMemoryCompare = Speicher vergleichen mit Speicher (Gro\u00df-/Kleinschreibung-unterscheidend)
TypeMemoryCompareInsensitive = Speicher vergleichen mit Speicher (schreibungsunabh\u00e4ngig)
TypeMemoryEqualsInsensitive = Speicher vergleichen mit Wert (schreibungsunabh\u00e4ngig)
#TypeSignalHeadAspectEquals = Signalbild gleicht
#TypeSignalHeadFlashLunar = Signalschirm Wei\u00df Blinkend
#TypeSignalHeadLunar = Signalschirm Wei\u00df
TypeSignalMastAspectEquals = Signalgebriff gleicht
#TypeSignalMastHeld = Signalmast Gehalten
#TypeSignalMastLit = Signalmast Erleuchtet
TypeTrainRunning = L\u00e4uft
TypeWarrantRouteOccupied = Belegt
TypeWarrantRouteFree = Unbelegt
TypeWarrantRouteAllocated = Zugewiesen
TypeEntryExitActive = Aktiv
TypeEntryExitInactive = Inaktiv

VariableOKMessage = Alle Zustandsvariablen sind in Ordnung.
VariableErrorMessage = Fehler aufgetreten, bitte korrigieren und erneut versuchen.
ActionOKMessage = Alle Ereignisse sind in Ordnung.
NoActionMessage = Eine Bedingung braucht mindestens eine Zustandsvariable und enth\u00e4lt meist eine Ereignis.

FileButtonHint = Klicke um eine Datei zu w\u00e4hlen
LabelLogicType = Boolescher Operator:
LabelValue = Wert
LabelThrottleFactor = Fahrreglerverh\u00e4ltnis
LabelSetFile = Datei
LabelSetTime = Setze Zeit
LabelSignalAspect = Signalmastbegriff
LabelStartTime = Startzeit
LabelEndTime = Endezeit
LabelDelayTime = Verz\u00f6gerung
LabelItemName = System-/Nutzername
LabelLightIntensity = Lichtintensit\u00e4t
LabelLiteralValue = W\u00f6rtlichwert
LabelActionAudio = Audio-ereignis
LabelActionDescription = Ereignisbeschreibung
LabelActionFile = W\u00e4hle
LabelActionItem = Ereignisgruppe
LabelActionLight = Lichtzustand
LabelActionLock = Verrieglungszustand
LabelActionOption = Einstellung Wechseln
LabelActionSensor = Detektorzustand
LabelActionSignal = Signalschirmbild
LabelActionText = Ereignisdaten
LabelActionTurnout = Weichenposition
LabelActionType = Ereignistyp
LabelAntecedent = Bedingungsausdruck (das 'wenn' Teil der Bedingung)
LabelAntecedentHint = Nutze runde Klammer um die Bedingungsfolge der Logik an zu passen
LabelBlockPaths = Blockpfad
LabelBlockStatus = Blockzustand
LabelBlockValue = Blockwert
LabelCompareOp = Vergleichender Operator
LabelCompareType = Vergleiche wie
LabelControlTrain = Steuerbefehl
LabelMemoryLocation = Name der Speicher
LabelMemoryValue = Speicherwert
LabelScriptCommand = Ablaufbefehl
LabelTrainId = Zug ID oder Adresse
LabelTrainName = Zugname
LabelTransitionTime = \u00dcbergangsdauer
LabelVariableType = Variablentyp
LabelVariableState = Variablenzustand
LabelVariableAspect = Variablenaspekt

#for DefaultConditional (via rbx.getString)
ActionNone = Keine
ActionSetTurnout = Setze Weiche
ActionSetSignal = Setze Signalbegriff
ActionSetSignalHeld = Setze Signal haltend
ActionClearSignalHeld = L\u00f6sche gehaltenes Signal
ActionSetSignalDark = Setze Signal Dunkel
ActionSetSignalLit = Setze Signal Erleuchtet
ActionTriggerRoute = Weichenstra\u00dfe ansto\u00dfen
ActionSetSensor = Setze Detektor
ActionDelayedSensor = Setze Detektor verz\u00f6gert
ActionResetDelayedSensor = Setze Detektor verz\u00f6gert zur\u00fcck
ActionCancelSensorTimers = L\u00f6sche Detektorverz\u00f6gerung
ActionDelayedTurnout = Setze Weiche verz\u00f6gert
ActionResetDelayedTurnout = Setze Weiche verz\u00f6gert zur\u00fcck
ActionCancelTurnoutTimers = L\u00f6sche Weichenverz\u00f6gerung
ActionSetLight = Setze Licht
ActionSetMemory = Setze Speicher
ActionEnableLogix = Aktiviere Logix
ActionDisableLogix = Deaktiviere Logix
ActionPlaySound = Audiodatei abspielen
ActionRunScript = Skript ablaufen lassen
ActionTurnoutLock = Weichensperrung
ActionTypeHint = Ereignis ausw\u00e4hlen oder, falls nicht n\u00f6tig, "Keine" anw\u00e4hlen.

ActionAllocateWarrant = Fahrerlaubnisstrecke zuweisen
ActionAutoRunWarrant = Automatischer Zuglauf
ActionBlockInService = Streckenblock Au\u00dfer Betrieb aufheben
ActionClearBlockError = Streckenblockfehler aufheben
ActionClearSignalMastDark = Signalmast Unbeleuchtet aufheben
ActionClearSignalMastHeld = Signalmast Angehalten aufheben
ActionControlAudio = Audioobjekt regeln
ActionControlTrain = Automatischer Zug regeln
ActionCopyMemory = Speicher kopieren nach Speicher
ActionDeallocateBlock = Block freigeben
ActionDeallocateWarrant = Fahrerlaubnis aufheben
ActionItemHint = W\u00e4hle einen Ereignis die der Konditional ausf\u00fchren soll
ActionJythonCommand = Jythonbefehl ausf\u00fchren
ActionManualRunWarrant = Zug manuell steuern
ActionOptionHint = W\u00e4hle wann das Ereignis durchgef\u00fchrt werden soll
ActionSetBlockError = Streckenblockfehler aktivieren
ActionSetBlockOutOfService = Streckenblock Au\u00dfer Betrieb auflegen
ActionSetBlockValue = Streckenblockwert eingeben
ActionSetFastClockTime = Betriebsuhrzeit eingeben
ActionSetLightIntensity = Setze Lichtintensit\u00e4t
ActionSetLightTransitionTime = Setze Licht\u00fcbergangszeit
ActionSetSignalMastAspect = Setze Signalbegriff
ActionSetSignalMastDark = Setze Signalmast Unbeleuchtet
ActionSetSignalMastHeld = Setze Signalmast Angehalten
ActionSetThrottleFactor = Setze Handreglerverh\u00e4ltnis
ActionSetTrainId = Setze Zug ID
ActionSetTrainName = Setze Zugname
ActionSetWarrantTurnouts = Setze Weichenstra\u00dfe
ActionStartFastClock = Starte Betriebsuhr
ActionStopFastClock = Betriebsuhr anhalten

AudioResetPosition = Position zur\u00fccksetzen
AudioSourceFadeIn = Einblenden
AudioSourceFadeOut = Ausblenden
AudioSourcePause = Pause
AudioSourcePauseToggle = Pause umschalten
AudioSourcePlay = Spiele
AudioSourcePlayToggle = Spielen umschalten
AudioSourceResume = Fortfahren
AudioSourceRewind = R\u00fcckspulen
AudioSourceStop = Stopp

WarrantHalt = Anhalten
WarrantResume = Wiederaufnehmen
WarrantAbort = Unterbreche
OBlockStatus = Besetztblockzustand
OBlockStatusHint = W\u00e4hle eine Besetztblockzustand zum Vergleich
EntryExit =  Eingang-Ausfahrt (NX)
Other = Sonstige

# for jmri.ConditionalVariable via rbx
FastClockDescrpt = {0} Bereich von {1} bis {2}
VarStateDescrpt = {0} "{1}" Zustand ist {2}
SignalHeadStateDescrpt = {0} "{1}" Signalbild ist {2}
MemoryCompareDescrpt = {0} "{1}" {2} {0} "{3}"
MemoryValueDescrpt = {0} "{1}" {2} Wert "{3}"
SignalMastStateDescrpt = {0} "{1}" Signalbegriff ist {2}

GreaterOrEqual = Gr\u00f6\u00dfer Als oder Gleich An
GreaterThan = Gr\u00f6\u00dfer Als
Equal = Gleich
LessThan = Weniger Als
LessOrEqual = Weniger Als oder Gleich An

# Conditional(Variable) error strings
Error4 = Beim Aktivieren dieses Logix trat der folgende Fehler auf:\n
Error6 = Dieser neue Benutzernamen wird bereits verwendet. Logix kann nicht aktualisiert werden.\nNutzernamen \u00e4ndern und erneut versuchen.
Error7 = \nBitte den Verweis korrigieren oder die fehlerhafte Bedingung oder Logix l\u00f6schen.
Error9 = Ganzzahl eingeben oder eine Speichervariable\nwelche ein Ganzzahl enth\u00e4lt um {0}.
Error10 = Dieser neue Benutzernamen wird bereits verwendet. Bedingung kann nicht aktualisiert werden.\nBenutzernamen \u00e4ndern und erneut versuchen.
Error11 = Bedingung "{0}" ({1}) ist eine Bedingungsvariable in Bedingung,\n"{2}" ({3}), in Logix, "{4}" ({5}).\nBitte diese Variable zuerst l\u00f6schen.
Error21 = "{1}" ist kein g\u00fcltiges Signalbild f\u00fcr Signalschirm "{0}".
Error23 = Setze Verz\u00f6gerte Detektorzur\u00fccksetz Ereignis
Error22 = Der Name "{0}" passt zu keinem existierendem Logix.\nNamen korrigieren oder Logix erstellen und erneut versuchen.
Error24 = Speicherwert "{0}" enth\u00e4lt keine numerischer Wert.\nWenn angesto\u00dfen kann die Bedingung nicht durchgef\u00fchrt werden bis den Wert korrigiert ist!
Error26 = Ung\u00fcltige Zeiteingabe "{0}"\nZeit muss im hh:mm Format eingegeben werden (e.g. 01:30, 16:00)\nf\u00fcr eine 24-Sunden Uhr. Bitte im korrekten Format eingeben und erneut versuchen.
Error27 = Setze Verz\u00f6gerte Detektormeldung Zur\u00fcck Ereignis
Error29 = Setze Licht\u00fcbergangszeit
Error34 = Es k\u00f6nnen keine zwei Bedingungen gleichzeitig bearbeitet werden. Bitte erst Bedingung "{0}" fertig bearbeiten und erneut versuchen.
Error35 = Es wird gerade eine Bedingung bearbeitet. Bitte erst Bedingung "{0}" fertig bearbeiten und erneut versuchen.
Error38 = {0} ist ein unangemessen Wert f\u00fcr {1}\nBitte Anzahl von Sekunden eingeben (nur Ziffern, max. 1 Stunde) und erneut versuchen.
Error39 = Setze Verz\u00f6gerte Weichenstellung Ereignis
Error40 = Licht - {0} - unterst\u00fctzt keine \u00dcberg\u00e4nge.\nBitte ein Licht w\u00e4hlen das \u00dcberg\u00e4nge unterst\u00fctzt oder Aktionstyp \u00e4ndern, und und erneut versuchen.
Error41 = Setze Verz\u00f6gerte Weichenstellung Zur\u00fcck Ereignis
Error42 = Setze Lichtintensit\u00e4t Ereignis
Error43 = Ganzzahl eingeben (nur Ziffern) oder eine Speichervariable\nwelche ein Ganzzahlwert enth\u00e4lt um die Lichtintensit\u00e4t\nzu setzen
Error45 = Licht - {0} - unterst\u00fctzt keine Intensit\u00e4tsanpassung.\nBitte ein Licht w\u00e4hlen das veriable Intensit\u00e4ten unterst\u00fctzt oder Aktionstyp \u00e4ndern, und und erneut versuchen.
Error46 = Zur Reorganisation sind mindestens zwei Bedingungen notwendig.
Error47 = Bearbeiten von Zustandsvariable l\u00e4uft. Bitte vollenden und erneut versuchen.
Error48 = Bearbeiten eines Ereignisses l\u00e4uft. Bitte vollenden und erneut versuchen.
Error49 = LRoute Initializer Vorl\u00e4ufer kann nicht bearbeitet werden (die Ereignisse aber dennoch)
ErrorAppearance = W\u00e4hle ein Signalschirmbild. Nach Eingabe mit der Cursor im Namenfeld die Enter- oder Returntaste dr\u00fccken.
ErrorAspect = W\u00e4hle ein Signalbegriff. Nach Eingabe mit der Cursor im Namenfeld die Enter- oder Returntaste dr\u00fccken.
ErrorVariableState = W\u00e4hle einen Zustand f\u00fcr diese Variable.
ErrorVariableType = W\u00e4hle einen Variablentyp oder klicke [Abbrechen].

# parse errors (for DefaultConditional via rbx.getString)
ParseError1 = Linkes Argument < {0} > nicht angetroffen
ParseError2 = Operator < {0} > nicht angetroffen
ParseError3 = Rechtes Argument < {0} > nicht angetroffen
ParseError4 = Fehler beim Syntaxanalyse: ungeeignetes Zeichen < {0} > angetroffen.
ParseError5 = Fehler beim Syntaxanalyse: Alle {0} Zeilen verbindlich. Zeile {1} fehlt.
ParseError6 = Ausnahmefall beim Syntaxanalyse von Bedingungsausdruck\n
ParseError7 = Unpaarige Klammern, es fehlt < {0} >.
ParseError8 = \nWenn die vorgenannte Meldung 'String index out of range:' gleicht, das erw\u00e4hnte Zahl bedeutet die Lage im Bedingungsausdruck wo der Fehler auftrat.
ParseError9 = Ungeeignetes Operator oder Zeichen < {0} >

ButtonDisabled = Ausgeschaltet weiterfahren
ButtonEnabled = Eingeschaltet weiterfahren
Warn1 = Die letzte Bedingung dieser Logix wurde gel\u00f6scht.
Warn2 = Eine Logix muss mindestens eine Bedingung enthalten um sinnvoll arbeiten zu k\u00f6nnen.
Warn3 = Die letzte Zustandsvariable f\u00fcr diese Bedingung wurde gel\u00f6scht.\nEine Bedingung muss mindestens eine Zustandsvariable enthalten um sinnvoll arbeiten zu k\u00f6nnen.
Warn5 = Die Bedingung "{0}" enth\u00e4lt keine Zustandsvariablen.\nEine Bedingung muss mindestens eine Zustandsvariable enthalten um sinnvoll arbeiten zu k\u00f6nnen.
Warn6 = Warnung - Eine \u00c4nderung {0} von {1} {2} startet die Berechnung dieser Logix.\nIn einigen Bedingungen wurde die Berechnung ein- und in anderen ausgeschaltet.\nBitte Berechnung \u00fcberall ausschalten, wenn jetzt keine Neuberechnung gew\u00fcnscht wird.
# identical Warn8 also in LogixTableBundle
Warn8 = Bedingungen in Logix "{0}" ({1}) kann man nicht bearbeiten.\n\u00d6ffne die Detekorengruppentabelle um eine Detektorgruppe zu bearbeiten.
Warn9 = Die Bedingungen k\u00f6nnten in eine Endlosschlaufe f\u00fchren.\n Die beiden folgenden beeinflussen diese Logix und werden gleichzeitig von ihr beeinflusst:\n
Warn10 = wurde ausgeschaltet wie vorgegeben.\nNicht vergessen, sie sp\u00e4ter wieder einzuschalten.
Warn11 = \nDu darfst Bedingung "{0}" ({1}) l\u00f6schen\noder bearbeiten in dasselben Fenster wo es erstellt war.
Warn12 = Complete other Variable edits before deleting a Variable.
Warn13 = Complete other Action edits before deleting an Action.
Warn14 = Complete other Action edits before re-ordering the Action rows.
Warn15 = The View mode cannot be changed while there is an active edit.
makeSelection = Bitte ein Handlungstyp w\u00e4hlen.
