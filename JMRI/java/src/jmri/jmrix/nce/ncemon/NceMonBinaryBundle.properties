# NceMonBinaryBundle.properties
#
#


# Commands
#0x80
NOP_CMD                 = NOP, dummy instruction

#0x82 - 0x87
READ_CLOCK_CMD          = Read clock
STOP_CLOCK_CMD          = Clock stop
START_CLOCK_CMD         = Clock start
SET_CLOCK_CMD           = Set clock {0}hr/{1}min
CLOCK_1224_CMD          = Set clock {0} hr format
CLOCK_RATIO_CMD         = Set clock ratio {0}

#0x89 - 0x8C
ENABLE_MAIN_CMD         = Enable main track, kill program
READ_AUI4_CMD           = Return status of AIU {0}
KILL_MAIN_CMD           = Kill main track, enable program
DUMMY_CMD               = Dummy instruction

#0x8E - 0x8F
WRITEn_CMD              = Write {0} bytes, start at {1} <{2}>
READ16_CMD              = Read 16 bytes, start at {0}

#0x93 - 0x96
SENDn_BYTES_CMD         = Queue {0} byte packet to TEMP_Q Send {1} times <{2}>
#0x97 - 0x9A
WRITE1_CMD              = Write 1 byte to {0} <{1}>
WRITE2_CMD              = Write 2 bytes to {0} <{1}>
WRITE4_CMD              = Write 4 bytes to {0} <{1}>
WRITE8_CMD              = Write 8 bytes to {0} <{1}>

#0x9B
READ_AUI2_CMD           = Return status of AIU {0}
#0x9C
MACRO_CMD               = Execute macro number {0}
#0x9D
READ1_CMD               = Read 1 byte at memory address {0}
#0x9E - 0x9F
ENTER_PROG_CMD          = Enter Programming track mode
EXIT_PROG_CMD           = Exit Programming track mode
#0xA0 - 0xA1
WRITE_PAGED_CV_CMD      = Program CV {0} with data <{1}> in paged mode
READ_PAGED_CV_CMD       = Read CV {0} in paged mode
#0xA2
LOCO_CMD                = sends speed or function packets to a locomotive
LOCO_CMD_Op1_01         = Loco {0} Reverse 28 speed {1} command
LOCO_CMD_Op1_02         = Loco {0} Forward 28 speed {1} command
LOCO_CMD_Op1_03         = Loco {0} Reverse 128 speed {1} command
LOCO_CMD_Op1_04         = Loco {0} Forward 128 speed {1} command
LOCO_CMD_Op1_05         = Loco {0} Estop reverse command
LOCO_CMD_Op1_06         = Loco {0} Estop forward command
LOCO_CMD_Op1_07         = Loco {0} Function {1} group 1 ({2})
LOCO_CMD_Op1_08         = Loco {0} Function {1} group 2 ({2})
LOCO_CMD_Op1_09         = Loco {0} Function {1} group 3 ({2})
LOCO_CMD_Op1_0A         = Loco {0} Set reverse consist address {1} for lead loco
LOCO_CMD_Op1_0B         = Loco {0} Set forward consist address {1} for lead loco
LOCO_CMD_Op1_0C         = Loco {0} Set reverse consist address {1} for rear loco
LOCO_CMD_Op1_0D         = Loco {0} Set forward consist address {1} for rear loco
LOCO_CMD_Op1_0E         = Loco {0} Set reverse consist address {1} for additional loco
LOCO_CMD_Op1_0F         = Loco {0} Set forward consist address {1} for additional loco
LOCO_CMD_Op1_10         = Del loco {0} from consist
LOCO_CMD_Op1_11         = Loco {0} Kill consist
LOCO_CMD_Op1_12         = Loco {0} Set momentum  {1}
LOCO_CMD_Op1_15         = Loco {0} Functions 13-20 control {1}
LOCO_CMD_Op1_16         = Loco {0} Functions 21-28 control {1}
LOCO_CMD_Op1_17         = Assign this loco {0} to cab number {1}

#0xA6 - 0xA9
WRITE_REG_CMD           = Program register {0} with data <{1}>
READ_REG_CMD            = Read register {0} in register mode
WRITE_DIR_CV_CMD        = Program CV {0} with data <{1}> in direct mode
READ_DIR_CV_CMD         = Read CV {0} in direct mode
#0xAA
SW_REV_CMD              = Return software revision number

#0xAD
ACC_CMD                 = Accy/signal and macro commands
ACC_CMD_Op1_01          = Execute macro number {0}
ACC_CMD_Op1_03          = Accessory {0} Normal direction (ON)
ACC_CMD_Op1_04          = Accessory {0} Reverse direction (OFF)
ACC_CMD_Op1_05          = Signal {0} Aspect {1}

#USB Commands
Usb_Set_Cab_Op1         = Set USB to Cab id {0}
Usb_Set_Mem_Ptr_Cmd     = Set USB context page pointer to cab {0} memory offset {1}
Usb_Mem_Write_Cmd       = USB Memory Write 1 byte <{0}>
Usb_Mem_Read_Cmd        = USB Memory Read {0} bytes

# Binary commands we don't know about or haven't coded 
BIN_CMD                 = binary cmd: {0}

# Replies
# Errors returned: '0'= command not supported
# '1'= loco/accy/signal address out of range
# '2'= cab address or op code out of range
# '3'= CV address or data out of range
# '4'= byte count out of range
# '!'= command completed successfully

NceReplyZero            = command not supported
NceReplyOne             = loco/accy/signal address out of range
NceReplyTwo             = cab address or op code out of range
NceReplyThree           = CV address or data out of range
NceReplyFour            = byte count out of range
NceReplyOK              = command completed successfully

# Replies programming track mode
NceReplyThreeProg       = short circuit

# Data replies or one's we don't know about
NceReply                = Reply: {0}

F0_OFF  = F0_OFF
F0_ON   = F0_ON
F1_OFF  = F1_OFF
F1_ON   = F1_ON
F2_OFF  = F2_OFF
F2_ON   = F2_ON
F3_OFF  = F3_OFF
F3_ON   = F3_ON
F4_OFF  = F4_OFF
F4_ON   = F4_ON
F5_OFF  = F5_OFF
F5_ON   = F5_ON
F6_OFF  = F6_OFF
F6_ON   = F6_ON
F7_OFF  = F7_OFF
F7_ON   = F7_ON
F8_OFF  = F8_OFF
F8_ON   = F8_ON
F9_OFF  = F9_OFF
F9_ON   = F9_ON
F10_OFF = F10_OFF
F10_ON  = F10_ON
F11_OFF = F11_OFF
F11_ON  = F11_ON
F12_OFF = F12_OFF
F12_ON  = F12_ON


