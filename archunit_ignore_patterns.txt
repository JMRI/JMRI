# This suppresses known issues (that should still be resolved\)
# from the ArchUnit tests run via jmri.ArchitectureCheck

# Be sure to regex escape all . () [ $ characters, accept differing lines for lambdas, and end with .*

# For checkStandardStreams
Constructor <jmri\.jmris\.simpleserver\.parser\.JmriServerParserTokenManager\.<init>\(jmri\.jmris\.simpleserver\.parser\.SimpleCharStream\)> gets field <java\.lang\.System\.out>.*
Constructor <jmri\.jmris\.simpleserver\.parser\.JmriServerParserTokenManager\.<init>\(jmri\.jmris\.simpleserver\.parser\.SimpleCharStream, int\)> gets field <java\.lang\.System\.out>.*
Constructor <jmri\.jmris\.srcp\.parser\.SRCPParserTokenManager\.<init>\(jmri\.jmris\.srcp\.parser\.SimpleCharStream\)> gets field <java\.lang\.System\.out>.*
Constructor <jmri\.jmris\.srcp\.parser\.SRCPParserTokenManager\.<init>\(jmri\.jmris\.srcp\.parser\.SimpleCharStream, int\)> gets field <java\.lang\.System\.out>.*
Constructor <jmri\.jmrit\.Sound\$WavBuffer\.<init>\(\[B\)> gets field <java\.lang\.System\.out>.*
Constructor <jmri\.jmrit\.ussctc\.TrafficRelay\.<init>\(jmri\.jmrit\.ussctc\.SignalHeadSection, jmri\.jmrit\.ussctc\.CodeGroupThreeBits, \[Ljmri\.BeanSetting;\)> gets field <java\.lang\.System\.out>.*
Constructor <jmri\.jmrix\.srcp\.parser\.SRCPClientParserTokenManager\.<init>\(jmri\.jmrix\.srcp\.parser\.SimpleCharStream\)> gets field <java\.lang\.System\.out>.*
Constructor <jmri\.jmrix\.srcp\.parser\.SRCPClientParserTokenManager\.<init>\(jmri\.jmrix\.srcp\.parser\.SimpleCharStream, int\)> gets field <java\.lang\.System\.out>.*
Method <apps\.CheckerFrameworkCheck\.test\(\)> gets field <java\.lang\.System\.out>.*
Method <apps\.FindBugsCheck\.test\(\)> gets field <java\.lang\.System\.out>.*
Method <apps\.gui3\.paned\.QuitAction\.actionPerformed\(java\.awt\.event\.ActionEvent\)>.*
Method <jmri\.Version\.main\(\[Ljava\.lang\.String;\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmris\.simpleserver\.parser\.SimpleNode\.dump\(java\.lang\.String\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmris\.srcp\.parser\.SimpleNode\.dump\(java\.lang\.String\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrit\.Sound\$StreamingSound\.run\(\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrit\.XmlFile\.lambda\$dumpElement\$.*\(org\.jdom2\.Element\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrit\.XmlFileValidateAction\$2\.showFailResults\(java\.awt\.Component, java\.lang\.String\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrit\.automat\.JythonAutomaton\.handle\(\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrit\.automat\.JythonSiglet\.defineIO\(\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrit\.decoderdefn\.DecoderIndexBuilder\.main\(\[Ljava\.lang\.String;\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrit\.dispatcher\.AutoActiveTrain\.setTargetSpeedByProfile\(float\)> calls method <java\.lang\.Exception\.printStackTrace\(\)>.*
Method <jmri\.jmrit\.logix\.Warrant\$2\.run\(\)> calls method <java\.lang\.Exception\.printStackTrace\(\)>.*
Method <jmri\.jmrit\.throttle\.WindowPreferences\.setPreferences\(java\.awt\.Container, org\.jdom2\.Element, boolean\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrit\.throttle\.WindowPreferences\.setPreferences\(javax\.swing\.JInternalFrame, org\.jdom2\.Element\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrix\.can\.cbus\.swing\.nodeconfig\.NodeConfigToolPane\$TransferHandler\.importData\(javax\.swing\.JComponent, java\.awt\.datatransfer\.Transferable\)> calls method <java\.lang\.Exception\.printStackTrace\(\)>.*
Method <jmri\.jmrix\.cmri\.serial\.cmrinetmetrics\.CMRInetMetricsCollector\.init\(\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrix\.mrc\.MrcSystemConnectionMemo\.getMrcTrafficController\(\)> calls method <java.lang.Exception.printStackTrace\(\)>.*
Method <jmri\.jmrix\.openlcb\.swing\.downloader\.LoaderPane\.readFile\(java\.lang\.String\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrix\.rps\.swing\.CsvExportAction\.startLogging\(java\.awt\.event\.ActionEvent\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrix\.rps\.swing\.CsvExportMeasurementAction\.startLogging\(java\.awt\.event\.ActionEvent\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.jmrix\.srcp\.parser\.SimpleNode\.dump\(java\.lang\.String\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.managers\.DefaultShutDownManager\.runShutDownTasks\(boolean\)> gets field <java\.lang\.System\.err>.*
Method <jmri\.util\.FileUtilSupport\.getPreferencesPath\(\)> gets field <java\.lang\.System\.err>.*
Method <jmri\.util\.JTextPaneAppender\.append\(org\.apache\.log4j\.spi\.LoggingEvent\)> gets field <java\.lang\.System\.err>.*
Method <jmri\.util\.JTextPaneAppender\.lambda\$append\$.*\(java\.lang\.String, org\.apache\.log4j\.spi\.LoggingEvent\)> gets field <java\.lang\.System\.err>.*
Method <jmri\.util\.com\.dictiography\.collections\.IndexedTreeMap\.dbg\(\)> gets field <java\.lang\.System\.out>.*
Method <jmri\.util\.com\.rbnb\.UDPOutputStream\.write\(\[B, int, int\)> gets field <java\.lang\.System\.err>.*

# For checkBundleNamesOnlyOnBundleClass
Class <jmri\.jmrit\.symbolicprog\.SymbolicProgBundle> is not assignable to jmri\.Bundle.*

# For checkBundleNames
Class <apps\.ConfigBundle> does not have simple name 'Bundle'.*

# For checkJmriPackageAwt
Method <jmri\.ConditionalAction\.getListener\(\)> has return type <java\.awt\.event\.ActionListener>.*
Method <jmri\.ConditionalAction\.setListener\(java\.awt\.event\.ActionListener\)> has parameter of type <java\.awt\.event\.ActionListener>.*
Method <jmri\.Path\.computeDirection\(java\.awt\.geom\.Point2D, java\.awt\.geom\.Point2D\)> has parameter of type <java\.awt\.geom\.Point2D>.*
Method <jmri\.UserPreferencesManager\.getScreen\(\)> has return type <java\.awt\.Dimension>.*
Method <jmri\.UserPreferencesManager\.getWindowLocation\(java\.lang\.String\)> has return type <java\.awt\.Point>.*
Method <jmri\.UserPreferencesManager\.getWindowSize\(java\.lang\.String\)> has return type <java\.awt\.Dimension>.*
Method <jmri\.UserPreferencesManager\.setWindowLocation\(java\.lang\.String, java\.awt\.Point\)> has parameter of type <java\.awt\.Point>.*
Method <jmri\.UserPreferencesManager\.setWindowSize\(java\.lang\.String, java\.awt\.Dimension\)> has parameter of type <java\.awt\.Dimension>.*

# For checkJmriPackageJmrix
Method <jmri\.Manager\.getMemo\(\)> has return type <jmri\.jmrix\.SystemConnectionMemo>.*

# For checkJmriPackageSwing
Interface <jmri\.CatalogTree> extends interface <javax\.swing\.tree\.TreeModel>.*
Method <jmri\.ConditionalAction\.getTimer\(\)> has return type <javax\.swing\.Timer>.*
Method <jmri\.ConditionalAction\.setTimer\(javax\.swing\.Timer\)> has parameter of type <javax\.swing\.Timer>.*
Method <jmri\.JmriPlugin\.start\(javax\.swing\.JFrame, javax\.swing\.JMenuBar\)> has parameter of type <javax\.swing\.JFrame>.*
Method <jmri\.JmriPlugin\.start\(javax\.swing\.JFrame, javax\.swing\.JMenuBar\)> has parameter of type <javax\.swing\.JMenuBar>.*

# For checkJmriPackageJdom
Method <jmri\.BasicRosterEntry\.store\(\)> has return type <org\.jdom2\.Element>.*
Method <jmri\.IdTag\.load\(org\.jdom2\.Element\)> has parameter of type <org\.jdom2\.Element>.*
Method <jmri\.IdTag\.store\(boolean\)> has return type <org\.jdom2\.Element>.*
