<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: Create/Edit Warrant Help</title>
  <meta content="Pete Cressman" name="author">
  <meta name="keywords" content="JMRI help Create/Edit Warrant">
  <!-- Style -->
  <meta http-equiv="content-type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div class="nomenu" id="mBody">
    <div id="mainContent">
      <h1>Creating and Editing Warrants</h1>A Warrant contains the
      information needed to run a train. This includes the DCC
      address of the locomotive(s), the route train will take, the
      settings of the turnouts to traverse the route and the
      throttle commands to use at various points along the route -
      e.g. speed, when to show lights, sound horns, bells or other
      sound effects. For an overview discussion of warrants, see
      <a href="Warrant.shtml">Warrants</a>.

      <div style="margin-left: 2em">
        <b>NOTE:</b> Warrants can only be created if the PanelPro
        configuration has at least two OBlocks defined.
      </div>There are three steps in creating a warrant, 1. define
      the route; 2. select a train; and 3. record the throttle
      commands. There are two tabs on the Create/Edit window,
      <b>Define Route</b> and <b>Record/Playback Script</b>.

      <h2>Defining a Warrant Route</h2>Routes are created using the
      <b>Define Route</b> tab in the Edit Warrant window.

      <h3>Origin, Destination, Via and Avoid Blocks</h3>The Origin
      Block is where a train given this route will start
      and the starting path within the origin block is the track it
      is on - e.g. a path named "Departure Track #3" in block named
      "Main Terminal". Choosing the portal of the path, e.g. portal
      "West Approach to #3" where the train should exit the origin
      block determines the direction of the train on the route. A
      computer algorithm will find portals, paths and blocks needed
      to take the train to the Destination Block and path - e.g.
      "Arrival Track #1" in the destination block.

      <p>A warrant route is created by selecting the the block and
      path where the train will begin its trip and the portal by
      which it should leave. Then you select the block, path and
      entry portal where the train should end its trip. Press the
      <b>Calculate Route</b> button and the the computer will
      determine all the intermediate paths needed to make the
      trip.</p>

      <div style="margin-left: 2em">
        <b>NOTE:</b> in the upper right hand portion of the
        Create/Edit Warrant frame is a table listing all the
        OBlocks you have defined. Either the system name or the
        user name of the block can be dragged and dropped into the
        location blocks on the upper left hand side of the frame.
      </div>

      <ul>
        <li>
          <b>Originating Location</b>: - Consists of a text field
          for the originating <b>Block Name</b>, a drop down menu
          to choose the starting <b>Path Name</b> and a drop down
          menu to select the <b>Exit Portal Name</b>.

          <div style="margin-left: 2em">
            The block may have several paths and the default path
            showing may not be the one where you intend the train
            to start. Also, Since paths usually have two portals,
            the exit portal showing may not be the one the train
            should pass through when leaving the origin block.
          </div>Setting the Exit Portal determines the direction
          the train will take. There is no further need to specify
          direction, since the algorithm will only provide routes
          that leave in that direction.
        </li>

        <li>
          <b>Destination Location</b>: - Consists of a text field
          for the destination <b>Block Name</b> and a drop down
          menu for the terminating <b>Path Name</b> and a drop down
          menu to select the <b>Entry Portal Name</b>.

          <div style="margin-left: 2em">
            As above the block may have several paths and the path
            where you intend the train to finish its run needs to
            be specified. It is important to specify the Entry
            portal for the destination. This is needed when the
            layout has reversing loops allowing the path to be
            entered from either end. <i>A common mistake where no
            route will be found is to specify an <b>entry portal</b> or
            <b>path</b> that cannot be reached by the direction taken when
            leaving the origin block.</i>
          </div>

          <div style="margin-left: 2em">
            <b>Note:</b> when a path is chosen, only the Portals of
            that path are shown in the Exit or Entry Portal drop
            down menus. Thus, even though the block may have many
            portals, you will only see at most two portals.
          </div>
        </li>

        <li><b>Via Location</b>: - Consists of a text field for a
        <b>Block Name</b> and a drop down menu for the <b>Path
        Name</b> where you want the route to pass through.<br>
        Typically, it is not necessary to enter any block name in
        this field, since it is likely the algorithm will detect
        the route you want. This entry is used when there are many
        routes possible from origin to destination and you want
        only to consider routes passing through a particular path
        on this block.</li>

        <li><b>Avoid Location</b>: - Consists of a text field for a
        <b>Block Name</b> and a drop down menu for the <b>Path
        Name</b> that you do not want the route to use.<br>
        This entry is used when there are many routes possible from
        origin to destination and you want only to consider routes
        that do not pass through a particular path on this
        block.</li>

        <li style="list-style: none">More information about
        <b>OBlocks</b>, <b>Portals</b> and <b>OPaths</b> can be
        found at <a href="OBlockTable.shtml">The Occupancy Block
        Tables</a>.

          <h3>Calculate and Debug</h3>After the origin and
          destination blocks and paths have been chosen, press the
          <b>Calculate Route</b> button. The "Searching for Route"
          text box will show some statistics on the number of
          routes and their length in blocks that have been found
          while searching for routes. The text field "Max Number of
          Blocks in Route" limits how far the computer will look
          routes. The <b>Stop</b> button will terminate the search
          for routes.

          <p>After the Stop button is pressed or the computer
          exhausts all the possible routes less than or equal the
          "max length", it presents a list of the routes that it
          found and their lengths. Choose a route by pressing its
          radio button. Pressing the <b>Review</b> button will
          display the route for you to examine in a Train Route Table.
          Each block, its path and portals used to traverse the route
          is displayed. Also you can view the route on the PanelPro layout
          diagram if the track icons consist of <i>Indicator Track,</i>
          icons.</p>

          <p>You may inspect all the routes in this manner.
          Choosing a route and pressing the <b>Select</b> button
          will dismiss the dialog. and bring up the
          <b>Record/Playback Script</b> tab. If exactly one route
          is found, the list dialog is skipped.</p>

          <p>Frequently, more than one route will be found and the
          list may be quite long - especially when the route is a
          repeating loop. If the list is too lengthy, there are
          several ways you can restrict the number of routes
          found.</p>

          <ul>
            <li>1. Specify a maximum number of blocks to use in a
            route by entering a smaller number in the <b>Max Number
            of Blocks in Route</b> box. The computer will only list
            routes with this number or fewer blocks</li>

            <li>2. Specify an intermediate <b>Via Location</b>
            block and path that must be included in the route. The
            computer will calculate the route with this "must
            include" restriction and present you only with routes
            through the specified "Via" block and path.</li>

            <li>3. Specify an <b>Avoid Location</b> block and path
            that must not be in the route. The computer will not
            list any routes containing this "must avoid" block and
            path</li>
          </ul>

          <p>Sometimes the dialog message "No Route found from
          "Origin Block', path ..." etc. is displayed. Responding
          <b>Yes</b> to the question, "Show the search tree?" will
          open a window with a graphic description of all paths
          beginning at the Origin block, path and exit portal.
          Trace what you believe to be a likely route by clicking
          on the nodes. Each node is a block path and will display
          its path and block name and the entry and exit portals it
          uses. At the end of each branch, the leaf node will be
          the point where the route could not continue. Normally
          these leaves are spurs. However, these are also the
          places where you may find an error or omission that you
          made when defining the OBlocks, OPaths and Portals. As
          you trace the attempted routes you may find that you have
          forgotten to enter a path or mis-labeled the correct
          portal to a path. <i>A common mistake is to incorrectly
          specify the path or portal that must be used to leave the
          starting block or to enter the destination block.</i></p>

          <p>Another possible reason is the search depth was
          reached before the route can be completed. In this case,
          increase the maximum number of blocks to use in a route
          by entering a larger number in the <b>Max Number of
          Blocks in Route</b> box.</p>

          <p><p>When you are satisfied with the route, the
          <b>Record/Playback Script</b> tab will be selected for
          you. </p>
          <p>At the very top are
          two Radio buttons which allow you to select either the
          <b>Route Table</b> or the <b>Throttle Command Table</b>.
          The Route Table shows the track circuits (OBlock, Portals
          and Paths) the warrant defines. The Throttle Command
          Table shows the throttle commands that will be used 
          when driving the train over the warrant's route.
          Additional items on this tab allow you pick the engine to
          power your train and to test and modify the recorded
          script. Presently the <b>Throttle Commands</b> table is
          empty. The bottom half displays four
          outlined areas; <b>Choose Engine Consist</b>, 
          <b>Learn mode</b>, <b>Run Parameters,</b> and <b>Test 
          Run Train,</b>. The first thing to do
          is to choose an engine consist.

          <h3>Choosing a Train</h3>The <b>Train Name</b> field is
          used to provide a name that can be displayed by an
          indicator track icon as the train travels along the
          warrant route. If you have defined an JMRI engine roster,
          the train names are displayed in the <b>Engine Roster</b>
          drop down ComboBox. Selecting a name from this list will
          fill in the <b>Train Name</b>, and <b>Address</b> text
          fields and assigns them to the warrant.

          <p>A DCC address typed into the<b>Address</b> text field
          will be used whether or not it is found in the JMRI
          Engine Roster.</p>

          <h2>Learn Mode</h2>Throttle commands are created by
          recording the commands you send to a train while
          operating it manually from a throttle in <b>Learn
          Mode</b>.

          <h3>Learn Mode Throttle</h3>If a train has been assigned,
          that is, has a valid DCC address in the warrant, then a
          throttle can be acquired by pressing the <b>Start</b>
          button. A screen throttle will be displayed. This
          throttle will operate the acquired train and all the
          throttle commands will be recorded until the <b>Stop</b>
          button is pressed.

          <div style="margin-left: 2em">
            <b>NOTE:</b> It can be inconvenient to use the computer
            screen Learn Mode throttle. Under LocoNet a handheld
            throttle may "steal" the screen throttle address and
            its commands will be recorded. For other systems a
            walkaround WiFi throttle can be used to record
            commands. Whatever throttle is used, start and stop the
            recording with the screen buttons.
          </div>The learn script should be done with a completely
          clear route - All turnouts set should be set for the
          route, all blocks unoccupied (except origin), all signals
          should be set for clear running and no changes made during
          the recording period. When the train is run by playing
          back the script, any changes to signal aspects will be
          taken into account and the train's speed and scheduled
          times will be altered accordingly. The recorded 
          speeds and elapsed times should be for unrestricted
          speeds.

          <p>Pressing the <b>Stop</b> button will end the
          recording.</p>

          <div style="margin-left: 2em">
            <b>NOTE:</b> The train must <b><i>not</i></b> be moving
            when the recording is stopped. <i>When play back of the
            warrant ends, the train continue to run without a
            warrant to control it!</i>
          </div>

			<h3>Run Parameters</h3>This area has check boxes to select
			how the train will operate when running the warrant.  In normal
			operation, the train will follow the commands as recorded.
			However if a track condition ahead of it is detected that 
			requires a speed change, the warrant will modify the recorded
			speed accordingly.  Track conditions requiring speed changes
			is discussed in <a href="Warrant.shtml #SpeedMap">Warrants 
			and Speed Restrictions</a>.
			When the warrant makes such a speed change it "ramps" the change
			in small steps to give a more prototypical smooth look to
			the change.  When decreasing speed it calculates and issues
			these step-wise speed changes so that the required speed is 
			achieved just at the point where the speed limit must be enforced.
			When increasing speed it begins the ramp up when entering
			the block permitting the speed increase.
					
			<ul>
			<li><b>No Ramp speed changes</b> Suppress the 
			ramping calculations. Instead, it makes an immediate speed
			change upon entering the approach block to the block requiring
			a speed change.</li>
			<li><b>Use Elapsed Time Only</b> Do not synchronize commands
			with block detection. <i>Using this options allows Warrants to
			be run on layouts without block detection.</i></li>
			</ul> 
			Using these options are the 
			only cases where block path lengths are not necessary. 
			
          <h2>Run Mode</h2>After a script is recorded, pressing the
          <b>AutoRun</b> button in the <b>Test Run Train</b> box will
          send the throttle commands to the train specified in the
          warrant.

          <div style="margin-left: 2em">
            <b>NOTE:</b>Be sure that the train is located on the
            Path of the Origin block of the route and the direction
            of the engine is compatible with the first direction
            specified in the throttle commands.
          </div>
          <p>The <b>Status</b> field will display each block
          entered by the train as it traverses the route.

          <p>The <b>Test Run Train</b> box has four radio buttons to
          control the train and override the Throttle commands.

          <h2>Saving the Warrant</h2>When you are satisfied with
          the performance of the warrant, press the <b>Save</b>
          button to add the warrant to the <a href=
          "WarrantTable.shtml">Warrant Table</a>.

          <h2>Throttle Command Table</h2>The Throttle Command Table
          has the following columns:

          <ul>
            <li><b>ET (msec)</b>: - The elapsed time in
            milliseconds to wait before issuing the throttle
            command.</li>

            <li><b>Command</b>: - The throttle command that was
            recorded (direction, speed, or button press or
            release).</li>

            <li><b>Value</b>: - The value of the command.</li>

            <li><b>Block</b>: - The block the train occupied when
            the throttle command was recorded.</li>
          </ul>

          <h3>Synchronizing Commands to Block
          boundaries.</h3>Changing the consist of a train or
          perhaps even a temperature change between recording and
          playback, may result in the train not performing a
          throttle command at the same place on the on the route
          where the "Learn Mode" train recorded them.

          <p>The entry into each block is recorded with a "NoOp"
          marker. These markers are used to synchronize the elapsed
          time of the automatic running of the train when it enters
          a block to its recorded elapsed time in the block. The
          throttle commands of the next block will be delayed until
          the train enters the block. That is, the elapsed time of
          the NoOp command must be reached before any more commands
          are issued to the running train. This will be the case if
          the train is late in arriving at the block. On the other
          hand if the train arrives earlier than expected the
          elapsed times of the preceding block will be skipped.</p>

          <p>If a more precise way is needed to have a script event
          occur at a particular location, see the section
          <b>Internal Synchronization From External Events</b>
          below.</p>

          <h3>Editing Recorded Throttle Commands</h3>The throttle
          commands recorded in <b>Learn Mode</b> can be edited.
          However, caution should be taken to only make modest
          changes since new commands when executed in playback
          could cause dramatic events. It may be wiser to re-record
          the commands in a new Learn Mode session if major changes
          are made.

          <p>The recorded throttle commands execute according to
          the elapsed time between commands. The elapsed time (ET
          column) may be modified and even the command may be
          changed. Rows may be deleted and additional rows
          inserted.</p>

          <p>Rows can be inserted into Throttle command Table so
          the train can set external sensor states or respond to
          the state of an external sensor. The run protection
          discussed in previous sections and synchronizing commands
          depends on reliable occupancy detection. If the layout is
          prone to have spurious false detection signals, then
          automated running will be unsatisfactory - trains may
          wait indefinitely for phantom trains to release occupancy
          or run indefinitely by not receiving a synchronizing
          signal. The train can be run using the elapsed times
          between commands only and skip the block protection
          mentioned above i.e. "Run with Blocks Dark".</p>

          <h3>Editing Throttle Commands</h3>All of the columns in
          the Throttle Command Table can be edited. Perhaps you
          want to touch up the timing for the horn blasts or modify
          the speeds. Just enter the data you want. The values in
          the Throttle Command Table are changed by typing new
          entries into cells of the table.

          <p>Rows may be inserted or deleted from the table using
          the buttons to the right of the table. Note that an
          inserted row has 0 elapsed time from the previous command
          so you may want to adjust this by taking time away from
          either the previous row or the following row and entering
          it into the inserted row. Also, when a row is deleted,
          its elapsed time is added to the time of the following
          row. These default elapsed times for inserting and
          deleting rows are entered to keep the total elapsed time
          in the block constant.</p>

          <h3>Triggering External Events From Scripts</h3>External
          animation or other events may be triggered by entering a
          "<i>Set Sensor</i>" command. To do this, insert a row
          with the words <b>Set Sensor</b> in the
          <b><i>Command</i></b> column and a valid sensor name in
          the <b><i>Block</i></b> column. The <b><i>Value</i></b>
          column should have the action you want the sensor to take
          at its execution time - the words <b>active</b> or
          <b>inactive</b>. Also enter the elapsed time when to
          trigger the setting of the sensor. On playback when this
          command is executed the state of the sensor will be set.

          <h3>Internal Synchronization From External
          Events</h3>Additional synchronization can be done within
          a block. For example stopping a train at a water tower or
          over an uncoupling device or for any reason where using
          the elapsed time of a command is not precise enough. To
          do this, insert a row with the words <b>Wait Sensor</b>
          in the <b><i>Command</i></b> column and a valid sensor
          name in the <b><i>Block</i></b> column. The
          <b><i>Value</i></b> column should have the action words
          <b>active</b> or <b>inactive</b>. On playback when this
          command is executed the script pauses and the current
          movement of the train is sustained until the sensor
          changes to the specified state. When that happens the
          script continues to execute according to the recorded
          times. In this case the "Wait Sensor" might be an optical
          sensor positioned to detect specific point. Bracket the
          "Wait Sensor" command with speed commands, the one before
          with a very slow speed and the one after with speed 0 (or
          -1). The script will then have the train creep at the
          slow speed until the sensor makes the detection. Then the
          script continues and the speed 0 command stops the train.

          <p>Likewise the script and train may stay stopped until a
          second "Wait Sensor" command triggers the script to
          continue.</p>

          <p>If the "Wait Sensor" is already at the specified state
          when playback executes its command the script
          continues.</p>

          <h3>Automatic Sequencing of Scripts</h3>It is possible to
          start another script from a script. To do this, insert a
          row with the words <b>Run Warrant</b> in the
          <b><i>Command</i></b> column and name of a warrant in the
          <b><i>Block</i></b> column. This command launches the
          second warrant. Note that a train with the address
          specified in the second warrant must be placed in the
          starting block of the second warrant.

          <p>This feature can be used to loop a train repeatedly by
          using the same warrant name. If a script terminates with
          the destination block equal to the origin block, it will
          repeat for the number of times entered into the
          <b><i>Value</i></b> column. If a negative number is
          entered the script will repeat indefinitely until an
          abort command is manually issued. Another possibility
          would be to use warrant "from A to B" and warrant "from B
          to A", where warrant "from A to B" runs warrant "from B
          to A" and warrant "from B to A" runs warrant "from A to
          B" and each warrant specifies the same train Id and the
          same number of repeats.</p>

          <h3>Script Commands</h3>

          <table border="1">
            <tr>
              <th colspan="1.75">Command</th>

              <th colspan="1.75">Value</th>

              <th colspan="1.75">Block</th>
            </tr>

            <tr>
              <td>Forward</td>

              <td>true/false</td>

              <td>block name</td>

              <td><i>direction</i></td>
            </tr>

            <tr>
              <td>Fn</td>

              <td>true/false</td>

              <td>block name</td>

              <td><i>any function key</i></td>
            </tr>

            <tr>
              <td>F0</td>

              <td>true/false</td>

              <td>block name</td>

              <td><i>e.g. head light</i></td>
            </tr>

            <tr>
              <td>Speed</td>

              <td>decimal</td>

              <td>block name</td>

              <td><i>throttle setting</i></td>
            </tr>

            <tr>
              <td>Set Sensor</td>

              <td>active/inactive</td>

              <td>Sensor name</td>

              <td><i>sets a sensor</i></td>
            </tr>

            <tr>
              <td>Wait Sensor</td>

              <td>active/inactive</td>

              <td>Sensor name</td>

              <td><i>halts commands for a sensor</i></td>
            </tr>

            <tr>
              <td>Run Warrant</td>

              <td>integer</td>

              <td>Warrant name</td>

              <td><i>chains to another warrant</i></td>
            </tr>
          </table>

          <h2>Running Trains on Dark Blocks</h2>The Learn mode and
          Run Mode functions can be used on blocks that do not have
          detection sensors. However, without detection, other than
          the initial setting of turnouts, the warrant cannot reset
          the turnouts or modify its speed while the train is
          <em>en route</em>. This means there is no protection from
          rouge trains fouling the route or from turnouts being
          changed while the train is <em>en route</em>. Therefore,
          run trains with caution over Dark Blocks.

          <p>Note that entry into a Dark Block is detected
          differently that an occupancy block. Obviously, entry
          into an occupancy Block is recorded when the occupancy
          block detects occupancy. However entry into a Dark Block
          can only be recorded as the time when the previous
          occupancy Block shows no occupancy. That is, the elapsed
          time for entry into a Dark Block is recorded by the tail
          of the train not the head.</p>

          <h2>Save etc.</h2>There are three buttons at the bottom
          of the window:

          <ul>
            <li><b>Save</b>: - Saves the warrant so it can be shown
            in the list of warrants on the Warrant Table. A
            permanent copy of the warrant is saved when the panel
            is saved to the Configuration file.</li>

            <li><b>Copy</b>: - Makes a copy of the warrant.</li>

            <li><b>Cancel</b>: - Cancels any editing that may have
            been done.</li>

            <li><b>Delete</b>: - Deletes the warrant when the panel
            is saved to the Configuration file.</li>
          </ul><!--#include virtual="/Footer" -->
        </li>
      </ul>
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
