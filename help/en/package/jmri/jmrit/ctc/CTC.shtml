<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">
  <!-- Copyright ($Author$) 2016 -->

  <title>JMRI: CTC</title><!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div class="nomenu" id="mBody">
    <div id="mainContent">
      <h1>JMRI: CTC</h1>

      <p>
      CTC is a very complex system. An understanding of the goals of CTC and
      how it functions is very helpful.  While this tool will describe various
      CTC features, it is not a CTC course.  There are many books written on
      the subject, for example Dr. Bruce Chubb's CTC manuals.  Other materials
      (too numerous to list) exist on the Internet as well, such as Mike
      Burgett's web site (since shut down, but may be active in the future again).
      </p>

      <h2>Overview</h2>
      <p>
      The CTC system consists of three main compoments.  The first one is the
      <strong>CTCEditor</strong> which is used to define the CTC system.  The
      second component is <strong>CTCMain</strong>, which is a run time
      component which executes the rules created by the editor.  These
      components are started by using the PanelPro <strong>Tools</strong> menu
      and/or including them as actions defined in <strong>Preferences >> Start
      Up</strong>.
      </p>

      <p>
      The last component is the layout configuration in JMRI.  This includes
      turnout definitions, occupancy sensors, blocks and signals.  The signals
      can be defined as signal heads with SSL or signal masts using signal mast
      logic.  The signaling implementation needs to properly implement ABS
      signaling before adding CTC.  This includes proper block boundaries.
      </p>

      <h3>CTCEditor</h3>
      <p>
      The CTCEditor is used to define the CTC components and the rules that will
      be used by the run time component.  The resulting data is stored in an XML
      file:  <strong>CTCSystem.xml</strong>.  This file is located at the
      <em>user files location</em> in the <strong>ctc</strong> directory.
      </p>

      <p>
      As an option to support creation of the GUI portion of the CTC machine,
      a Panel Editor panel can be created by pressing a single button. This
      facilitates the design of the full GUI CTC panel.  This feature also
      creates a minimal panel xml file that contains all of the CTC specific
      internal sensors.
      </p>

      <h3>CTCMain</h3>
      <p>
      CTCMain is the run time component that provides all of the logic to
      implement a CTC machine.  It responds to layout and panel inputs and
      takes appropriate actions based on the definitions provided by the
      CTCEditor.  It eliminates the need to create Logix or scripts.
      </p>

      <h2>Defining a CTC System</h2>
      <p>
      Use the following table of contents to jump to various topics. For new
      CTC implementations, the topics should be reviewed/done in order.
      </p>

      <ol>
        <li><a href="#editor">CTCEditor 2</a>
          <ol>
            <li>Menus 3
              <ol>
                <li>File menu 4
                  <ol>
                    <li><a href="#menuFile">New 5</a></li>
                    <li><a href="#menuFile">Save 5</a></li>
                    <li><a href="#menuFile">Exit without saving 5</a></li>
                  </ol>
                </li>
                <li>Edit menu 4
                  <ol>
                    <li><a href="#menuEditFind">Find and Replace... 5</a></li>
                    <li><a href="#menuEditFix">Fix Error(s)... 5</a></li>
                  </ol>
                </li>
                <li>Configure menu 4
                  <ol>
                    <li><a href="#menuCfgDeb">Debugging 5</a></li>
                    <li><a href="#menuCfgDef">Defaults 5</a></li>
                    <li><a href="#menuCfgFlt">Fleeting 5</a></li>
                    <li><a href="#menuCfgPat">Patterns 5</a></li>
                    <li><a href="#menuCfgGui">GUI Design 5</a></li>
                  </ol>
                </li>
              </ol>
            </li>
            <li><a href="#osList">O.S. Sections List 3</a>
<!--              <ol>
              </ol>  -->
            </li>
            <li>Edit Buttons 3
              <ol>
                <li><a href="#frmCB">Code button 4</a></li>
                <li><a href="#frmSIDI">Signal direction indicators 4</a></li>
                <li><a href="#frmSIDL">Signal direction lever 4</a></li>
                <li><a href="#frmSWDI">Switch direction indicators 4</a></li>
                <li><a href="#frmSWDL">Switch direction lever 4</a></li>
                <li><a href="#frmCO">Call On 4</a></li>
                <li><a href="#frmTRL">Traffic locking 4</a></li>
                <li><a href="#frmTol">Turnout locking 4</a></li>
                <li><a href="#frmIL">Indication locking 4</a></li>
              </ol>
            </li>
          </ol>
        </li>
        <li><a href="#ctcFiles">Files 2</a></li>
        <li><a href="#ctcMain">CTCMain 2</a></li>
        <li><a href="#ctcDefinitions">Definitions 2</a></li>
      </ol>

    <a name="editor" id="editor"></a>
    <h2>CTCEditor</h2>

    <p>
    The CTCEditor consists of a menu bar, a section containing a list of the
    defined OS sections with related buttons and a group of 9 buttons at the
    bottom.  With the exception of the <strong>Code</strong> button, the
    remaining buttons can be enabled to activate the selected CTC feature.
    </p>

    <p>
    When the editor is started, it loads the current CTCSystem.xml file.  When
    the editor is stopped by using the window close button, the CTCSystem.xml
    file is updated.  See the <a href="#menuFile">file menu</a> for other options.
    </p>

      <h3>Editor Menus</h3>

      <a name="menuFile" id="menuFile"></a>
      <h4>File menu</h4>
      <p>
      The <strong>New</strong> menu item deletes the current configuration in
      the editor.  If the editor is then closed (which does an automatic save),
      the CTCSystem.xml file will be empty.
      </p>

      <p>
      The <strong>Save</strong> menu item writes the current editor configuration
      to the CTCSystem.xml
      file.  The CTCEditor program is not closed.
      </p>

      <p>
      The <strong>Exit without saving</strong> menu item discards any changes
      and closes the CTCEditor.
      </p>

      <a name="menuEditFind" id="menuEditFind"></a>
      <h4>Edit menu</h4>
        <h5>Find and Replace...</h5>
        <p>
        This invokes a powerful editor.  It doesn't have many features, but the
        important point is that it will search everything in the system for
        references to things that may be changing.  For example, when changing
        "IS8:LDGL" -> "IS8:XYZZY", the program will list all of these references,
        and if approved will change all of them, so that there are no
        "dangling references" to something that no longer exists.  In this
        manner, it is a "refactor / replace" function (for programmers who
        understand these terms).
        </p>

        <p>
        Only data "destined" for JMRI is scanned.  None of the data maintained
        by this program for its own internal use (such as Patterns, Defaults,
        etc.), is scanned.
        </p>

          <h6>Searching</h6>
          <p>
          Enter in the text to search for, along with "Case sensitive" checkbox
          and Exact / Contains radio buttons.
          </p>
          <p>
          Once the <strong>Search</strong> button is pressed, the results are
          shown on the right.  This shows where the search string was found in
          the system, and the context it is used in.  No items are selected.
          Press <strong>Select all</strong> to select all rows.  That button
          now says <strong>Deselect all</strong> (it flip/flops from one to the
          other). The standard single selection, multiple selection and range
          selection options are available. A count of the items selected appears
          next to the <strong>Replace</strong> button.  Only the selected items
          will be replaced.
          </p>

          <h6>Replacing</h6>
          <p>
          At least one item has to be selected before the <strong>Replace</strong>
          button will be enabled.  The radio buttons above it allows the replace
          process to be modified.
          </p>
          <p>
          <strong>Replace completely</strong>:  The entire line no matter where
          the search string is found is replaced by the <strong>Replace with:
          </strong>" text.  This is not a common choice.
          </p>
          <p>
          <strong>Replace searched for value only</strong>:  This is the
          typical choice and the default.  The search text is replaced with the
          replacement text.
          </p>
          <p>
          <strong>Rescan with below and substitute with above</strong>:  The
          purpose of this is to use the first search function to locate lines
          with other data in them, then re-scan each of the lines selected with
          the new search pattern, and substitute the "Replace with:" value there.
          This sub-search is case sensitive.
          </p>

          <p><strong>Note</strong>: Depending on the nature of the change,
          it is possible that new sensors are required.  For example, changing
          IS2:CB to IS2:CodeBtn results in a new code button sensor.  If the
          panel xml file already refers to the old sensor name, it will have to
          be modified.</p>

          <p><strong><em>Warning: At present, there is no "Undo".</em></strong></p>

        <a name="menuEditFix" id="menuEditFix"></a>
        <h5>Fix Error(s)...</h5>
        <p>If an attempt is made to save the editor data and the
        <strong>***ERROR***</strong> indicator appears anywhere in the Columns
        listing, the save, including the automatic save during program exit,
        will not occur.  A dialog will suggest doing this menu item.  Please
        read carefully the information in this menu item.</p>

      <a name="menuCfgDeb" id="menuCfgDeb"></a>
      <h4>Configure menu</h4>
        <h5>Debugging</h5>
        <p>The defaults here are good enough, but may modified if desired.</p>

        <p>
        <strong>CTC system reload sensor</strong>: This sensor, when triggered
        (set to active) will cause the entire CTC system to reload.  This makes
        it possible to make CTCEditor changes and then test them immediately
        without having to restart JMRI each time. See "Running the CTC system
        under JMRI" for more information on this.
        </p>

        <p>
        <strong>CTC debug traffic locking rules triggered display sensor</strong>:
        When active, the number of the Traffic Locking rule that was true is
        logged when a code button is pressed.  It is logged as an INFO message
        to the System Console.  In order to see the System Console within JMRI
        select Help >> System console...  It's the "Green Screen".
        </p>

        <a name="menuCfgDef" id="menuCfgDef"></a>
        <h5>Defaults</h5>
        <p><strong>Signal System Type</strong>: Select either Signal Heads or Signal Masts.</p>

        <p><strong>Time values</strong>: These are values that are given to
        each CTC O.S. section as default values when the CTC O.S. section is
        created. The timing values edit boxes are standard CTC values, refer to
        Definitions for more information on each.</p>

        <p><strong>Turnout locks enabled at startup</strong>:  The default is
        checked and the CTC system will lock all of the turnouts automatically
        at startup.  Some layouts require locks to be unlocked at CTC system
        startup for other external initialization requirements.  You can then
        have your dispatcher manually lock all of the locked turnouts before
        the layout starts operation.  Or you can invoke the following lines
        (however you want) in a Jython script file in order to have this done
        automatically by your script(s) after your special external
        initialization requirements are done:</p>

        <div style="margin-left: 2em;"><pre>
        import jmri.jmrit.ctc
        CTCMain = jmri.jmrit.ctc.CTCJythonAccessInstanceManager._mCTCMain
        CTCMain.externalLockTurnout()
        </pre></div>

        <p><strong>No code button delay in milliseconds</strong>:  This is the
        default for newly created O.S. Sections. Individual O.S. sections can be
        changed if needed.  Background: Normal CTC panels always had a code
        button for every O.S. section which means a value of zero is appropriate.
        Certain tower situations did not have a code button(s) present when some
        or all or the O.S. Section(s) were local to the tower.  In this case,
        the tower operator changing either the switch direction and/or signal
        direction levers was enough to transmit the request to the field.  On
        the prototype, there was a built in delay so that the tower operator
        could change both the switch and signal levers before the code was
        transmitted to the local O.S. section. That delay is simulated with
        this value.  Having a larger value will increase  this delay, and a
        large enough value will allow the tower operator to change both the
        switch and signal lever before the codes are transmitted to the field.
        A reasonable value in this case might be 5000 (5 seconds).  Some towers
        had virtually no delay, so enter a value such as 10 milliseconds.</p>

        <a name="menuCfgFlt" id="menuCfgFlt"></a>
        <h5>Fleeting</h5>
        <p><strong>Fleeting toggle sensor</strong>: The sensor used to
        enable/disable fleeting.</p>

        <p><strong>Fleeting enabled at start</strong>: Default is to not enable
        fleeting during startup.</p>

        <a name="menuCfgPat" id="menuCfgPat"></a>
        <h5>Patterns</h5>
        <p>
        Since there will probably be 100's if not 1,000's of JMRI internal
        sensor objects (Prefix "IS:") that need to be created to support all
        of the on-screen objects of a typical CTC installation, it is important
        that you realize how this program works with these "patterns"".  By
        using them, you do not have to spend dozens of hours to enter all of
        this in manually, or in the process entering it in invalid, and have
        the JMRI runtime system complain of problems - back and forth, make a
        change, run JMRI, find another problem, etc.  Using patterns prevents
        this.
        </p>

        <p>
        Patterns are used for all of the internal sensors created by this
        system.  When an O.S. section is created, there are two numbers that
        are associated with that O.S. section: a switch number (always odd)
        and the corresponding signal number (always even and always one more
        than the switch number).
        </p>

        <p>
        The pattern format is IS#:XXX. The "#" charcters in the edit boxes are
        substituted automatically when the CTC O.S. section is first created.
        The respective switch / signal areas use the respective switch # /
        signal # given for the O.S. Section.  If more than one "#", every "#"
        will get the corresponding substituted number.
        </p>

In this way you do not have to do all of the manual typing or selecting
        associated with creating all of these sensor strings.

Patterns usage by this program and its advantages over other methods

        <p>
        Every time an O.S. section is created, the program will apply a set
        of patterns provided by the user: a default set of patterns is
        automatically generated by the program at startup which the user can
        override at will.  This will be explained in more detail later.
        In order to see these default patterns, start the program and choose
        "Configure / Patterns"".
        </p>

Patterns - the most important part for easy "auto magic" entry of information
        <p>
        Changing anything on this screen has no effect on existing information
        in the system.  It is only used when a new O.S. section (Add button) is
        created.  However, you may selectively re-apply this pattern to the
        whole system or individual pieces of the system.  Here"s how:
Reapplying patterns to existing information
Once you"ve changed this screen, you may want the new pattern to be selectively applied.  There are two choices:
Reapply pattern to selected item (a single O.S. section).
Reapply pattern to selected item (a single O.S. section) specific sub-system.
To do 1, get to the main screen, and select a single O.S. section.  The "Reapply patterns to selected item"
button will be enabled.  When you press this button, a confirmation dialog will appear.  Pressing "Yes" will
then take the new pattern specified and completely apply it to all of the O.S. Sections sub-systems.
To do 2, get to the main screen, and select a single O.S. section.  Then at the bottom of the screen, press
the "Edit" button for the sub-system you want to modify.  NOTE: Some sub-systems are not affected by this,
so what follows may not appear.  You will then see a button at the bottom of the sub-system selected with
"Reapply patterns - this form ONLY!".  Pressing that will immediately show you the results of the new
pattern in the edit boxes of that screen.



        <a name="menuCfgGui" id="menuCfgGui"></a>
        <h5>GUI Design</h5>
<p>
GUI Design - automatic creation of the JMRI GUI screen
An additional feature of this program is to be able to automatically create a "standard" USS CTC panel
from the parameters specified elsewhere in this program.  This screen configures those available options.
See "Files created for support...." for more information and procedures for loading them into the JMRI system.
Everything is put in pre-determined locations on the screen.  It is an easy procedure in JMRI to reposition those items.
Caveat emptor
If you do change the locations of these items, JMRI does not modify the files created by this program.
It is not designed to keep track of which file contains which modifications.  Only if you save the panel to
completely different panel name will those changes be saved.  You should completely design the CTC panel using
this program before saving to another name in JMRI, and then begin the final changes to that panel from within JMRI.
Extra blank columns after last defined O.S. Section to create:
Normally, if this is 0, this program creates after the last CTC O.S. Section column specified a "right
edge of CTC machine panel".  If you want additional blank column(s) between your last CTC O.S. Sections
column # and the right edge, enter that number here.
Type of CTC panel:
Presently only USS is available at this time (10/31/2018).  More may be available in the future.
Vertical size:
JMRI provides blank panel items in each of the sizes listed.  Choose one.
Signals on panel
All O.S. Section signals - All of the signals specified in the Signal Direction Indicators sub-system are
created on the screen for you.  This is not a prototype practice, but will help in your development of
SSL (Simple Signal Logic) and CTC design.  You can see the state of the signals in the field with this.  Signal
heads or Signal masts will be created per your specification.
Green/off only (Future feature) - Not available at this time.  The prototype in certain installations have
a single green indicator indicating all signal(s) at that location are displaying stop (red) (green indicator
off) or permissive of some form (one or more signals at that location non-stop (non-red)).
None
Builder Plate
Check this if you want the builder plate on the machine face.
Turnouts on panel
Normally you want to generate turnouts on the CTC track board, which is the default "Generate checked".  If
you don"t want this feature, uncheck this.
Fleeting toggle switch (only if fleeting configured)
Create the toggle switch on the panel if checked.
Analog clock and clock on toggle
Create an analog clock on the panel, along with above it a toggle switch to turn it on / off.
Reload CTC system button
Create a button on the screen to perform this.
CTC Debug on toggle
Ditto.
Future feature: Create variety of track pieces
A variety of track pieces are created on the screen, so that it is easier to "copy / paste" all of these objects as the designer desires.
O.S. Occupancy sensor blinks red when unknown or inconsistent
Normally, JMRI will display an "X" or "?" on a sensor when its state is unknown or inconsistent.  By checking
this checkbox, the program will substitute a blinking indicator for these to draw better attention to them.
I personally use these for optical sensors on my layout because of the number of sensors on my layout causes
LocoNet to loose messages at system startup.

</p>


      <a name="osList" id="osList"></a>
      <h3>OS Section List</h3>

The Prototype CTC machine and this program
A prototype CTC machine is organized by columns (my term).  A single CTC machine column can be blank, or contain an O.S.
section and all of the associated controls.  I begin the numbering of my CTC machine columns with 1.  This column number
has no relation or correlation at all to the Switch or Signal numbers of a normal O.S. section.  It can be as many columns
and your computer screen(s) that will run JMRI can fit and JMRI can support (JMRI is technically unlimited).
OS Sections
A non-blank column always has an O.S. section with a code button associated with it.  An O.S. section always has an odd
switch number and an even signal number associated with it, where the signal number is always one more than the switch number.
Each O.S. section as it is created does not have to be 2 more than the prior switch number entry.  Example: 1, 3, 7, 15, 17....
They do not have to be in ascending sequence, their order has no impact on the program.  However, it is strongly suggested per
prototype practice that they are in ascending sequence.  You may re-order them on the main screen using up/down buttons in case
you enter them out of order, described in another section.

      <p>=== Needs discussion JMRI validation.  A new system cannot have validation until the debug and reload
      sensors exist in the panel xml file.  The basic process is set the configuration options, do the file export process, load
      sensors, save JMRI and restart with the updated panel xml file.  Now setting up OS sections and related Edit buttons
      can be validated. ===
      </p>

    <p>===This section also gets the discussions of the action to the right of the section list.  The edit buttons are listed below.===</p>

      <h3>Edit Buttons</h3>
        <a name="frmCB" id="frmCB"></a>
        <h4>Code button</h4>
        <p>=== form details ===</p>

        <a name="frmSIDI" id="frmSIDI"></a>
        <h4>Signal direction indicators</h4>
        <p>=== form details ===</p>

        <a name="frmSIDL" id="frmSIDL"></a>
        <h4>Signal direction lever</h4>
        <p>=== form details ===</p>

        <a name="frmSWDI" id="frmSWDI"></a>
        <h4>Switch direction indicators</h4>
        <p>=== form details ===</p>

        <a name="frmSWDL" id="frmSWDL"></a>
        <h4>Switch direction lever</h4>
        <p>=== form details ===</p>

        <a name="frmCO" id="frmCO"></a>
        <h4>Call On</h4>
        <p>=== form details ===</p>

        <a name="frmTRL" id="frmTRL"></a>
        <h4>Traffic Locking</h4>
        <p>=== form details ===</p>

        <a name="frmTUL" id="frmTUL"></a>
        <h4>Turnout locking</h4>
        <p>=== form details ===</p>

        <a name="frmIL" id="frmIL"></a>
        <h4>Indication locking</h4>
        <p>=== form details ===</p>

    <a name="ctcFiles" id="ctcFiles"></a>
    <h2>Files</h2>
    <p>
    === Discuss file storage located at user files location, ctc directory. ===
    </p>

    <p>
    === Describe the 3 Editor files, especially CTCSystem.xml ===
    </p>

    <p>
    === Describe the CTC integration of sensors and a populated PE panel.  Warn
    about the "GUI Generated before" feature and its side effects.  Namely, a different panel
    object. ===
    </p>

    <p>
    === The virtual signal file may no longer be needed.  The recommendation of
    a functional ABS implementation means that the required signals already exist. ===
    </p>


    <a name="ctcMain" id="ctcMain"></a>
    <h2>CTCMain</h2>
    <p>
    === Needs to cover starting CTCMain from either the Tools menu or using
    a startup action, which can be either real time or delayed by adding a
    button to the PP main panel. ===
    </p>
    <p>
    === Include the three global icons:  Debug, Reload and Fleeting. Mention
    using the system console to look for errors, especially during CTCMain
    startup.===
    </p>

    <a name="ctcDefinitions" id="ctcDefinitions"></a>
    <h2>Definitions</h2>
    <dl>
      <dt>Interlocking</dt>
      <dd>ddd</dd>

      <dt>Running time</dt>
      <dd>ddd</dd>
    </dl>

      <!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>