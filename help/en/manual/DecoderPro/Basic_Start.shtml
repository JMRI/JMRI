<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>Basic Programming</title><!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
      <h1>The Basic Programmer</h1>

      <h2>The Roster Entry Pane</h2>

      <div align="right">
        <p><a href="Programmer_Setup.shtml">Previous |</a> <a href=
        "Basic_BasicPane.shtml">Next</a></p>

        <p><a href="index.shtml#Basic%20Programmer">Back to
        Index</a></p>
      </div>
      <hr>

      <p>The first action in programming a locomotive with
      DecoderPro&reg; is to fill out the roster entry screen.</p>A
      <b>roster</b> is a database of all locomotives that your
      installation of DecoderPro has programmed. It includes the
      information seen in the screen below:

      <div align="center">
        <img style="width: 636px; height: 556px;" src=
        "images/Basic_Roster.png" alt="basic roster">
      </div>

      <p>Most of these fields are self-explanatory. However, note
      that the first field (<strong>ID</strong>) becomes the file
      name in the Roster for the locomotive you are programming.
      Set up a schema to identify your locomotive to its decoder
      program. i.e. Manufacturer, Loco Type, and Address (e.g.
      Kato_SD40-2_5645). Spaces in the ID field will be changed to
      underscores (_) when the file is written. In a club
      environment, often the ID begins with the owner's name, or
      member number. This way the Roster (which is sorted
      alphabetically) will keep all of an owner's locomotives
      listed together.</p>

      <p>The <strong>Decoder</strong> <strong>Comment</strong>
      field is a good place to add the date you purchased the
      locomotive, price, or any other information you might feel is
      important to record.</p>

      <p>The <input name="Save to Roster" id="Save to Roster"
      value="Save to Roster" type="submit"> button stores the
      current decoder information to your computer hard drive and
      folder where your roster file is located. The default storage
      is the same directory where the program is installed.</p>

      <p>The <input name="button" id="button" value=
      "Reset to Defaults" type="submit"> button can be used to
      return the Roster file to the condition of a new file for the
      type and version of the decoder listed in the roster entry.
      It does NOT change the values in the roster file on your hard
      disk, unless you specifically save it after using this reset
      button. It also is not written to the decoder until you
      specifically select a write operation. It was included in
      DecoderPro so that if you get hopelessly confused in
      proceeding screen to screen entering variables, you can
      return to the manufacturers baseline default set and start
      again.</p>

      <p><br>
      Most decoders will activate the <strong>Reset Menu</strong>
      (next to the File menu at the top of the page). This will
      reset the decoder to the manufacturers default settings for
      all the CVs, or just some of them if the manufacturer has
      several reset routines. It does this by writing directly to a
      CV in the decoder, if the decoder has that feature, CV8 in
      the case of Digitrax. All decoders may not support reset and
      how they work is manufacturer and decoder dependent.</p>

      <p><br>
      One decoder with a lengthy list of reset routines is the QSI
      Revolution decoder, which enables a drop-down list of options
      for resetting the decoder as shown below:</p>

      <p style="text-align: center;"><img style=
      "width: 652px; height: 601px;" src=
      "images/Factory%20Reset.png" alt="factory reset"></p>

      <p>You will note that the decoder address is shown but grayed
      out (or blank if this is a new locomotive in the roster).
      This field is automatically filled in by the program and is
      determined from the address entered using the
      <strong>Basic</strong> tab which we will get to shortly. This
      address is used with the <strong>Ident</strong> function on
      the start page if you wish to recall a locomotive that is
      already in your roster.</p>

      <p><a name="ProgramModes" id="ProgramModes"></a>The
      Programming mode can be changed by selecting mode from
      drop-down list at the bottom of the window. To the left of
      the Drop-down list is the current programming mode that is
      selected.</p>

      <div align="center">
        <img src="images/SetProgramMode.png" alt=
        "Set pogram mode dialog" class="BOXIT" border="5">
      </div>

      <p>There are several <a href=
      "Basic_Mode.shtml"><strong>programming modes</strong></a>.
      JMRI now selects the best mode for you. It determines this
      from the command station type you are using and the decoder
      model you are attempting to program. Usually this will be OK.
      If you find that you are having a problem with programming
      you may try a different mode.</p>

      <p>For most newer decoders, stay with <strong>Paged
      mode</strong> or whichever Direct mode your Command Station
      supports. Your decoder documentation should let you know if
      programming in some other mode is necessary... but if you are
      having problems, experiment. If a mode is not supported for
      the selected decoder and system, that option will be grayed
      out.</p>

      <p>When you make your selection, the programming mode should
      now display to the left of the drop-down list.</p>

      <p>Basic Programming Roster setup for Athearn FP45 n scale
      with Digitrax Tsunami Diesel Genesis OEM decoder.</p>

      <p style="text-align: center;"><img style=
      "width: 636px; height: 556px;" src=
      "images/Basic_Roster01.png" alt="roster"></p>

      <p>Now that we have the Roster information all in order, we
      can continue with programming the decoder.</p>

      <p>But, first a let's talk a bit about Roster management. The
      Main DecoderPro window (the one where we selected the
      programmer) and the initial DecoderPro "Splash" screen have a
      menu called <strong>Roster.</strong> When you click on it you
      get opportunities to modify, print and move your roster
      files. Particularly interesting are
      <strong>Export/Import</strong> and <strong>Copy</strong>.
      Let's say you and a friend have two identical Berkshires, and
      you desire to have yours to be set up just like your friends.
      Now, you could put his loco on your track and read all the
      CVs out and then put them in yours, but if he lives on the
      other coast that's not practical. So, have him use DecoderPro
      to export his loco file and e-mail it to you. You import it
      into DecoderPro, change the address if you wish and then use
      that roster entry to program your loco. Similarly you can
      Copy a roster entry to duplicate one of your own locomotives
      into a second roster entry with it's own address. Details
      about the <strong><a href="Main_Roster.shtml">Roster
      Menu</a></strong></p>

      <p align="center"><img style="width: 456px; height: 334px;"
      alt="roster edit" src="images/RosterEdit.png"><br></p>

      <p>Let's move on to the Basic Programmer.</p>

      <div align="right">
        <p><a href="Programmer_Setup.shtml">Previous |</a> <a href=
        "Basic_BasicPane.shtml">Next</a></p>

        <p><a href="index.shtml#Basic%20Programmer">Back to
        Index</a></p>
      </div><!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
