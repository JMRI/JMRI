<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id$ -->
<html lang="en">
<head>
<title>
JMRI: XBee Network
</title>

<META content="Paul Bender" name="Author">
<META name="keywords" content="XBee Configuration Information for JMRI">

<!-- Style -->
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<LINK REL="stylesheet" TYPE="text/css" HREF="/css/default.css"
        MEDIA="screen">
<LINK REL="stylesheet" TYPE="text/css" HREF="/css/print.css"
        MEDIA="print">
<LINK REL="icon" HREF="/images/jmri.ico" TYPE="image/png">
<LINK REL="home" TITLE="Home" HREF="/">
<!-- /Style -->
</head>

<body>
<!--#include virtual="/Header" -->

  <div class="nomenu" id="mBody">
    <div id="mainContent">

<h1>
JMRI Hardware Guide: XBee Network
</h1>

<h2>Overview</h2>

<p>The <a href="http://www.digi.com/xbee">Digi International XBee Modules</a> are family of wireless communication devices that have their own microcontroller and IO pins that make them useful for many distributed control networks, including on model railroads.</p>

<p>JMRI can communicate with XBee Series 1 and XBee Series 2 modules.  Underlying support for communication is provided by <a href="https://code.google.com/p/xbee-api/">Andrew Rapp's xbee-api library for Java</a>.  This library requires that the XBee module connected to the PC be configured for <a href=https://code.google.com/p/xbee-api/wiki/WhyApiMode>API mode</a>.<p>

<p>JMRI support for the Digi XBee Modules currently includes the ability to passively read digital sensor inputs, as JMRI Sensors, and triggering digital outputs, through the JMRI Lights and Turnouts.</p>

<h2>XBee Module Addressing</h2>

<p>Each XBee module has 5 addresses we need to be aware of:
<ul>
<li>a Channel Number</li>
<li>a 16 bit PAN address</li>
<li>a 16 bit User address</li>
<li>a 64 bit Globally Unique ID</li>
<li>a free-form Node Identifier string</li>
</ul></p>

<p>The IEEE 802.15.4 Channel Number is set by configuring the XBee's CH parameter.  The value of the CH parameter can be any (hex) value from 0x0B to 0x1A.  This corresponds to decimal values 11 to 26.  All XBee modules in the network must be set to the same channel number.</p>

<p>The 16 bit PAN (Personal Area Network) address is assigned by setting the XBee's ID parameter. All XBee modules in the network must be set to use the same PAN.</p>

<p>The 16 bit user address is defined by the XBee's MY parameter.  Some XBee firmware will automatically set the value of MY to be a unique address on the network, but others do not.  If the My parameter is user configurable, it should be a unique address.</p>

<p>The 64 bit globally unique id (GUID) is defined by the factory.  This value is the hex string printed on the underside of each XBee module.  You can also read the value by reading the SH (Serial Number High) and SL (Serial Number Low) parameters of the XBee.  The user cannot change the values of SH and SL.</p>

<p>The free-form Node Identifier is a 20 character text value stored in the XBee's NI parameter.  The Node Identifier should be unique, and may be human readable.</p>

<p>Note: You need to be aware of other devices using IEEE 802.15.4 radio networks that may be operating in the same area.  Digitrax Duplex throttles and Roco MultiMaus Pro radio throttles both use IEEE 802.15.4 as the underlying network layer protocol.  If these devices share a PAN and channel with your XBee modules, the devices are all a part of the same network, and the 16 bit user address must be unique.</p>

<h2>Input/Output pin addressing</h2>
<p>
When creating inputs (Sensors) and outputs (either Lights or Turnouts) in JMRI, the XBee's IO pins can be individually addressed.  To access a single bit, you can use the form:
<p>
<code>ModuleAddress:Pin</code>
</p>
<p>Where ModuleAddress is one of the 16 bit node address, the 64 bit node address, or the Node Identifier string and Pin is an XBee IO pin number.
</p>
<p>
Turnouts may be created using two bits. To specify a turnout created with two bits, you use the following format: 
</p>
<p>
<code>ModuleAddress:Pin1:Pin2</code>
</p>
<p>Where ModuleAddress is one of the 16 bit node address, the 64 bit node address, or the Node Identifier string and Pin1 and Pin2 are XBee IO pin numbers.  The Pin numbers do not need to be consecutive.
</p>

<h3>Automatic Creation of Sensors</h3>
<p>
When an XBee input status message is received indicating one ( or more ) of the XBee IO Pins is used as an input, JMRI will automatically create a sensor for each input pin if it does not already exist.
</p>
<p>When sensors are created automatically, the Node Identifier will be used for the ModuleAddress if it is not blank.  If the Node Identifier is blank, the 16 bit MY address field will be used for the ModuleAddress unless the MY address field contains a broadcast address.  If neither the Node Identifier or the 16 bit MY Address are used for the ModuleAddress, the 64 bit GUID will be used for the ModuleAddress.
</p>

<H2>Supported Hardware</H2>
<p>The JMRI support for XBee devices supports serial interfaces to XBee Networks.  The connection to the computer may be made by any USB or RS232 XBee adapter.  Tested adapters include The Sparkfun Electronics <a href="https://www.sparkfun.com/products/8687">XBee Explorer USB</a>, the Sparkfun Electronics <a href="https://www.sparkfun.com/products/9111">XBee Explorer Serial</a>, and the CISECO <a href="http://shop.ciseco.co.uk/slice-of-pi-add-on-for-raspberry-pi/">Slice of Pi</a> (in conjunction with a Raspberry Pi).
</p>

<h3>Setup</h3>

<ol>
          <li> Connect your XBee adapter using the appropriate cable.
          <li>USB-connected XBee adapters may need to have a driver installed. 
          See the documentation provided by the manufacturer of your XBee Adapter.
          <li> Make sure you have the latest version of JMRI, then go to the 
          preferences panel of a JMRI-based program.  This opens automatically 
          the first time a program is run, or you can select it from the "Edit"
          menu
          <li>Select "IEEE 802.15.4 Network" from the System Manufacturer 
          selection box.
          <li>Select "XBee Network" from the System Connection selection box.
          <li>You can then select the proper serial port in the Serial port 
          selection box under Settings.

          Note that the USB XBee adapters will appear as a serial port.

          <li> The "Connection Prefix" is used to help JMRI communicate 
          separately with multiple "connections" to layout hardware. Each 
          "connection" must have a unique identifier, which is specified as
          the "Connection Prefix". By default, the first XBee connection is 
          given a prefix of "Z", and additional XBee networks are given 
          prefixes like "Z1", "Z2", ... Most users should be able to use the 
          default "Connection Prefix" value provided by the JMRI tools. 

          <li>When a JMRI tool is configured for more than one connection, 
          each connection gets a menu item on the main JMRI tool window. To 
          help users differentiate between their different connections, each 
          connection has a "Connection Name", which is used as the name of 
          the associated menu item on the main JMRI tool window. Users may 
          change the "Connection Name" for any connection to suit their needs.

          <li>The XBee adapter "Additional Connection Settings" provides 
          access to the Baud rate for the connection.  Make sure the 
          selected Baud rate matches the port speed setting of your XBee. 

          <li>The "Configure XBee Nodes" button opens the 
          <a href="XBeeNodeConfigurationTool.shtml">XBee Node Configuration tool</a>.  
          If you save preferences after nodes are created, node address 
          information will be stored with the preferences.

          <li> Click "Save".  You'll be asked if it's OK for the program to
          quit, click "Yes".</li>
          <li> Restart the program. You should be up and running.
</ol>

<!--#include virtual="/Footer" -->
</body>
</html>

