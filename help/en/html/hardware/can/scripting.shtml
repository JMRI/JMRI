<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI Hardware Support - CAN Network - Scripting</title>
  <!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div class="nomenu" id="mBody">
    <div id="mainContent">
      <h1>Hardware Support: CAN - Scripting</h1>

      <p>JMRI scripting can be used to send and receive CAN frames.
      You can use this to create test routines for boards under
      development, etc.</p>

      <p>This page describes the CAN extensions for JMRI scripting.
      For more information on JMRI scripting itself, see the
      <a href="../../tools/scripting/index.shtml">Scripting Help
      pages</a>.</p>

      <p>There's a basic <a href=
      "../../../../../jython/CanExample.py">CanExample.py</a>
      sample script in the jython directory.</p>

      <h2>Scripting Code Examples</h2>

      <h3>Sending CAN Frames</h3>

      <p>CAN frames are created as objects, then queued for
      transmission. The header (ID) and data are handled
      separately.</p>
      <pre style="font-family: monospace;">
frame = jmri.jmrix.can.CanMessage(2)  # will load 2 bytes
frame.setId(0x123)
frame.setElement(0, 0x45)
frame.setElement(1, 0x67)
jmri.jmrix.can.TrafficController.instance().sendCanMessage(frame, None)
</pre>

      <h3>Receiving CAN Frames</h3>

      <p>A script can listen for CAN frames as they're received
      from the bus, and separately for CAN frames that are being
      transmitted on the bus by JMRI. The CanListener interface
      provides these separately via "reply" and "message"
      procedures, respectively.</p>
      <pre style="font-family: monospace;">
class MyCanListener (jmri.jmrix.can.CanListener) :
    def message(self, msg) :
        # handle transmitted CAN frames by ignoring them
        return
    def reply(self, msg) :
        # handle received CAN frames by printing their content
        print "received Frame"
        print "ID: 0x"+java.lang.Integer.toHexString(msg.getId())
        print "content: ", msg.toString()
        return
    
jmri.jmrix.can.TrafficController.instance().addCanListener(MyCanListener())
</pre><a name="documentation" id="documentation"></a>

      <h2>Documentation</h2>

      <h3>JMRI Help</h3>

      <ul>
        <li>Back to the <a href="index.shtml">Main CAN Network
        upport Help page</a>.</li>
      </ul><!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
