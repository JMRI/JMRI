<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI Hardware Support - CAN Network</title><!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div class="nomenu" id="mBody">
    <div id="mainContent">
      <h1>Hardware Support: CAN Network</h1>

      <ul class="snav">
        <!-- TOC -->

        <li><a href="#hardware">Hardware</a></li>

        <li><a href="#connect">Connecting</a></li>

        <li><a href="#tools">JMRI CAN Tools</a></li>

        <li><a href="#documentation">Documentation</a></li>
      </ul>

      <p>There's an emerging trend to develop model-railroad
      control systems that are based on standard 
      <a href="https://en.wikipedia.org/wiki/CAN_bus">CAN network</a>
      technology. JMRI provides support for the development and use
      of these. Two systems are described below.</p>

      <h2>CAN Implementations</h2>

      <h3><a href="../openlcb/index.shtml">OpenLCB</a></h3>
      <img src=
      "http://www.openlcb.org/trunk/web/logo-ajs-dph.png" align=
      "right" alt="OpenLCB logo" height="43" width="104">
      <p>OpenLCB is a group of hobbyists and manufacturers who have
      come together to produce a future-oriented layout control
      bus, also called <a href=
      "http://openlcb.org">OpenLCB</a>.<br>
      JMRI includes <a href="../openlcb/index.shtml">basic support
      for OpenLCB</a>, and more is being developed along with
      OpenLCB itself.</p>
      <img src=
      "http://www.nmra.org/common/nmra_logo.jpg" align="right" alt=
      "NMRA logo" height="45" width="55">

      <p>The <a href="http://www.nmra.org">NMRA</a> has <a href=
      "http://www.nmra.org/news/proposed-standard-layout-command-control-lcc-published-comments#">
      decided</a> to adopt OpenLCB and standardize it as <a href=
      "http://www.nmra.org/index-nmra-standards-and-recommended-practices#node-171">
      Layout Command Control (LCC, formerly
      NMRAnet)</a>.</p>
      


      <h3><a href="cbus/index.shtml">MERG CBUS</a></h3>

      <img src=
      "https://www.merg.org.uk/merg_images/merg_logo.png" align=
      "right" alt="MERG logo" height="45" width="100">
      
      
      
      <p>
      CBUS is hosted under the umbrella of the Model
      Electronic Railway Group (<a href=
      "https://www.merg.org.uk/">MERG</a>), following years of 
      development by MERG members Mike Bolton and Gil Fuchs.
      <br >
      Their intention was to develop a system for comprehensive 
      layout control based on a general purpose Layout Control Bus (LCB).
      </p>


      <p>
      3 wires run between a minimum of 2 modules : Low, Hi and Ground.
      CBUS modules can be thought of as </p>
      <ul>
      <li>Consumers eg. a CANSOL solenoid module listening on the CANBUS for 
      a taught event to throw a turnout</li>
      <li>Producers, eg. a  CANACE3 Control Panel Switch sensing module,
      sending a CBUS event when a physical control panel button is 
      pressed or a toggle switch changed ( multiplexing allows 128 
      switches on 1 module)</li>
      <li>Or both, eg a CANMIO Servo module listening for taught 
      CBUS events to change turnout positions, then sending its own 
      events on servo start moving, servo mid-point, also sending an 
      event when completing moving the servo to its final position.</li>
      </ul>
            <img src="http://mergcbus.sourceforge.net/cbus.png" align=
      "right" alt="CBUS logo" height="50" width="100">
      
      <p>
      <a href=
      "https://www.merg.org.uk/merg_resources/cbus.php">Extensive
      documentation</a> is available for the CBUS protocol, with 
      many MERG module kits available for running a layout.
      <br >
      The 3,000+ MERG members are encouraged to to build and design their 
      own CBUS modules, and with MERG being over 50 years old, 
      there is a strong peer review process behind CBUS.
      <br>
      Module firmware updates can be performed over the CBUS network 
      </p>
      
      <p>JMRI includes full <a href="cbus/index.shtml">support for
      CBUS</a> events, also <a 
      href="https://www.merg.org.uk/merg_resources/cbus-dcc.php">DCC 
      via a MERG CANCMD</a> kit 
      ( a fully featured DCC Command Station, mini booster and 
      track programmer ).  This interfaces to JMRI and / or MERG 
      handheld controllers over a CBUS network.
      </p>
      
      
      <h2><a name="hardware" id="hardware">Supported Hardware</a></h2>
      <h3>Computer Interfaces</h3>

      <h4>Various CAN-USB adapters are available:</h4>

      <dl>
        <dt>TCH Technology</dt>

        <dd><a href=
        "http://www.tchtechnology.com/products/can_usb/">TCH
        Technology CAN/USB</a> which provides a high-speed
        connection for model railroad use</dd>

        <dt>grid connect</dt>

        <dd><a href=
        "http://www.gridconnect.com/canboandto.html">GridConnect</a>
        CAN_RS, which is also the protocol used by the MERG CAN_RS
        board</dd>

        <dt>lawicell</dt>

        <dd><a href="http://canusb.com/">LAWICEL AB</a> CANUSB and
        CAN232 adapters.</dd>
        
        <dt>MERG CANUSB4</dt>
        
        <dd><a href="https://www.merg.org.uk/kits.php">MERG CANUSB4</a>
        A CBUS to USB interface, available in kit form to MERG members.
        <br >
        JMRI can connect directly to the CANUSB4, alternatively CBUS 
        Server is a <a href="https://nodejs.org/en/">Node.js</a> 
        program to allow multiple network connections to a MERG CANUSB4, 
        enabling multiple interfaces to connect to the CAN network.
        <a href="https://github.com/phillipsnj/mergCbusServer">MERG CBUS Server</a>
        </dd>
        
        
        
      </dl>
      
      <h4>Other CAN Hardware Interfaces</h4>
      <dl>
        <dt>MERG CAN Pi CAP</dt>

        <dd>The <a href="https://www.merg.org.uk/kits.php">CANPICAP</a>
        enables direct CBUS connection to a Raspberry Pi via its 
        40 pin I/O connector, available in kit form to MERG members.</dd>
        </dl>
        
        <dl>
        <dt>Rocrail </dt>
        <dd> The <a href="https://wiki.rocrail.net/doku.php?id=can-gca1e-en">
        CAN-GC1e Ethernet module</a>
        can connect to JMRI via MERG Network Interface</dd>
        </dl>

      <h2><a name="connect" id="connect">Connecting</a></h2>
      

      <p>JMRI can provide the usual Sensor and Turnout features,
      once configured for <a href=
      "../openlcb/index.shtml">OpenLCB</a> or <a href=
      "cbus/index.shtml">CBUS</a> "Events".</p>

      <p>JMRI can connect to CAN networks in several ways:</p>

      <h3>Via USB</h3>

      <p>To use any of the above adapters, select the appropriate
      device/connection type in the JMRI Preferences. If using a
      GridConnect or Lawicel device, be sure to set the appropriate
      baud rate under Advanced Preferences.<br>
      The TCH Technology adapter does this automatically, so no
      setting is required.
      <br>
      To connect a MERG CANUSB4, select "MERG" as system manufacturer,
      then "CAN via MERG CAN-RS or CAN-USB" as system connection.
      No additional connection settings are required.
      </p>

      <h3>TCP/IP Network</h3>

      <p>It's also possible to attach via a TCP/IP connection
      (EtherNet or WiFi). This can either go to another JMRI
      instance running e.g. an OpenLCB hub, or directly to an
      IP-CAN adapter. To configure one of these, open the
      Connections tab in the JMRI Preferences.</p>
      
     <h4>OpenLCB</h4>

      <ul>
        <li>Select as System Manufacturer "OpenLCB"</li>

        <li>For System Connection, select "CAN via GridConnect
        Network Interface"</li>

        <li>Under settings, enter the IP address and TCP/UDP port
        for the destination.
          <p>OpenLCB CAN Adapters advertise under mDNS/Bonjour, so
          you can use that to specify the IP address if JMRI is on
          the same network segment as your adapter. In that case,
          put "openlcbcan.local." (note trailing period!) in the IP
          address field.</p>
          <p>The port number for OpenLCB adapters is 23 by
          default.</p>
        </li>

        <li>Set the connection protocol as desired, e.g. "OpenLCB",
        the Connection Prefix (usually "M") and Connection Name as
        needed.</li>
        <li>Click Save, and restart.</li>
      </ul>
      
     <h4>MERG CBUS</h4> 
      <ul>
      <li>Select as system manufacturer MERG.</li>
      <li>For system connection, select CAN via MERG Network Interface</li>
      <li>Under settings, enter the IP address / hostname of the device with
      the physical connection to your CBUS network, eg "192.168.0.5"
      </li>
      <li>The TCP / UDP port number used is 5550 for CANServer / CANPICAP</li>
      <li>Connection protocol - MERG CBUS</li>
      <li>Connection prefix is normally "M" for MERG CBUS.</li>
      <li>Click Save, and restart.</li>
      </ul>
      
      

      <h2><a name="tools" id="tools">JMRI CAN Tools</a></h2>
      <ul>
        <li>JMRI provides a basic <a href=
        "../../../package/jmri/jmrix/AbstractMonFrame.shtml">Monitor
        tool</a> for watching traffic on a CAN bus.</li>
        
        <li>For development, there are <a href=
        "scripting.shtml">CAN Scripting tools</a> for sending and
        receiving CAN frames. These can be very useful in testing
        hardware, etc.</li>

        <li>OpenLCB
        <a href="../../../package/jmri/jmrix/openlcb/swing/send/OpenLcbCanSendFrame.shtml">
        Send Frame tool</a> The "Send OpenLCB Frame" tool lets you directly send 
        CAN frames, and certain kinds of OpenLCB messages, eg "Verify Node" and 
        "Send Request Consumers"
        </li>
        
        
        <li><img src=
      "images/MERG_Menu.png" alt="MERG menu" align="right"
      height="134" width="188">The MERG menu contains 5 tools:
        <ul>
        <li>Console</li>
        <li>Send Frame</li>
        <li>Event Capture Tool</li>
        <li>Event Table</li>
        <li>Node Config Tool</li>
        </ul>
        </li>
        
        <li>CBUS <a href=
        "../../../package/jmri/jmrix/can/swing/send/CanSendFrame.shtml">
        Send Frame tool</a> can be used for sending CBUS events both manually and repeatedly, great for testing.</li>
        
      </ul>
      
      <a name="documentation" id="documentation"></a>

      <h2>Documentation</h2>

      <h3>JMRI Help</h3>

      <p><a href="../openlcb/index.shtml">OpenLCB</a> Help</p>

      <p><a href="cbus/index.shtml">CBUS</a> Help</p>
      
      <p><a href="../../tools/scripting/Examples.shtml">CanExample.py</a> - Sample script to show how to send and receive CAN Frames</p>
      
      <h3>Third Party info</h3>

      <p><a href="http://www.openlcb.org">OpenLCB.org</a></p>
      <p><a href="https://www.merg.org.uk">merg.org.uk</a></p>
      <p><a href="https://en.wikipedia.org/wiki/CAN_bus">wikipedia.org/wiki/CAN_bus</a></p>
      
      <!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
