<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI Hardware Support - DCC4PC</title><!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div class="nomenu" id="mBody">
    <div id="mainContent">
    <p>The DCC4PC hardware is a combined block occupancy detector and RailComm reader built into one. 
    each board allows for up to 16 blocks to be detected with RailComm feedback on each.
    <p>To get the full potential of RailCom this must be used with a system that generates a RailComm cutout in 
    the track signal, along with decoders that support RailComm feedback
    
      <h1>Hardware Support: DCC4PC</h1><a name="hardware" id=
      "hardware"></a>

      <p>JMRI connects to the DCC4PC using its own OmniBus protocol rather the TAMs emulated mode.</p>

      <h3>Sensors</h3>
<p>Sensors are automatically generated for the first six boards (boards addressed 0 -5) during the initialisation of the connection.</p>

<p>Additional sensors for boards above address 5 can be added using the sensor table, only the first sensor on the board needs to be entered, as the remainder on that board will automatically be populated when it is discovered.</p>

<p>The system name of a sensor is made up in the format of DS1:01, where "D" is the system name for Dcc4Pc, "S" means sensor, "1" is the board address, and "01" is the port on that board.</p>

      <h3>Reporters</h3>
      <p>Reporters are automatically created when sensors are added as the two are tide together, there is no requirement to manually create these.
      
      <h3>Programming</h3>
      <p>The DCC4PC system will allow for read back of CV values using the ops-mode programming, however this is dependant upon having RailComm enabled hardware.
      
      <a name="tools" id="tools"></a>
      <h2>JMRI DCC4PC Tools</h2>
      <ul>
        <li>DCC4PC Command Monitor</li>
                <p>This lists all the processed commands sent and received to/from the interface, this excludes commands sent between JMRI and the interface in the date retrieval process.</p>

        <li>Send DCC4PC Command</li>
            <p>Allow commands to be sent to the computer interface or a detection board, also referred to as a child board.  Commands written in hex, should be prefixed with 0x, followed by the commands with no spaces, eg 0x0b020a</p>
        <li>DCC4PC Info</li>
            <p>Retrieves the information for the Computer Interface Device.</p> 
        <li>DCC4PC Reader Boards</li>
            <p>Displays the current information of all the detection boards that have been configured.  It is also possible to change the address of a board, please note that when doing this it will generate a new set Sensors and Reporters with the new address, it will not remove the old sensors or move any other details across.

      </ul>
      <!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
