<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id$ -->
<html lang="en">
<head>
  <title>
 	JMRI: Tools
  </title>

  <meta name="Author" content="Bob Jacobsen">
  <meta name="keywords" content="hardware layout java model railroad JMRI CMRI decoderpro panelpro tools loconet lenz nce easydcc dcc nmra">

<!-- Style -->
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>
  <div id="container">

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

      <div id="mainContent">
      <!-- Page Body -->
        <h1>
		JMRI: Tools
        </h1>

<p>	JMRI provides several tools that are optimized for specific purposes.
				
<h2>General tools</h2>
		  <p>The following tools in the Tools menu work with most DCC hardware connections:		  
	    <dl>

		<dt><h3><a href="Turnouts.shtml">Turnouts</a></h3></dt>
		<dd>
			JMRI calls just about any output to the layout a "Turnout". The Turnout object has 2 states: Closed (On) and Thrown (Off). <br/>For outputs such as <a href="#lights">Lights</a> and <a href="#signals">Signals</a> JMRI provides special objects (see below).
		</dd>

		<dt><h3><a href="Sensors.shtml">Sensors</a></h3></dt>
		<dd>
		    A Sensor is JMRI's way of representing an input from the layout.
		</dd>

			<dt><h3><a href="throttle/ThrottleMain.shtml">Throttles</a></h3></dt>
		<dd>
		    You can open multiple software throttles to run
		    your DCC locomotives.
		</dd>

		<dt><h3><a href="consisttool/ConsistTool.shtml">Consisting</a></h3></dt>
		<dd>
		    JMRI provides tools for managing locomotive consists.
		</dd>

		<dt><h3><a name="lights" href="Lights.shtml">Lights</a></h3></dt>
		<dd>
		    Lights are digital output bits that function as on/off switches. 
		    Lights were created to provide easy control for fascia panel
		    lights and scenery lighting. 
		    Lights can also be used for any purpose that requires an 
		    on/off switch. A light can be used, for example, to activate 
		    an electromagnetic decoupler for a pre-determined time in 
		    response to a fascia panel button.
		</dd>

			<dt><h3><a name="signals" href="signaling/index.shtml">Signals</a></h3></dt>
		<dd>
		    Signal Heads and Masts are how JMRI represents
		    and controls signals on a layout. 
		    They are a specific kind of output device that can be set to various 
		    Appearances (Red, Yellow, Green, Flashing Yellow, etc.) or Aspects (Stop, Clear, Approach limited etc.) following prototype rules.
		</dd>

		<dt><h3><a href="Reporters.shtml">Reporters</a></h3></dt>
		<dd>
		    Reporters are JMRI's way of representing information reported back from the layout and can contain arbitrary information. 
		</dd>
			
		<dt><h3><a href="Memories.shtml">Memory Variables</a></h3></dt>
		<dd>
		    A JMRI Memory Variable can hold any type of object specified by the user. 
		</dd>
			
		<dt><h3><a href="Routes.shtml">Routes</a></h3></dt>
		<dd>
		    Routes are a tool for driving multiple turnouts when
		    something happens on the layout.  You can have a
		    panel switch through all the turnouts in your yard throat, 
		    etc. They can also change the status of Sensors, 
		    play sound files, and invoke scripts.  They
		    have some simple logic capabilities for deciding when
		    to set the route's outputs.
		</dd>

		<dt><h3><a href="LRoutes.shtml">LRoutes</a></h3></dt>
		<dd>
		    LRoutes extend the capabilities of Routes by 
                    implementing them as a Logix. LRoutes can be defined 
                    with an unlimited number of Sensors, Turnouts, Lights, 
                    and/or SignalHeads for actions or controls.  LRoutes
                    provide an easy starting point for creating new Logix
                    since thay may be extended to include any of the 
                    Logix capabilities.
		</dd>

		<dt><h3><a href="Logix.shtml">Logix</a></h3></dt>
		<dd>
		    A Logix is a tool for entering powerful logical
		    expressions that can control parts of a layout.
		    Each one can monitor multiple inputs and logical
		    operations through containing a number of Conditional
		    expressions, each of which can take simple actions.
		    For more powerful control, combine the logical
		    reasoning of a Logix with the powerful output
		    controls of a Route.
		</dd>

        <dt><h3><a href="fastclock/index.shtml">Fast Clocks</a></h3></dt>
        <dd>
            JMRI can both provide various types of fast clocks
            on the computer screen, and also work with the
            fast clocks already installed on your DCC layout.
        </dd>

   		<dt><h3><a href="speedometer/index.shtml">Speedometer</a></h3></dt>
		<dd>
		    A tool for determining the scale speed of your
		    locomotives.  You can use this while setting them up,
		    to catch speeders, or for whatever you'd like.
		</dd>
	
		<dt><h3><a href="Audio.shtml">Audio</a></h3></dt>
		<dd>
		    JMRI audio objects hold information about sounds that can be played-back by the computer. 
		</dd>
			
	
		<dt><h3><a href="../../package/jmri/jmrit/dispatcher/Dispatcher.shtml">Dispatcher</a></h3></dt>
		<dd>The Dispatcher tool provides functions and organizes information
		relating to dispatching trains on a model railroad layout. It's main
		function is the allocation of sections of track to various trains running
		around the layout.
		</dd>
		
		
		<dt><h3><a href="../../package/jmri/jmrit/operations/Operations.shtml">Operations</a></h3></dt>
		<dd>
		The Operations tool allows you to produce computer generated
		manifests and switch lists for your railroad from lists of rolling stock, trains and destinations.
		</dd>
	  </dl>
	  
	<h2><a href="../apps/LocoTools/index.shtml">LocoNet-specific Tools</a></h2>
		  <p>The following tools are available in the LocoNet menu when JMRI is connected to a (Digitrax) LocoNet DCC layout: <!-- As of version 3.7.3 -->
		    <ul>
		    <li><dfn>Monitor LocoNet</dfn>
		    <li><dfn>Monitor Slots</dfn>
			<li><dfn>Monitor Clock</dfn>
		    <li><dfn>Monitor LocoNet Interface Statistics</dfn>
				<li><dfn>Configuration Tools:</dfn></li>
					<ul><li><dfn>Configure BDL16x</dfn>
		    <!-- <li><dfn>Configure LocoIO</dfn> no longer supported, use DP3 -->
			<li><dfn>Configure PM4x</dfn>
		    <li><dfn>Configure SE8c</dfn>
			<li><dfn>Configure DS64</dfn>
		    <li><dfn>Configure Command Station</dfn>
		    <li><dfn>Configure LocoNet ID</dfn>
		    <li><dfn>Configure Duplex Group</dfn>
						</ul>
		    <li><dfn>Send LocoNet Packet</dfn>
		    <li><dfn>Send Throttle Message</dfn>
		    <li><dfn>Select PR3 Mode</dfn>
		    <li><dfn>Download Firmware</dfn>
		    <li><dfn>Download Sounds</dfn>
		    <li><dfn>Edit Sound Project (SPJ) File</dfn>
		    <li><dfn>Start LocoNet Server</dfn>
		    </ul>

   	<h2><a href="scripting/index.shtml">Scripting JMRI</a></h2>
    If JMRI lacks a preprogrammed tool to do what you want,
    you can write a Script that does exactly what's needed, including user interaction. Instead of defining our own language, 
    <a href="scripting/index.shtml">JMRI Scripting</a>
    uses the
    "Python" language that's commonly used in web development. Although it
    will take a little time to get used to it, in the end it provides
    a lot of power to control your layout anyway you'd like.
		  <p>Run your own scripts or scripts shared by other JMRI user from the Panels > Run Script... menu.

<!--#include virtual="/Footer" -->

      </div><!-- closes #mainContent-->
    </div> <!-- closes #mBody-->
  </div> <!-- closes #container -->
</body>
</html>

