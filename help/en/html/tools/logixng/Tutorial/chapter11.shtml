<!DOCTYPE html>
<html lang="en">

<head>
  <title>LogixNG Tutorial - Chapter 11</title>
  <meta name="author" content="Daniel Bergqvist">
  <meta name="author" content="Dave Sand">
  <meta name="keywords" content="jmri LogixNG tutorial tables">

  <!--#include virtual="/Style.shtml" -->

</head>

<body>
  <!--#include virtual="/Header.shtml" -->

  <div id="mBody">

    <div id="mainContent" class="no-sidebar">
      <h1>LogixNG Tutorial - Chapter 11</h1>

      <h2>LogixNG Tables</h2>

      <p>LogixNG Tables are two dimensional data structures, like a spreadsheet.</p>

      <p>Example:</p>

      <div style="margin-left: 2em;">
        <table>
          <tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th></tr>
          <tr><th>&nbsp;1&nbsp;</th><td>IQT22</td><td>Yard table</td><td></td><td></td></tr>
          <tr><th>&nbsp;2&nbsp;</th><td></td><td>West yard</td><td>East yard</td><td>North yard</td></tr>
          <tr><th>&nbsp;3&nbsp;</th><td></td><td colspan="3">Left entrance of the yard</td></tr>
          <tr><th>&nbsp;4&nbsp;</th><td>Leftmost turnout</td><td>IT101</td><td>IT201</td><td>IT301</td></tr>
          <tr><th>&nbsp;5&nbsp;</th><td>Left turnout</td><td>IT103</td><td>IT203</td><td>IT303</td></tr>
          <tr><th>&nbsp;6&nbsp;</th><td></td><td colspan="3">Right entrance of the yard</td></tr>
          <tr><th>&nbsp;7&nbsp;</th><td>Rightmost turnout</td><td>IT112</td><td>IT212</td><td>IT312</td></tr>
          <tr><th>&nbsp;8&nbsp;</th><td>Right turnout</td><td>IT114</td><td>IT214</td><td>IT314</td></tr>
        </table>
      </div>

      <p>A table can be used to create a lookup table. It's accessed by either its
      system name or its user name, followed by a left square bracket, the name of the
      row, a comma, the name of the column, and a right square bracket.</p>

      <p>Instead of the names of the row and column, it's also possible to use the row
      number or the column number. Note that row 1 has the system name and user name of
      the table, row 2 has the names of the columns, and column 1 has the names of the
      rows. Note that for columns, 1 is column A, 2 is column B, 22 is V, 23 is W, 26 is Z,
      27 is AA and 28 is AB.</p>

      <p>Note that spreadsheet software, like Excel and LibreOffice Calc, has cell
      &lt;column letter&gt;&lt;row number&gt; while references in JMRI has table[row,column].
      Example: Cell B3 is table[3,2], since B3 is row 3 and column 2.</p>

      <p>Example from the table above. These examples assume that IM3 has the value
      'West yard', IM4 has the value 'Rightmost turnout' and IM5 has the value 'IQT22'.</p>

      <div style="margin-left: 2em;">
        <table>
          <tr><td>Cell</td><td>Value</td><td>Note</td></tr>
          <tr><td>IQT22[1,1]</td><td>IQT22</td><td>Cell A1 has the system name of the table</td></tr>
          <tr><td>IQT22[1,2]</td><td>Yard table</td><td>Cell B1 has the user name of the table</td></tr>
          <tr><td>IQT22[2,2]</td><td>West yard</td><td>Cell B2 has the name of column B</td></tr>
          <tr><td>IQT22[4,1]</td><td>Leftmost turnout</td><td>Cell A4 has the name of row 4</td></tr>
          <tr><td>Yard table[4,1]</td><td>Leftmost turnout</td><td>The user name of the table can be used to access the table</td></tr>
          <tr><td>IQT22[5,3]</td><td>IT203</td><td>Cell C5 has the value 'IT203'</td></tr>
          <tr><td>IQT22[Left turnout,North yard]</td><td>IT303</td><td>Column 'North yard' and row 'Left turnout' has the cell D5 with the value 'IT303'</td></tr>
          <tr><td>Yard table[Left turnout,North yard]</td><td>IT303</td><td>Column 'North yard' and row 'Left turnout' has the cell D5 with the value 'IT303'</td></tr>
          <tr><td>IQT22[Leftmost turnout,{IM3}]</td><td>IT101</td><td>IM3 is in curly brackets and have the value 'West yard' so this points to cell B4</td></tr>
          <tr><td>IQT22[{IM4},East yard]</td><td>IT212</td><td>IM4 is in curly brackets and have the value 'Rightmost turnout' so this points to cell C7</td></tr>
          <tr><td>IQT22[{IM4},{IM3}]</td><td>IT112</td><td>Column {IM3} and row {IM4} points to cell B7</td></tr>
          <tr><td>{IM5}[{IM4},{IM3}]</td><td>IT112</td><td>Even the table name can be accessed indirectly</td></tr>
        </table>
      </div>

      <p>Note that a Memory can point to a table. For example, if the memory IM7 has
      the value '{Yard table[{IM3},Leftmost turnout]}', LogixNG will look at IM7, and
      find that it's value is in curly brackets. It will then resolve the value inside
      these curly brackets, which is 'Yard table[{IM3},Leftmost turnout]'. It will then
      resolve the value of IM3 which has the value 'West yard'. It will then get the
      table cell 'Yard table[West yard,Leftmost turnout]' which is cell B4 with the
      value 'IT101'.</p>

	  <p>The ActionForEach iterates over a comma separated list of values. It can be used
	  with tables by using the keywords __columns__ and __rows__ . Note that it's two
	  underscore characters before and after. {IQT1[__columns__]} gives a comma separated
	  list of all the column names in the table IQT1. {IQT1[__rows__]} gives a comma
	  separated list of all the row names in the table IQT1. It's also possible to write
	  {Yard table[__columns__]} and {Yard table[__rows__]}. You can even use this syntax
	  in ActionMemory to assign a Memory the list of column names or row names. Note
	  however that column names or row names that are empty is seen as colums or rows with
	  a comment and therefore they are not included.</p>

      <p>The tables are created using a spreadsheet program and the exported to
      a <strong><em>TAB</em></strong> delimited CSV file.
      PanelPro Tools &rArr; Tables &rArr; LogixNG &rArr; LogixNG Tables is used to load the table
      into JMRI memory.  See
      <a href="../.././../help/en/package/jmri/jmrit/beantable/LogixNGTableTable.shtml">
      LgoixNG Tables Table</a> for details.  The table is not stored in the PanelPro data
      file.  When the data file is loaded, a reference to the table will be used to
      the CSV file into memory.  The CSV file should be located in the user files
      location along with the PanelPro data file.





	  <h3>Note</h3>

      <p>If a name has the characters comma, left or righ square bracket or left or right
	  curly brackets, these characters must be escaped by preceding them with a backslash.
	  Examples: \, \[ \] \{ \} \\</p>

	  <p>If a reference contains a backslash, it will take some more time to evaluate it
	  than if it doesn't contain any backslash. So if it's possible to not use these special
	  characters in references or names of beans, it's recommended.</p>


      <h3>Creating the CSV File</h3>


<!-- ============ -->

<!--

<h2>Tables - working with templates</h2>
<p>
<img src="images/chapter10_the_yards.png">
<p>

The panel "Chapter 10 - Tables" has four yards:
<ul>
<li>North yard</li>
<li>West yard</li>
<li>East yard</li>
<li>South yard</li>
</ul>

The first three yards are identical and the forth yard has an extra siding. Each track has a sensor that detects if the
track is occupied or not and each turnout has a signal mast. The rules for these yards are:

<ul>
<li>If the track that the turnout is pointing to is occupied, the mast should show "Stop".</li>
<li>If the track that the turnout is pointing to is the main line, the mast should show "Slow Clear".</li>
<li>If the track that the turnout is pointing to is not the main line, the mast should show "Slow Approach".</li>
</ul>
These rules and the placement of the signals may be not be prototypical, but the purpose of this example is to show how
to setup the rules in LogixNG.

<p>

<h2>How to create one ConditionalNG that controls all four yards?</h2>

Lets create an imaginary template yard. It will have three turnouts, three signals and three sensors.
<p>
<img src="images/chapter10_template_yard.png">
<p>

First we need to give the named beans on the template yard unique names. In this example, we have these names for the
named beans in the template yard. Track 1 is the main track.
<ul>
<li>Left turnout</li>
<li>Middle turnout (only used for the South yard)</li>
<li>Right turnout</li>
<p>
<li>Left mast</li>
<li>Middle mast (only used for the South yard)</li>
<li>Right mast</li>
<p>
<li>Sensor track 1</li>
<li>Sensor track 2</li>
<li>Sensor track 3 (only used for the South yard)</li>
</ul>

LogixNG has support for CSV tables, comma separated tables, but LogixNG needs the tables to be TAB-separated. These
files can created by a spreadsheet software, for example Open Office or MicroSoft Excel, and then exported as a CSV
file. We can create a CSV file with a table of the yards and their named beans. For example, you can let each column
represent each yard and let each row represent each named bean.
<p>
<table border="1" cellspacing="0" cellpadding="2">
<tr><td></td><td>&nbsp;</td><td></td><td></td><td></td></tr>
<tr><td></td><td>North yard</td><td>West yard</td><td>East yard</td><td>South yard</td></tr>
<tr><td>Left turnout</td><td>IT_10_1</td><td>IT_10_3</td><td>IT_10_5</td><td>IT_10_7</td></tr>
<tr><td>Middle turnout</td><td></td><td></td><td></td><td>IT_10_9</td></tr>
<tr><td>Right turnout</td><td>IT_10_2</td><td>IT_10_4</td><td>IT_10_6</td><td>IT_10_8</td></tr>
<tr><td>Left mast</td><td>Mast_10_1</td><td>Mast_10_3</td><td>Mast_10_5</td><td>Mast_10_7</td></tr>
<tr><td>Middle mast</td><td></td><td></td><td></td><td>Mast_10_9</td></tr>
<tr><td>Right mast</td><td>Mast_10_2</td><td>Mast_10_4</td><td>Mast_10_6</td><td>Mast_10_8</td></tr>
<tr><td>Sensor track 1</td><td>IS_10_1</td><td>IS_10_3</td><td>IS_10_5</td><td>IT_10_7</td></tr>
<tr><td>Sensor track 2</td><td>IS_10_2</td><td>IS_10_4</td><td>IS_10_6</td><td>IT_10_8</td></tr>
<tr><td>Sensor track 3</td><td></td><td></td><td></td><td>IT_10_9</td></tr>
</table>
<h4>Important</h4>

<b>The first row in the table has special meaning. Leave the first row empty for now.</b>
<p>
The second row has the headers for the columns. The first column has the headers for the rows.
<p>
The CSV files LogixNG uses must be separated with tab, not comma. In OpenOffice Calc, select {Tab} as the field
delimiter.
<p>
<b>You must not use single or double quotes in the CSV table. OpenOffice Calc uses different single quote characters at
the beginning of a word and at the end of a word, and if you store a csv file with these, you might end up with non
readable characters in the csv file. OpenOffice Calc also writes non readable characters for double qoute characters
to the csv file.</b>
<p>
Also, don't use backspace in the csv file. It might later be supported to quote other characters so it's reserved for
now.

<h3>Using the "Table: For each" action</h2>

aa

<p>

aa

<h3>Using the "Listen on beans" action</h3>

References can not listen on beans, simply because LogixNG can not know in advance which bean a reference will point
at. So how do LogixNG knows when the turnouts and sensors change state? For that, we must explicity tell LogixNG to
listen on these turnouts and sensors. For this purpose, there is a very special action, "Listen on beans". It doesn't
do any action, but it listen on some beans and triggers execution of the ConditionalNG when one of the beans it listens
to changes state.
<p>
To make it easy to use "Listen on beans", you can tell "Listen on beans" to listen on every bean in a row or column of
a table. So in this example, we tell "Listen on beans" to listen on all beans in the rows "Left turnout",
"Middle turnout", "Right turnout", "Sensor track 1", "Sensor track 2" and "Sensor track 3".

<h3>Using comments in the table</h3>

It's useful to be able to add comments in the table, especially for large tables. Therefore LogixNG has a simple way to
add comments to tables. If the header of a row or column is empty, LogixNG treats that row or column as a comment. So
if you want to add a comment on a row, leave the first column on that row empty. And if you want to add a comment on a
column, leave the first row on that column empty. If the first cell on a row or column is empty, the action
"Table: For each" will skip that row or column entirely.
<p>
Example:
<p>
<table border="1" cellspacing="0" cellpadding="2">
<tr><td></td><td>&nbsp;</td><td></td><td></td><td></td></tr>
<tr><td></td><td>North yard</td><td>West yard</td><td>East yard</td><td>South yard</td></tr>
<tr><td></td><td>&nbsp;</td><td></td><td></td><td></td></tr>
<tr><td></td><td colspan="2">We have a couple of turnouts</td><td></td><td></td></tr>
<tr><td>Left turnout</td><td>IT_10_1</td><td>IT_10_3</td><td>IT_10_5</td><td>IT_10_7</td></tr>
<tr><td>Middle turnout</td><td></td><td></td><td></td><td>IT_10_7</td></tr>
<tr><td>Right turnout</td><td>IT_10_2</td><td>IT_10_4</td><td>IT_10_6</td><td>IT_10_8</td></tr>
<tr><td></td><td>&nbsp;</td><td></td><td></td><td></td></tr>
<tr><td></td><td colspan="3">And we have a couple of signal masts</td><td></td></tr>
<tr><td>Left mast</td><td>Mast_10_1</td><td>Mast_10_3</td><td>Mast_10_5</td><td>Mast_10_7</td></tr>
<tr><td>Middle mast</td><td></td><td></td><td></td><td>Mast_10_9</td></tr>
<tr><td>Right mast</td><td>Mast_10_2</td><td>Mast_10_4</td><td>Mast_10_6</td><td>Mast_10_8</td></tr>
<tr><td></td><td>&nbsp;</td><td></td><td></td><td></td></tr>
<tr><td></td><td colspan="2">And also some sensors</td><td></td><td></td></tr>
<tr><td>Sensor track 1</td><td>IS_10_1</td><td>IS_10_3</td><td>IS_10_5</td><td>IT_10_7</td></tr>
<tr><td>Sensor track 2</td><td>IS_10_2</td><td>IS_10_4</td><td>IS_10_6</td><td>IT_10_8</td></tr>
<tr><td>Sensor track 3</td><td></td><td></td><td></td><td>IT_10_9</td></tr>
</table>
<p>
In this example, we have comments before the turnouts, before the signal masts, and before the sensors. And to make the
table easier to read, we have added empty lines above the comments as well. Both the actions "Table: For each" and
"Listen on beans" will skip both the empty lines and the comment lines, since the first cell on these rows are empty.

<h3>Using the Reference expression</h3>

One problem remains. In our example, we have a turnout, a mast and a sensor that only exists in one of the four yards.
In some cases, this may cause problems. Therefore, there is a special expression in LogixNG, "Reference", that can
evaluate the reference itself. By using "Reference", we can check if a reference is valid and do something only then.
<p>
In this case, we use "Reference" to check if "Middle turnout" is a valid turnout and only then controls the track 3
with "Middle turnout", "Middle mast" and "Sensor track 3".
<p>

<h3>Note</h3>

Note that a reference can point to another reference that points to a bean. This means that we can have a table that
points to another table that points to the bean.
-->
      <hr>
      <p><a href="index.shtml">Return to the Tutorial TOC</a></p>
<!--       <span style="padding-left: 6em"><a href="">Chapter Y - ????????</a></span></p> -->

      <!--#include virtual="/Footer.shtml" -->
    </div><!-- closes #mainContent-->

  </div><!-- closes #mBody-->
  <script src="/js/main.js"></script>



</body>
</html>
