<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: USS CTC Tools</title><!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div class="nomenu" id="mBody">
    <div id="mainContent">
      <h2>JMRI: USS CTC Tools</h2>

      <p>JMRI contains tools to help in the automation of USS CTC
      Panels. These can be used for either screen-based Panels, or
      to drive a physical panel with real levers and lights.</p>
            
      <h3>Script-based Tools<span class="since">Since JMRI 4.8</span></h3>
      These are very powerful, but currently can only be configured via a script.
      <p>
      For information how to do this, see:
      <ul>
      <li>The <a href="http://jmri.org/jython/ctc/TwoColumnMachine.py">jython/ctc/TwoColumnMachine.py</a> sample script
      <li>The <a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/package-summary.html">JavaDoc documentation on the various components</a>
      </ul>
      
      The available tools are:
      <dl>
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/CodeLine.html">Code Line</a></dt>
                            <dd>Implements the code line between the CTC machine and the field.
                            Can use a turnout output to tell e.g. a lamp to light or relays to make noise.
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/Station.html">Station</a></dt>  
                            <dd>Corresponds to a single station on the code line, usually
                            a single column on the CTC machine and all the items in the field that
                            are connected to it.
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/CodeButton.html">Code Button</a></dt>
                            <dd>One per section, this defines the connection to the code button (a sensor input)
                            and the code lamp (a turnout output) on the panel.
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/TurnoutSection.html">Turnout Section</a></dt>
                            <dd>Controls a single turnout in the field. You configure it with that turnout's name
                            along with sensor inputs for the lever on the panel, and turnout outputs for the
                            indicator lamps. Can optionally take Lock objects to add prototypical locking.
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/SignalHeadSection.html">SignalHead Section</a></dt>
                            <dd>Controls the signal heads around a single OS in the field.
                            You configure it with lists of left-going and right-going heads
                            which it can hold and release, 
                            along with sensor inputs for the lever on the panel, and turnout outputs for the
                            indicator lamps. Can optionally take Lock objects to add prototypical locking.
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/TrackCircuitSection.html">Track Circuit Section</a></dt>
                            <dd>This drives a track occupancy indicator lamp (an output) on the panel from a 
                                occupancy sensor in the field (a sensor input). Optionally, 
                                can ring a bell when goes occupied or unoccupied.
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/MaintainerCallSection.html">Maintainer Call Section</a></dt>
                            <dd>This drives a maintainer call lamp (an output) in the field from a 
                                lever or switch on the central panel (a sensor input).
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/OccupancyLock.html">Occupancy Lock</a></dt>
                            <dd>When added to a Turnout or SignalHead section, this prevents changes
                            while the OS section (defined into the Lock) is occupied.
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/RouteLock.html">Route Lock</a></dt>
                            <dd>When added to a Turnout section, this prevents changes
                            while the OS section has a route cleared through the Turnout.
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/TimeLock.html">Time Lock</a></dt>
                            <dd>When added to a Turnout section, this prevents changes
                            while the OS section has signals running time.
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/TrafficLock.html">Traffic Lock</a></dt>
                            <dd>Locks against signals being cleared in opposite directions onto
                            a single segment of track.  Can be configured with turnout settings
                            (BeanSetting objects) to allow e.g. signals at opposite ends of a town
                            to clear when one turnout is set ot the main and the other to the siding.
      <dt><a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/ussctc/TurnoutLock.html">Turnout Lock</a></dt>
                            <dd>A bit of a misnomer, because this refers to locking based on the state of a JMRI Turnout,  
                            which should be considered a generalized output.  Can be used to e.g. lock 
                            sections when a Call On state (on an internal turnout that represents the state)
                            has been set (by e.g. a Maintainer Call section used to set that JMRI Turnout
                            in the field).
      </dl>
<!-- 
      (The following pages exist, but aren't right for the post-4.7.4 content)
      <dl>
        <dt><a href=
        "../../../package/jmri/jmrit/ussctc/TurnoutLeverFrame.shtml">
        Turnout Lever</a></dt>

        <dd>Controls a Turnout from a lever on the Panel, along
        with the two indicator lights.</dd>

        <dt><a href=
        "../../../package/jmri/jmrit/ussctc/SignalLeverFrame.shtml">
        Signal Lever</a></dt>

        <dd>Controls a set of Signals from a lever on the Panel,
        along with the three indicator lights.</dd>

        <dt><a href=
        "../../../package/jmri/jmrit/ussctc/CodeButtonFrame.shtml">Code
        Button</a></dt>

        <dd>Implements the code button and code lamp.</dd>
      </dl>
 -->

      There's a page with a worked example (not yet present), 
      and a separate page describing the 
      <a href="Conventions.shtml">naming conventions</a> used in the example, in case
      you find that these will save you some work on the setup.
      
      <h3>Standalone Tools</h3>

      These can be created from the USS menu under Tools in 
      JMRI applications. They work by creating Logix and/or
      Routes that implement the desired functionality.
      You could do that by hand, of course, but these
      are meant as a simplification.
      
      <dl>
        <dt><a href=
        "../../../package/jmri/jmrit/ussctc/FollowerFrame.shtml">Follower</a></dt>

        <dd>Slaves an output Turnout device to follow the state of
        an input Sensor device. This could, for example, make a
        layout turnout follow a fascia switch connected to a
        Sensor.</dd>

        <dt><a href=
        "../../../package/jmri/jmrit/ussctc/OsIndicatorFrame.shtml">
        OS Indicator</a></dt>

        <dd>Drives the occupancy indicator lamps on the Panel. This
        takes input from a Sensor to show the track section is
        occupied, and also optionally can light the indicator if
        the section has been unlocked.</dd>

      </dl>

      <!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
