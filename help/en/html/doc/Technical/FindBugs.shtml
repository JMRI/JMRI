<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
    <title>
 	JMRI: Static Analysis with FindBugs
    </title>
    <meta content="Bob Jacobsen" name="Author">
    <meta name="keywords" content="JMRI technical code bugs">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

<div id="mainContent">

<h1>JMRI: Static Analysis with FindBugs</h1>

FindBugs is a tool that can examine code to find possible
problems.  It does a "static analysis", looking through the
code to find certain "known bad ideas":
Things that are likely to cause occasional/intermittent problems,
poor performance, etc.
Because those kinds of problems are hard to find with tests, 
finding them by inspection is often the only realistic approach.  
Having a tool that can do those inspections automatically, 
so that they can be done every time something is changed, 
keeps the code from slowly getting worse and worse without 
anybody noticing until it's too late.
<p>
For more information on FindBugs, see
<a href="http://findbugs.sourceforge.net/">the FindBugs home page</a>.

<p>
We routinely run FindBugs as part of our 
<a href="ContinuousIntegration.shtml">continuous integration process</a>.
You can see the results of the most
recent build online
<a href="https://jmri.ci.cloudbees.com/job/Development/job/FindBugs/lastBuild/">here</a>.

<p>
If FindBugs is finding a false positive, a bug that's not really a 
bug, you can turn it off with an annotation such as:
<pre><code>
@edu.umd.cs.findbugs.annotations.SuppressWarnings("FE_FLOATING_POINT_EQUALITY","OK to compare floats, as even tiny differences should trigger update")
</code></pre>
The second "justification" argument is optional, but highly recommended.  
Explaining why you've added this annotation to suppress a message will help
whoever comes after you and is trying to understand the code.
It will also help make sure you properly understand the cause of the underlying
bug report:  Sometimes what seems a false positive really isn't.

<p>
If you need to put more than one message type in an annotation, use array syntax:
<pre><code>
@edu.umd.cs.findbugs.annotations.SuppressWarnings("{type1},{type2}","why both are needed")
</code></pre>

<p>
There are also FindBugs annotations that can help it 
better understand your code. Sometimes they'll give it enough understanding of
e.g. when a variable can be null, that it'll no longer make false-positive mistakes.
For more on this, see the
<a href="http://findbugs.sourceforge.net/manual/annotations.html">Findbugs annotation page</a>.

<p>
It can be useful to mark classes with one of the following annotations
so that FindBugs does a good job of reasoning about it:
<ul>
<li><a href="http://findbugs.sourceforge.net/manual/annotations.html">edu.umd.cs.findbugs.annotations.CheckForNull</a> -
    a variable or parameter may have a null value, so all uses should appropriately handle that.
<li><a href="http://findbugs.sourceforge.net/manual/annotations.html">edu.umd.cs.findbugs.annotations.CheckReturnValue</a> -
    this method has no side-effects, so there's no point in calling it without checking it's return value
<li><a href="http://jcip.net/annotations/doc/net/jcip/annotations/Immutable.html">net.jcip.annotations.Immutable</a> -
    An object of this class can't be changed after it's created.  This allows both better checking
    of logic, and also simplifies use by your colleagues, so it's good to tag classes with this 
    property.
<li><a href="http://jcip.net/annotations/doc/net/jcip/annotations/NotThreadSafe.html">net.jcip.annotations.NotThreadSafe</a> - 
    a class that isn't thread-safe, so shouldn't be checked for concurrency issues. Often used
    for Swing-based classes, but note that some Swing components (e.g. monitor windows,
    classes with listeners) do have to accept input from other threads.
<li><a href="http://jcip.net/annotations/doc/net/jcip/annotations/ThreadSafe.html">net.jcip.annotations.ThreadSafe</a> -
    classes that do have to be usable for multiple threads.  FindBugs generally assumes this,
    but it's good to put it on a class that's intended to be thread-safe as a reminder to 
    future developers.
</ul>
For more information about these annotations, please see the 
<a href="http://jcip.net/annotations/doc/index.html">page in the Concurrency API</a>.

<h3>Suppressed Warnings</h3>

We have turned off the routine FindBugs checking of certain kinds of conditions:
<dl>
<dt><a href="http://findbugs.sourceforge.net/bugDescriptions.html#RI_REDUNDANT_INTERFACES">RI_REDUNDANT_INTERFACES</a>
    <dd>This flags cases where a class implements an interface, and also inherits from 
    a superclass that already implements that interface.  This is redundant and untidy, but it can't cause the code to malfunction.
    We have enough of them that we've turned off the warning, and will come back to it some later time.
<dt><a href="http://findbugs.sourceforge.net/bugDescriptions.html#SIC_INNER_SHOULD_BE_STATIC_ANON">SIC_INNER_SHOULD_BE_STATIC_ANON</a>, 
    <a href="http://findbugs.sourceforge.net/bugDescriptions.html#SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS">SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS</a>
    <dd>Static, as opposed to non-static, 
    inner classes (classes defined within another class) take less space
    because they don't maintain references to the containing object.  This warning suggests moving an 
    anonymous (defined in-line to the code) inner class to a regular (defined not in-line) class so it can
    be made static.  Although probably a small improvement, it's a bit of work for a small improvement.
    We have enough of them that we've turned off the warning, and will come back to it some later time.
<dt><a href="http://findbugs.sourceforge.net/bugDescriptions.html#PZLA_PREFER_ZERO_LENGTH_ARRAYS">PZLA_PREFER_ZERO_LENGTH_ARRAYS</a>
    <dd>What should a method that returns an array of values do when there aren't any?
    Returning "null", as opposed to an empty array, requires all the calling code to handle a special case.
    In many cases, returning an empty array makes the code simpler.  But for existing code, that 
    simplification is marginal. As this is a design issue, but it crops up a lot, we've suppressed these 
    for now just to focus on more pressing problems.
<dt>Malicious Code
    <dd>This is a class of warnings centered around the idea that data and code methods shouldn't be too
        visible, especially when static.  This is true, but JMRI isn't a hardened library that's being
        released into a world of people trying to break it, as these changes are a lower priority. 
<dt>Nm<dd>The convention is that class names start with a capital letter, and method names (data and code)
    with a small letter.  
<dt>Se,SvVI<dd>This is a large class of warnings associated with Java serialization.  JMRI
    doesn't used serialization, and is unlikely to do so in the future, so we suppress these to raise the 
    average quality of the issued warnings.
</dl>

<h3>Background</h3>
<p>
Simon White added FindBugs support to our Ant-based build
chain during the development of JMRI 2.5.5.
His note on this follows.

<p>
As per feature request 1716873, I've added an ant task to run Findbugs. 
This will produce a report in HTML in the same location as the JMRI jar 
(i.e. the top level project dir). Note the new task first runs ant dist
because FindBugs examines the jmri.jar file.
<p>
To run the task:
<ul>
<li>Install Findbugs (for me I put this in C:/findbugs-1.3.8)
<li>Copy findbugs-ant.jar from the findbugs lib directory to the 
java/lib directory

<li>either run 
 
</code><pre>
ant -Dfindbugs.home=C:/findbugs-1.3.8 findbugs  (replacing the parameter with your install location)
</pre></code>

or edit the build.xml and modified the current commented 
out parameter findbugs.home to your install location and then run

</code><pre>
ant findbugs
</pre></code>
</ul>

On my old machine this takes about 20 minutes but your mileage may vary.
<p>
Note that in the build.xml I have set the maximum memory -Xmx setting for the 
findbugs task to 1024m.
If your system has more memory, boosting this may speed things up.

<p>
Running this on JMRI 2.5.4 produced the following:
<p>
	<table border="1">
	<tr><td>Bad practice Warnings</td><td>164</td></tr>
	<tr><td>Correctness Warnings</td><td>77</td></tr>
	<tr><td>Experimental Warnings</td><td>7</td></tr>
	<tr><td>Malicious code vulnerability Warnings</td><td>221</td></tr>
	<tr><td>Multithreaded correctness Warnings</td><td>90</td></tr>
	<tr><td>Performance Warnings</td><td>459</td></tr>
	<tr><td>Dodgy Warnings</td><td>304</td></tr>
	<tr><th>Total</th><th>1322</th></tr>
	</table>

<p>A lot of work has gone into JMRI during the 2.12 release cycle to
bring the bug count down to zero.  The <a
 href="ContinuousIntegration.shtml">Continuous Integration server</a>
runs FindBugs twice a day, which helps developers see the results of
their coding without having to set up to run findbugs themselves.</p>

<p>If you are checking code in to the JMRI repository,
please check the CI server and make sure that your changes do not
introduce new errors.</p>

<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>
