<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id$ -->

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: Developing with JMRI Code</title>
  <meta content="Bob Jacobsen" name="Author">
  <meta name="keywords" content="JMRI technical code Git download">
  <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
  <!-- are an arbitrary design pattern used by the update.pl script to -->
  <!-- easily replace the common header/footer code for all the web pages -->
  <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
  <!-- or change them to reflect your alternative logo -->
  <!--#include virtual="/Style" -->
</head><!--#include virtual="/Header" -->

<body>
  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
      <!-- ============= -->
      <!-- Page Contents --><!-- Required -->
      <!-- ============= -->

      <h1>JMRI: Developing with JMRI Code</h1>

      <h2>Background</h2>Anybody is welcome to get a copy of the
      JMRI code and modify it for their own purposes. What makes
      one a JMRI developer is contributing those modifications back
      for others to use. This page discusses how to do that,
      assuming that you've gotten a copy of the code following the
      <a href="getgitcode.shtml">previously described
      procedures</a>.

      <p>See the <a href="GitFAQ.shtml">JMRI Git FAQ page</a> for
      more details on these processes.</p>

      <p>The links to the left provide more information on building
      with specific tools. You should read the page for your
      particular setup.</p>

      <p>The rest of this page provides an overview of the process
      of developing JMRI code with Git. Basically, you create a new
      branch, make your changes, compile/run/test until you've
      finished your intended change, and then send that change back
      for inclusion into the main repository.</p>

      <p>That's done with a four-step process:</p>

      <ol>
        <li>You create a Git branch to hold your work.</li>

        <li>You periodically "commit" your changes to your local
        repository.</li>

        <li>You periodically "push" those changes to a repository
        of your own on GitHub.</li>

        <li>When your change is complete, you create a "pull
        request" that allows JMRI to get your change from your
        GitHub repository and merge it into JMRI's main
        repository.</li>
      </ol>

      <h3>Create a Branch for Development</h3>Git is very good at
      keeping development on parallel "branches" separate. Although
      the primary development is on the "master" branch, we
      strongly recommend that you don't directly make changes to
      that. There are a lot of JMRI developers, and having them all
      work on a single branch can get confusing. Instead, you
      should create a separate branch for each of your projects,
      work on it until it's ready to be merged back into the main
      JMRI source, and then contribute the entire branch contents
      back to our main repository.

      <p>To create a new branch:</p>
      <pre>
<code>
  git checkout master<br>  git pull<br>  git checkout -b my-new-feature-or-fix<br>  </code>
</pre>

      <p>The first two "git checkout master" &amp; "git pull" lines
      makes sure that you are starting from the most recent
      "master" branch contents. The master branch is where we do
      development between test releases.</p>

      <p>The -b option in the last line creates a new branch which
      will contain your new work. This lets you work on it without
      interference from other people's changes until you're ready
      to merge with those. The "checkout" means that you're now
      working on that new branch, which will hold whatever you
      commit in later steps.</p>

      <h3>Commit Changes to Your Local Repository</h3>You should
      commit your changes into your local repository often.

      <p>With SVN, there was one central repository that everybody
      shared. Git provides everybody with their own local
      repository, and then links them together with "pull", "push"
      and "pull request" operations. When you commit, you're saving
      a copy of your changes into your local repository where
      they're safe, and can eventually be moved onward.</p>
      <pre>
<code>
  git commit
  </code>
</pre>When you do this, Git will open an editor window for your
commit note. The top line becomes the summary, which should be
clear by itself as this will appear in lists of changes. You should
keep that summary to 50 characters or less, so it can be displayed
compactly. Please add more detail in additional lines after the
summary, because that helps your friends and colleagues understand
what you've done. <a name="repo" id="repo"></a>

      <h3>Get Your Own GitHub Repository</h3>

      <ul>
        <li>Get a <a href="https://github.com/join">GitHub
        account</a> and login</li>

        <li>Tell GitHub to <a href=
        "https://help.github.com/articles/fork-a-repo/">"fork"
        JMRI's repository</a> into one of your own. There's a
        <a href=
        "https://help.github.com/articles/fork-a-repo/">good help
        page</a>, but basically you go to the <a href=
        "https://github.com/JMRI/JMRI">JMRI repository page</a> and
        click the "fork" button in the upper right.</li>
      </ul>

      <p>This gives you your own repository, which you can then
      work with freely.</p>

      <p>If you're using the command line, the next step is to
      connect it to your local repository. (IDE users will do this
      next part in their IDE, see those instructions) On the web
      page for your repository, right side, is a "HTTPS Clone URL".
      Copy that. In your repository directory on your local
      computer, do</p>
      <pre>
<code>
  git remote set-url --push origin https://github.com/yourname/JMRI.git
  </code>
</pre>(With the appropriate URL)

      <p>After this, doing a "git push" will push your changes up
      to your repository. "git pull" will still pull from the main
      repository so that you can get the most recent updates from
      others. To check this, do a "git remote -v" which should
      show:</p>
      <pre>
<code>
   % git remote -v<br>   origin       https://github.com/JMRI/JMRI.git (fetch)<br>   origin       https://github.com/yourname/JMRI.git (push)
</code>
</pre><a name="push" id="push"></a>

      <h3>Push Your Changes to Your GitHub Repository</h3>Now that
      you have a consistent set of changes committed locally, you
      can move them up to your repository on GitHub. That makes
      them visible to everybody else.
      <pre>
<code>
  git push
  </code>
</pre>Sometimes, git will tell you that you need a more complicated
push comment, with some options that start with - or --. Just copy
and paste that line to execute it. <a name="pull" id="pull"></a>

      <h3>Submit a Pull Request</h3>The last step is to make your
      changes, already visible in your GitHub repository, known to
      the JMRI maintainers so that one of them can pull it into the
      main JMRI repository. To do that, you create and submit a
      "pull request" that automatically has all the needed info.

      <ul>
        <li>Login to GitHub and go to the page for your JMRI clone
        repository (yours, not the main JMRI one)</li>

        <li>There's a "Pull Request" button at the upper right of
        the file listing. Click it.</li>

        <li>On the next page, select the branch you've been working
        on and click the "Create pull request" button.</li>

        <li>Fill out the forms. A short title that describes the
        feature you've written helps other people find it. A few
        lines in the comment about what it does, how you added it,
        etc is also very helpful.</li>

        <li>Click "Create pull request". That submits all the info
        and notifies the JMRI maintainers. One of them will check
        it over and either contact you for more info
        (occasionally), or merge it into the master branch in the
        the main repository (more often). You can sign up for a
        notification when that happens.</li>
      </ul><!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
