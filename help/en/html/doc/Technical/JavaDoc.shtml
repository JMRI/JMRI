<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
    <title>
 	JMRI: Use of JavaDoc and UML
    </title>
    <meta name="author" content="Bob Jacobsen">
    <meta name="keywords" content="JMRI technical code ">

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>
<body>
<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

<div id="mainContent">

<h1>JMRI: Use of JavaDoc and UML</h1>
<p>
The JMRI library provides the majority of its
API documentation via 
<a href="http://java.sun.com/j2se/javadoc/writingdoccomments/">JavaDoc</a>
and 
<a href="http://en.wikipedia.org/wiki/Unified_Modeling_Language">UML</a>.

<p>
We also use Java
<a href="http://java.sun.com/docs/books/tutorial/java/javaOO/annotations.html">annotations</a>
to document our code structure.

<p>
We use the 
<a href="http://www.umlgraph.org">UmlGraph</a>
doclet to automatically create the UML diagrams in 
our JavaDoc pages.

<h2>JavaDoc for Developers</h2>

The 
<a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html">JavaDoc tutorial</a>
is a good, but somewhat long, 
<a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html">introduction to JavaDoc</a>.
A brief summary of the formatting and tags can be found in 
<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#documentationcomments">the reference</a>.

<p>
Traditionally, the Java packages in JMRI have used
<code>package.html</code> files to contain any needed package-level 
documentation.
It's now <a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#packagecomment">recommended</a>
that any significant Java package contain a 
<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#packagecomment"><code>package-info.java</code></a>
file for this. 
Only a few of these have been included in JMRI so far, and 
it's not a high priority to replace existing <code>package.html</code> files,
but new packages should include a <code>package-info.java</code>
copied from <code>java/package-info.java</code>.

<p>
A nice discussion of how to use the "deprecated" label
in documentation is available on the
<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/deprecation/deprecation.html">"How and When To Deprecate APIs" page</a>.

<p>
The JavaDoc content is interpreted as HTML 4.01, so it should be valid HTML 4.01. If it's not,
it probably won't display properly when somebody wants to understand your code, so it's in 
your interest to get the JavaDoc comments right.
<p>
For example, you have to properly handle &amp; and &lt; character, e.g. to show a generic type.
To do that, place the test in {@literal ...} or {@code ...} blocks.
<p>
You also have to (sometimes) end your paragraph tags to start another type of element, e.g. lists: 
<code><pre>
 * Some text that forms a paragraph
 * &lt;p&gt;
 * Some more text. 
 * &lt;p&gt;
 * Last text, start list. Note end-paragraph tag.
 * &lt;/p&gt;&lt;ul&gt;
 *    &lt;li&gt;List item
 * &lt;/ul&gt;
</pre></code>
Note that HTML 4.01 wants paragraph tags to be ended with &lt;/p&gt;, and that you can't have a list inside a paragraph.
<p>
Some error messages and their translations:
<dl>
<dt>"malformed HTML"</dt><dt>"bad HTML entity"</dt><dd>Probably use of &amp;, &lt; or &gt; characters on the indicated line</dd>
<dt>"bad use of '&gt;'"</dt><dd>Probably using '&gt;' as a character, e.g. A -&gt; B. If so, replace with "&amp;gt;" or wrap the line with @literal</dd>
</dl>

Finally, note that this JavaDoc line is malformed:
<code><pre>
 * @param foo
</pre></code>
because it doesn't include any explanatory text. The line should be more like:
<code><pre>
 * @param foo Holds the latest Bar instance
</pre></code>
or just omitted.

<p>
We are currently suppressing the "accessibility" class of JavaDoc errors, which is 
mostly about providing extra information on tables and images, and the "missing" class of 
errors, which tags it if an @param or @return isn't provided in any places that could have 
received comments.  There are so many of these that it's not practical to tag them.

<h2>UML and UmlGraph for Developers</h2>

UML is a broad and deep language for describing the 
structure, design and behavior of computing systems. 
JMRI primarly uses 
UML class diagrams
for documenting its structure.

Many UML tutorials are available on the web. In particular, 
a good starting point is the 
<a href="http://www.objectmentor.com/resources/articles/umlClassDiagrams.pdf">Object Mentor introduction to class diagrams</a>.
For more detail, please see 
<a href="http://web.archive.org/web/20110704185440/http://atlas.kennesaw.edu/~dbraun/csis4650/A&D/UML_tutorial/class.htm">Atlas UML course</a>
or
<a href="http://edn.embarcadero.com/article/31863">Embarcadero Software introduction</a>.

<p>Our Ant JavaDoc processing makes basic UML class diagrams automatically.
For an example, see the 
<a href="http://jmri.org/JavaDoc/doc/jmri/Sensor.html">Sensor interface JavaDoc</a>,
then click the "Show UML Class Diagram link" to see the
<a href="http://jmri.org/JavaDoc/doc/jmri/Sensor.png">class diagram embedded in it</a>.

For a more complex example see
<a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/progsupport/ProgModeSelector.html">ProgModeSelector class JavaDoc</a>
then click the "Show UML Class Diagram link" to see the
<a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/progsupport/ProgModeSelector.png">class diagram embedded in it</a>.

<p>You can also define custom UML diagrams using 
<a href="http://plantuml.com">PlantUML</a>.
For an example of the source syntax to define state and sequence diagrams, see the
<a href="https://github.com/JMRI/JMRI/blob/master/java/src/jmri/jmrix/lenz/XNetProgrammer.java#L32">java/src/jmri/jmrix/lenz/XNetProgrammer.java</a> file.
The resulting diagrams are visible in the 
<a href ="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrix/lenz/XNetProgrammer.html">JavaDoc output</a>.

<h2>Processing</h2>

The standard JMRI Ant build provides three documentation targets:
<dl>
<dt>javadoc<dd>Create the text JavaDocs in the local doc/ directory.  Open doc/index.html for access.
<dt>javadoc-uml<dd>Create the UML diagrams and JavaDocs in the local doc/ directory.  Open doc/index.html for access.
<dt>uploadjavadoc<dd>Upload the current documentation in the local doc/ directory to the jmri.org web site.
This is done automatically by the <a href="ContinuousIntegration.shtml">CI system</a>, so you generally don't have to deal with it.
</dl>

<h3>Manual Diagrams</h3>


<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>

