<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: Technology Road Map</title>
  <meta name="author" content="Bob Jacobsen">
  <meta name="keywords" content="JMRI technical code road map">
  <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
  <!-- are an arbitrary design pattern used by the update.pl script to -->
  <!-- easily replace the common header/footer code for all the web pages -->
  <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
  <!-- or change them to reflect your alternative logo -->
  <!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head><!--#include virtual="/Header.shtml" -->

<body>
  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
      <h1>JMRI: Technology Road Map</h1>
      This page is the road map
      for JMRI's future develpoment, including changes to our use
      of Java technologies. It is maintained and updated through
      continuing discussion on the <a href=
      "http://sourceforge.net/mailarchive/forum.php?forum_name=jmri-developers">
      jmri-developers mailing list</a>.

      <p>There's also a <a href="TechRoadMapOlder.shtml">page
      containing the history</a>, particularly the saga of how we
      moved forward to Java 1.6 and Java 1.8 across a series of
      platform-related changes.</p>

      <h2>JMRI Releases</h2>This section describes the (notional)
      plans for JMRI releases in the future.

      <table border="1">
        <tr>
          <th>Release</th>

          <th>Description</th>

          <th>Date</th>

          <td>JRE</td>

          <td>JDK</td>
        </tr>

        <tr>
          <td>3.11.*</td>

          <td>Development series</td>

          <td></td>

          <td>1.6</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.0</td>

          <td>Production version, culmination of 3.11.* series</td>

          <td>July 2015 <b>(done)</b></td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.1.*</td>

          <td>Development series</td>

          <td></td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.2</td>

          <td>Production version, culmination of 4.1.* series</td>

          <td>December 2015 <b>(done)</b></td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.3.*</td>

          <td>Development series</td>

          <td></td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.4</td>

          <td>Production version, culmination of 4.3.* series</td>

          <td>Early Summer 2016</td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.5.*</td>

          <td>Development series</td>

          <td></td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.6</td>

          <td>Production version, culmination of 4.5.* series</td>

          <td>Late Fall 2016</td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.7.*</td>

          <td>Development series</td>

          <td></td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.8</td>

          <td>Production version, culmination of 4.7.* series</td>

          <td>Early Summer 2017</td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.9.*</td>

          <td>Development series</td>

          <td></td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.10</td>

          <td>Production version, culmination of 4.9.* series</td>

          <td>December 2017</td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.12</td>

          <td>Production version, culmination of 4.11.* series</td>

          <td>July 2018</td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.14</td>

          <td>Production version, culmination of 4.13.* series</td>

          <td>December 2018</td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>4.16</td>

          <td>Production version, culmination of 4.15.* series</td>

          <td>July 2019</td>

          <td>1.8</td>

          <td>1.8</td>
        </tr>

        <tr>
          <td>??</td>

          <td>Production version, culmination of Fall 2019 series</td>

          <td>December 2019</td>

          <td>??</td>

          <td>??</td>
        </tr>

      </table>

      <h4>JMRI in the Near Future</h4>The 4.1.* series of test
      releases in Fall 2015 started the requirement for Java 8,
      also known as Java 1.8.
      This has continued through the following release series.
      The June 2018 release, notionally JMRI 4.12 will
      remain with Java 8, but may involve other updates.
      
      <p>The next long-term-support Java release will be
      Java 11 in Fall of 2018.  Oracle intendes to 
      <a href="https://blogs.oracle.com/java-platform-group/a-quick-summary-on-the-new-java-se-subscription">align their Java and the OpenJDK at that point</a>.
      Because some people will
      need to have that on their computers for other purposes, 
      we intend to support JMRI running on Oracle Java 8 through 11
      and OpenJDK version 11
      by JMRI 4.14 in December 2018.
      
      <p>
      At some point, the Java version required by JMRI has to move forward.
      We don't know what that point is, but the earliest it will be is Fall 2019.
      Allowing for migration and
      development time, and depending on development plans, JMRI's December 2019 release
      might require Java 11 (in which case it would be called JMRI 5.1)
      or stay with requiring Java 8 or later (in which case it would be called JMRI 4.18).
      Releases before Fall 2019 are intended to stay fully compatible Java 8.
      
      <p>
      It's possible that, as an intermediate step,
      JMRI development will move to a later Java version
      without requiring that JMRI users move to a later version.  
      For example, it's remotely possible that JMRI will require Java 11
      to compile and build distributions, which would still be able to
      work on Java 8.  We prefer to do that to keep older hardware working,
      but we can't always possible.

      <p>
      There are also smaller migration issues. These don't directly
      affect JMRI users in the way that Java version changes do, but 
      they may effect external users of the JMRI libraries.
      
      <ul>
        <li>At some point, we have to migrate away from <a href=
        "Help.shtml">JavaHelp and JHelpDev</a>. At a minimum, we'll
        need to <a href=
        "http://weblogs.java.net/blog/brinkley/archive/2004/11/javahelp_v20_02.html">
        replace the renderer</a>. There are <a href=
        "http://stackoverflow.com/questions/9900110/javahelp-viewers-or-alternatives">
        several alternative help systems</a> available. <a href=
        "http://www.oracle.com/technetwork/topics/index-083946.html">
        Oracle Help</a> might be a good choice. DocBook as a tool
        for generating multiple documentation forms is also being
        considered.</li>

        <li>Our use of JUnit has been migrated to the 
        <a href="http://junit.org">JUnit 4 release</a>, 
        currently 4.12.
        Among other improvements, this can allow use of the Java
        <a href="http://stackoverflow.com/questions/3806173/assert-keyword-in-java">assert keyword</a>. 
        We're working on how best to use the
        new capabilities, see the <a href="JUnit.shtml#junit4">JMRI
        JUnit page</a>. At some point, perhaps in 2019, we'll want to migrate to
        <a href="https://junit.org/junit5/">JUnit 5</a> to get access to 
        <a href="https://developer.ibm.com/dwblog/2017/top-five-reasons-to-use-junit-5-java/">new testing tools</a>,
        particularly for parameterized tests.
        We also need to complete the conversion from JFCUnit to Jemmy for
        Swing testing.</li>

        <li>USB access technology has advanced a lot since support
        for some basic libraries was added to JMRI. At some point,
        we should replace those early library versions, but it will
        break some user scripts.</li>

        <li>Our <a href="Logging.shtml">logging methodology</a> is
        now a hybrid of native logging (in some included
        libraries), Log4J (our original solution) and SLF4J (the
        most recent addition). It's likely that we'll eventually
        simplify that.</li>

      </ul>

      <h3>Java Release and Operating System Support</h3>More
      information on Java releases and the operating systems that
      support them is on a <a href="JVMCapabilities.shtml">separate
      page</a>.

      <h2>Migration Notes</h2>This is a section of notes for
      various code migrations that are in progress or contemplated.

      <a id="junit4" name="junit4"></a><h3>From JUnit 3 to JUnit 4</h3>
      JMRI's
      <a href="ContinuousIntegration.shtml">continuous integration</a>
      test suites and infrastructure are migrating from
      JUnit 3 to JUnit 4.  For more information, see the
      section on
      <a href="JUnit.shtml#junit4">our JUnit page</a>.

      <a id="jdom2" name="jdom2"></a><h3>From JDOM 1 to JDOM 2</h3>JMRI
      3.11 moved from JDOM version 1 to JDOM version 2. This
      involved a new jdom-2.0.5.jar file (in place of the earlier
      jdom.jar), changes to startup and build control files, and
      some required code changes:

      <ul>
        <li>JDOM 2 classes are in the org.jdom2 package instead of
        org.jdom. This required some changes to import statements
        and class-references in the source code.</li>

        <li>The default output formatting is different, requiring
        minor changes in e.g. the XmlFile class output
        routines.</li>
      </ul>
      <p>In addition, JDOM 2 uses generics in its input
      parameters and return values. This means you can remove (now
      redundant) casts in many places. Jenkins will warn about
      those.</p>
      <!--#include virtual="/Footer.shtml" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
