<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: Introduction to JMRI Library Structure</title>
  <meta name="Author" content="Bob Jacobsen">
  <meta name="keywords" content="JMRI technical code">
  <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
  <!-- are an arbitrary design pattern used by the update.pl script to -->
  <!-- easily replace the common header/footer code for all the web pages -->
  <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
  <!-- or change them to reflect your alternative logo -->
  <!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head><!--#include virtual="/Header" -->

<body>
  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
      <h1>JMRI: Introduction to JMRI Library Structure</h1>Because
      we expect to have different interfaces in the
      <code>jmrix</code> package, the JMRI tools don't directly
      create the interface objects they need. Rather, they ask for
      instances of interfaces. For interfaces in the
      <code>jmri</code> package, which might be implemented by lots
      of different layout types, <code>jmri.InstanceManager</code>
      satisfies these requests.

      <p>More information on how things (e.g. objects representing
      items on the layout) are named <a href="Names.shtml">is
      available on a separate page</a>.</p>

      <a href="images/OverallPackageStructure.png"><img src="images/OverallPackageStructure.png" align="right" height="20%" width="20%" /></a>
      <p>More specifically:</p>

      <dl>
        <dt>jmri</dt>

        <dd>Contains interfaces and base class implementations for
        the common JMRI objects. This is the basic interface to the
        overall JMRI library and its capabilities.<br>
        Code in the jmri package should depend on no other JMRI
        code, though it may depend on externals (log4j, etc.)</dd>

        <dt>apps</dt>

        <dd>Separate from the jmri package tree, this contains application classes and base classes that can use jmri, jmrit,
        and jmrix classes, along with anything else. By having this
        here, we break the dependency between jmrix and jmrit
        classes (somebody has to create the general and
        system-specific tool objects for an application; that
        dependency is from the apps package)</dd>

        <dt>jmrit</dt>

        <dd>Contains commonly useful <strong>t</strong>ools and
        extensions.<br>
        It can depend on jmri.* and externals. It must not depend
        on jmrix.*</dd>

        <dt>jmrix</dt>

        <dd>Contains code that is specific to a particular
        e<strong>x</strong>ternal system. This includes
        implementations of jmri interfaces that are specific to a
        system, plus system-specific tools (in the long run, those
        could certainly be separated).<br>
        jmrix can depend on jmri and externals, but not jmrit.</dd>

        <a href="images/OverallImplementationStructure.png"><img src="images/OverallImplementationStructure.png" align="right" height="20%" width="20%" /></a>

        <dt>util</dt>

        <dd>General service classes that are _not_ user level
        tools.</dd>

        <dt>managers</dt>

        <dd>Abstract and default implementations of the various
        JMRI type managers, e.g. the concrete classes from the
        InstanceManager. It's a historical accident that these have
        a package of their own, rather than being rolled into
        jmri.implementations.</dd>

        <dt>implementations</dt>

        <dd>Abstract and default implementations of the jmri
        objects; no system specific or Swing code allowed here.
        These are in a separate package, rather than in jmri
        itself, to make the jmri package simpler to understand for
        people who just want to use the library.</dd>

      </dl>

      <p>Extensive use of Factory pattern via objects we call
      "Manager" objects.</p>

      <h3>Example: a Turnout</h3>Turnouts involve:

      <ul>
        <li>Turnout - the basic interface. This is what you should
        expect to deal with when writing your layout automation
        code; its what you get when you make a request from the
        TurnoutManager, etc.</li>

        <li>AbstractTurnout - provided for convenience when
        implementing the Turnout interface for specific hardware,
        this provides the basic implementation.</li>

        <li>LnTurnout - a specific implementation for
        LocoNet-connected turnouts.</li>
      </ul>

      <p>To get a specific Turnout instance that represents
      something on the layout, you make a request of a
      TurnoutManager. This is also an interface, with a similar
      implementation pattern. 
      <!--#include virtual="/Footer" --></p>
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
