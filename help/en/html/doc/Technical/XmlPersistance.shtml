<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<!-- Copyright Bob Jacobsen 2004, 2007, 2008 -->

<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: XML Persistance</title>
  <meta name="author" content="Bob Jacobsen">
  <meta name="keywords" content=
  "JMRI technical code xml persistance">
  <!--#include virtual="/Style" -->
</head><!--#include virtual="/Header" -->

<body>
  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
      <h1>JMRI Code: XML Persistance</h1>

      <p>JMRI uses XML for persisting internal structures,
      especially when storing the preferences and panel files.</p>

      <p>XML persistance is done via some explicitly written code.
      Basically, certain classes register themselves with a
      instance of the "ConfigureManager". The only implementation
      of one of those we have is the one for loading and storing
      XML files: jmri.configurexml. ConfigXmlManager When it's time
      to store, the ConfigureXmlManager is told to do it. It goes
      through the registered objects and finds the persisting class
      responsible for storing the object. E.g. class a.b.Foo will
      have the class a.b.configurexml.FooXml located. If that class
      is found, it's told to store the Foo object, and it adds Xml
      content to a JDOM document to do that. If it's not located,
      an error message is issued.</p>

      <p>On load, an XML file is read by the manager. Each element
      is examined for a "class" attribute. If found, that class is
      loaded and handed the element to process. Etc.</p>

      <p>It's quite hackish, and not very cleanly factored. There's
      a fair amount of code duplication, but that might be because
      it comes from a C++ background and the developer keeps
      wishing for templates and mixin classes. But it works!</p>

      <h3>Example</h3>
      <p>A LightManager knows about Lights.<br>
      There are lots of concrete classes implementing the Light
      interface:</p>

      <ul>
        <li>jmri.jmrix.loconet.LnLight</li>

        <li>jmri.jmrix.cmri.serial.SerialLight</li>

        <li>jmri.jmrix.powerline.SerialLight</li>
      </ul>These have their own internal information, which is not
      always the same.

      <p>There are also multiple LightManager concrete classes to
      handle them:</p>

      <ul>
        <li>jmri.jmrix.loconet.LnLightManager</li>

        <li>jmri.jmrix.cmri.serial.SerialLightManager</li>

        <li>jmri.jmrix.powerline.SerialLightManager</li>
      </ul>

      <p>Each type of manager is stored and loaded via a
      persistance class, who is found by looking the a class with
      "Xml" appended to the name, in a "configurexml" direct
      subpackage:</p>

      <ul>
        <li>jmri.jmrix.loconet.configurexml.LnLightManagerXml</li>

        <li>
        jmri.jmrix.cmri.serial.configurexml.SerialLightManagerXml</li>

        <li>
        jmri.jmrix.powerline.configurexml.SerialLightManagerXml</li>
      </ul>

      <p>In the case of Light concrete classes, the code for
      persisting the managers directly stores and loads the
      individual lights. This is because (so far) a given manager
      only has one type of Light (e.g. LnLightManager only has to
      worry about LnLight). In cases where this is not true, e.g.
      SignalHeads which have multiple classes, there are
      persistance classes for the individual objects in addition to
      the manager.</p>

      <h3>Adding More Information to a Class</h3>
      <p>If you want to
      store more state information, find the persisting class and
      add code to it to create and read attributes or elements.<br>
      Perhaps the easiest way to do this is to create a sample
      panel file with the objects you want to store in it:</p>
      <pre>
  &lt;sensors class="jmri.jmrix.cmri.serial.configurexml.SerialSensorManagerXml" /&gt;
    &lt;sensor systemName="CS3001" /&gt;
  &lt;/sensor&gt;
  &lt;sensors class="jmri.managers.configurexml.InternalSensorManagerXml" /&gt;
   &lt;sensor systemName="IS21" /&gt;
  &lt;/sensors&gt;
  &lt;signalheads class="jmri.configurexml.AbstractSignalHeadManagerXml"&gt;
    &lt;signalhead class="jmri.configurexml.DoubleTurnoutSignalHeadXml" systemName="IH1P"&gt;
      &lt;turnout systemName="CT10" userName="1-bit pulsed green" /&gt;
      &lt;turnout systemName="CT2" userName="1-bit pulsed red" /&gt;
    &lt;/signalhead&gt;
  &lt;/signalheads&gt;
</pre>

      <p>Note the "class" attributes. They give the fully-qualified
      name of the class that can load or store that particular
      element. In the case of Sensors, we see there are two
      managers in use: One for C/MRI, and one for internal Sensors.
      For SignalHeads, there's only one manager,
      jmri.configurexml.AbstractSignalHeadManager persisted by
      jmri.configurexml.AbstractSignalHeadManager, but each
      particular SignalHead implementing class has it's own
      persisting class.</p>

      <p>To e.g. add more data to a sensor, the
      jmri.jmrix.cmri.serial.configurexml.SerialSensorManagerXml
      and jmri.managers.configurexml.InternalSensorManagerXml
      classes would have to be modified.</p>

      <p>Note that in some cases, there's an inheritance
      relationship amoung the persisting classes that can help. For
      example, the LocoNet <a href=
      "http://jmri.org/JavaDoc/doc/jmri/jmrix/loconet/configurexml/LnSensorManagerXml.html">
      LnSensorManagerXml</a> class inherits from <a href=
      "http://jmri.org/JavaDoc/doc/jmri/configurexml/AbstractTurnoutManagerConfigXML.html">
      jmri.configurexml.AbstractSensorManagerConfigXML</a>, which
      does almost all the work of storing and loading sensors.</p>

      <p>If you do add new attributes or elements, don't forget to
      update the format definition, see below.</p>

      <h3>Class Migration</h3>
      Sometimes, classes need to be moved to another package as part of
      code maintenance.  Since the fully-qualified class name, including package name,
      has been written to files, if we just move the class it will break reading of those
      files (in addition to breaking any user-written code that might refer to them).
      To handle this:
      <ul>
        <li>Move the *Xml file to its new location, just below the class it's loading and storing
        <li>Make an entry in the <code>java/src/jmri/configurexml/ClassMigration.properties</code> 
            file to map the old location to the new location
        <li>Optionally, create an empty *Xml class in the old location that just inherits from the
            *Xml class in the new location (so that it will still work) and mark it deprecated.
            This keeps functional other people's code that e.g. might inherit from it.
            You can remove this after a decent interval.
      </ul>
      
      <h2><a id="schema" name="schema">Schema
      Management</a></h2>
      <p>JMRI controls XML semantics using <a href="XmlSchema.shtml">XML
      Schema</a>.</p>

      <p>For example, layout information is stored in XML files as
      a "layout-config" element, whose contents are then defined
      via a schema file. These files are kept in the <a href=
      "http://jmri.org/xml/schema">xml/schema</a> directory.</p>

      <!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
