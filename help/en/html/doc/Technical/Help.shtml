<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: Creating Help Pages and Using JavaHelp</title>
  <meta name="author" content="Bob Jacobsen">
  <meta name="keywords" content="JMRI technical code Java Help JavaHelp">

  <!--#include virtual="/Style.shtml" -->
</head>

<body>
  <!--#include virtual="/Header.shtml" -->
  <div id="mBody">
    <!--#include virtual="Sidebar.shtml" -->
    <div id="mainContent">

<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = --> 
     <a name="helpTop" id="helpTop"></a>     
     <h1>JMRI Code: Creating Help Pages and Using JavaHelp</h1>

    <div class="para">      
     <p>This page talks about technical aspects of how JMRI provides help information 
     using <a href="https://javahelp.java.net">JavaHelp</a> and <a href=
      "https://sourceforge.net/projects/jhelpdev/">JHelpDev</a> as well as some suggestions on 
      common approaches for help pages.     </p>

	    <ul class="snav">
		<li><a href="#web">Web Access</a></li>
		<li><a href="#limitations">Standards and Limitations</a></li>
    	<li><a href="#check">Checking Changes</a></li>
        <li><a href="#tocAndIndex">TOC and Index</a></li>
        <li><a href="#jhelpdev">Creating Control Files</a></li>
        <li><a href="#code">Help Access in Code</a></li>
        <li><a href="#site">Web Site Update</a></li>               
	    </ul>

       </div>
 
<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = --> 
      <h2>Organization of the help Files</h2>

    <div class="para">      

      The help files are
      located in the "help" directory within the JMRI distribution
      directory.

      <p>The master copy of this is stored in our repository as the
      "help" directory in the JMRI code repository. This means to
      get your own local copy, just follow the steps on the
      "<a href="getgitcode.shtml">getting the code</a>" page.</p>

      <p>Within that, all the English-language files are located
      within the "en" subdirectory. Eventually, this will let us
      internationalize the help pages.</p>

      <p>Within that, there are several file trees:</p>

      <ul>
        <li>package - organized like the source package tree, this
        contains code-specific help files for e.g. a particular
        window or component. For example, a window that's created
        by the <code>jmri.jmrit.speedometer.SpeedometerFrame</code>
        class (from the
        <code>src/jmri/jmrit/speedometer/SpeedometerFrame.java</code>
        file) should have its window-specific help in a file at
        <code>package/jmri/jmrit/speedometer/SpeedometerFrame.shtml</code>.</li>

        <li>html - general descriptions, tutorials, etc. This in
        turn in organized into directories that represent general
        areas.</li>

        <li>manual - the most recent version of the DecoderPro et
        al manuals reformatted for use in the help system. (Older
        ones are stored in the <a href="WebSite.shtml">main web
        site</a>)</li>
      </ul>
      
      <p>While this is how we would LIKE our help files organized, help pages are created
      by members of the community and sometimes general descriptions are put in the package
      directory rather than the html directory and vice versa. [If you see something that 
      needs to be moved, please post a note to the jmri-developers online groups.io forum
      as there are members who occassionally try to do some housekeeping.]</p>
      
      <p>In the long run, we want only two branches to the help file
      structure: the "package" part of the tree for help
      information that is specific to a particular piece of code,
      and another part of the tree for more general information.
      (It's a religious issue whether that 2nd part should be
      called "html" or "manual"; the key thing is we end up with
      just one). The web is meant to be a <em>web</em>, with many
      paths through it to reach content. The second part of the
      tree ("html") should also be organized as "one page, one topic", with
      links to connect them as needed.</p>
      
             <p><a href="#helpTop">[Go to top of page]</a></p>
       </div>
 

<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = --> 
      <a name="web" id="web"></a>
      <h2>Web Access to Help Pages</h2>

    <div class="para">      

      It's inconvenient to have to maintain two separate web pages for the main web site and the help
      system. To reduce the need for that, we use a particular form for the web pages in the help system.
      [Additional information can also be found <a href="WebSite.shtml">here.</a>]

      <ul>
        <li>Use ".shtml" file extensions so that the main web
        servers will search the files for <a href=
        "https://httpd.apache.org/docs/1.3/howto/ssi.html">server-side
        includes</a>.</li>

        <li>When you create a new page, start with a copy of either the help/en/TemplateBar.shtml
        or help/en/TemplatePlain.shtml template file, depending on whether or not you want to include
        a "sidebar" (via a file named Sidebar.shtml). This template will put the proper top and bottom
        matter in place to get the page properly displayed.</li>
        
        <li>In general, all help files in the html directory tree use a sidebar.  In general, files
        in the package part of the tree do not. If you are using a sidebar, you may find one that suits
        your purpose in the specific subdirectory in which you are working, in its parent directory, or,
        in rare cases, you can use the one in the html directory itself (either /help/en/html or /help/fr/html).
        
        <p> If none of these meet your needs (or do not exist), you may create a Sidebar.shtml in the subdirectory,
         in which case, you should follow the format of other Sidebar.shtml files in other subdirectories at the 
         same level or in the parent directory. In 2020, there was a major effort to standardize the sidebar files,
         using server-side includes for common parts files in the <a href="../../../parts">
         /help/en/parts directory</a>. Typically a Sidebar.shtml file in a terminal subdirectory (one with no lower
         level) will further reference a "local part" in a file in the same subdirectory and named 
         Sidebar[type]LocalPart.shtml, where [type] would be based on the name of the parent directory, such
         as Hardware or Tool. This use of local part files allows Sidebar.shtml files in terminal subdirectories
         to use identical code, something that makes maintenance significantly easier.</p>

        <p> If you do not need a local part, use the Sidebar.shtml in the parent directory by including
        the following statement in your help file:
        <pre style="font-family: monospace;">
     &lt;!--#include virtual="../Sidebar.shtml" --&gt;
        </pre>
        This line exists in the help template files but does not have the "../". Note also there is no space 
        before the hash sign and a space after the final quote.        
        </li>

        <li>All the page formatting on JMRI help and other web pages is done through included CSS
        files, originally created by John Plocher. These are included from "/css" via Server-Side
        Includes (SSI).  The main file is at <a href="../../../../../css/default.css">/css/default.css</a>
        and works with a few other files in that same directory. Because JavaHelp ignores SSI, the
        CSS formatting is ignored when JavaHelp is displaying the pages within the JMRI itself. In 
        that case, JavaHelp provides the formatting.</li>
     </ul>

             <p><a href="#helpTop">[Go to top of page]</a></p>
       </div>

<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = --> 
      <a name="limitations" id="limitations"></a>     
      <h2>Standards for and Limitations of JavaHelp HTML</h2>

    <div class="para">      

      JavaHelp displays "plain
      old HTML 4.0", without providing some of the syntactic sugar
      provided by many browsers to allow poor HTML to render. 
      Do not include any particular formatting options, specifically
      including embedded CSS commands. 
      There are a couple of specific things to watch for:

      <ul>
        <li>Anchor tags need a specific format. Specifically, they should be written
          <pre style="font-family: monospace;">
&lt;a name="pull" id="pull"&gt;...&lt;/a&gt;
</pre>
          around text content only. It's OK to be empty between the open and close tags.
          It's not OK to combine them into a single <code>&lt;a name="pull"/&gt;</code> 
          tag; don't do that, as it confuses JavaHelp.

          <p>For example, to put an anchor on a heading, do</p>
          <pre style="font-family: monospace;">
&lt;h2&gt;&lt;a name="foo" id="foo"&gt;Foo!&lt;/a&gt;&lt;/h2&gt;
</pre>

          <p>Note: Incorrectly structured anchor tags (not like the
          above) often cause just a &lt; character appearing by
          itself on the rendered help page.</p>
        </li>

        <li>Anchors need to use the "name" attribute as well as the "id" attribute for future 
        compatibility. Name is recognized by JavaHelp but not by the latest versions of html while id
        is not recognized by JavaHelp. See the item above for an example.</li>

        <li>Do not use spaces or <code>%20</code> in anchor names.
        If you must use a phrase for a name, use the underscore character:
        "This_Anchor", not "This Anchor.</li>

        <li>You can use the <code>&lt;code&gt;</code> element, or
        the <code>&lt;pre&gt;</code> element, but you can't use
        both together. <code>&lt;code&gt;</code> is good for
        highlighting in-line text as being code (like we've used it
        here); <code>&lt;pre&gt;</code> is good for making a block
        of inline HTML or Java look right. To give a code-like
        appearance to a block, wrap it in <code>&lt;pre
        style="font-family: monospace;"&gt;</code></li>

        <li>You cannot count on any particular location for your files on the local machine, so all links
        to other help pages need to be relative. Links to XML contents also need to be relative even though
        they are not displayed by JavaHelp.

    <!--    
        <li>DEBATABLE: Use fully qualitifed URLs for references to JavaDocs 
        (e.g. https://www.jmri.org/JavaDoc/doc/jmri/managers/AbstractManager.html). These files are put in
        different places at different times during the development process so relative addresses may or may
        not work.</li>
     -->

        <li>Links to web pages outside the help system work and should be specified as fully qualified, 
        preferably with https://. In most cases they will be automatically opened in an external web browser.
        [If you are already looking at the help page in an external browser, these pages may be opened in a
        new tab or in the same tab (overwriting the current page), depending on how the person who wrote the
        help page coded the reference. As of this writing (2020/04/04), there is an on-going debate as to the
        prefered method.]</li>
      </ul>

             <p><a href="#helpTop">[Go to top of page]</a></p>
       </div>

<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = --> 
      <a name= "check" id="check"></a>
      <h2>Checking Your Changes</h2>

    <div class="para">      
      
      <p>The <a href="ContinuousIntegration.shtml">Continuous Integration</a> process checks all 
      changes to JMRI Help files to make sure they're OK.  If you'd like to run that same check
      while you're working, do:</p>
<pre style="font-family: monospace;">   
    ant scanhelp   
</pre>
      <p>If you do not have access to ant, you should use one of the HTML validation programs available
      online, such as from <a href="https://validator.w3.org/" target="_blank">the W3C Markup Validation
      Service.</a> These services will find many common errors (unmatched tags, etc.), but also sometimes
      give warning or even error messages that do not impact JMRI integration.</p>

             <p><a href="#helpTop">[Go to top of page]</a></p>
       </div>

<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = --> 
      <a name="tocAndIndex" id= "tocAndIndex"></a>
      <h2>Help Table of Contents and Index</h2>

    <div class="para">      
      
      Java Help includes a
      <a href="https://jmri.org/help/en/webtoc.shtml">table of
      contents</a> and an <a href=
      "https://jmri.org/help/en/webindex.shtml">index</a>. These are
      both available as hyperlinks on the web, and provided via a
      nicer user interface when using JavaHelp in the program.

      <p>The underlying information must be manually maintained in
      the help/en/JmriHelp_enTOC.xml and
      help/en/JmriHelp_enIndex.xml files, respectively. JHelpDev
      then makes the files that Java Help needs, and an "ant" step
      in the directory makes the webtoc.shtml and webindex.shtml
      files that are displayed on the web.</p>

      <p>Note: This means you should not manually change the
      webToc.shtml and webindex.shtml files, because those changes
      will be overwritten by later steps.</p>

      <p>The JmriHelp_enTOC.xml and JmriHelp_enIndex.xml files are
      straight-forward XML, and you can manually edit them. Make
      sure to run the JHelpDev "create all" step and "ant" after
      doing so.</p>

      <p>You can also use the JHelpDev tool to add items to the
      table of contents and index if you'd like. There's more info
      on how to do that on the <a href=
      "http://jhelpdev.sourceforge.net/">JHelpDev web site</a>.
      Remember to run "ant" after that to include your updates on
      the web versions.</p>

             <p><a href="#helpTop">[Go to top of page]</a></p>
       </div>

      
<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = --> 
      <a name="jhelpdev" id="jhelpdev"></a>
      <h2>Creating the control files with JHelpDev</h2>

    <div class="para">      
      
      JavaHelp
      uses various XML files to control how the table of contents
      and index are displayed. We create those with <a href=
      "http://jhelpdev.sourceforge.net/">JHelpDev</a>. Please don't
      edit them manually.

      <p>JHelpDev is now included in the JMRI dist. To use the
      tool:</p>

      <ol>
        <li>Make sure you've updated to the most recent version in
        the code repository before getting started.</li>

        <li>You can run in batch mode by running <code>ant</code>
        from the command line in the <code>help/en/</code>
        directory. It'll still pop windows, but should run 
        to completion by itself.  It might take a minute or so.</li>
        
        <li>If you'd like to operate it manually, please 
        follow the rest of these bullets.
        (Or if using Eclipse, right-click on the
        help/en/build.xml file and select Run As Ant Build.)</li>
        
        <li>Start the tool by clicking on the jhelpdev.jar file.
        (If that doesn't work, try running either JHelpDev.csh or
        JHelpDev.bat, depending on what kind of computer you
        have)</li>

        <li>Once the window appears, select "Open Project" under
        the "File" menu.</li>

        <li>Navigate to the "help" directory in your checked out
        copy of the code, then the "en" directory within that, then
        select the "JHelpDev.xml" file and click "Open".</li>

        <li style="list-style: none">
          <p>You may get a message about "[Fatal Error]
          index.html:1:3: The markup declarations contained or
          pointed to by the document type declaration must be
          well-formed." Although it says it's fatal, it's really
          not a problem. Just ignore it. On startup the Map (a file
          containing the JHelpDev index of all anchors in the JMRI
          help system) is regenerated.</p>
        </li>

        <li>By clicking the "Index Editor" tab or the "TOC Editor"
        tab, review and update the Help entries. A red line marks a
        hyperlink that JHelpDev can't locate on disk. Right-click
        on such a line to open the Edit context menu.</li>

        <li>Click the "Create All" button to recreate the TOC,
        Index, etc.</li>

        <li>Then, back on the command line and in the help/en
        directory, invoke "ant index TOC" to create the web index and table
        of contents pages. </li>
      </ol>

      <p>The various control files that JavaHelp uses are stored in
      our code repository, so once you've done this they will show
      as modified. Please check them in when you check in new Help
      files so other people don't have to recreate those control
      files for themselves.</p>

             <p><a href="#helpTop">[Go to top of page]</a></p>
       </div>

<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = --> 
      <a name="code" id="code"></a> 
      <h2>Access To Help in the Code</h2>

    <div class="para">      
      
      Within the JMRI code, access the
      help system comes via the jmri.util.HelpUtil class. (For
      historical reasons, there's a little bit of code in
      apps.Apps, but you should ignore that).

      <p>The easiest way to add a help menu to a frame is to have
      it be a JmriJFrame (which you should do anyway), and call
      addHelpMenu(...) after you've built any other menus.</p>

      <p>By convention, we use a similar file tree for the source
      code and help files. For example, the
      <code>jmri.jmrit.simpleclock.SimpleClockFrame</code> class
      inherits from JmriJFrame, and adds a help menu with the
      line</p>
      <pre style="font-family: monospace;">
  addHelpMenu("package.jmri.jmrit.simpleclock.SimpleClockFrame", true);
</pre>The help file is then located at
<code>help/en/package/jmri/jmrit/simpleclock/SimpleClockFrame.shtml</code>.
      <p>You should add the new page to the JHelpDev index to have JMRI
      accept it as a Help target (see next the heading).</p>
      <p>A number of help files have been put in place without any
      contents; hopefully some users will edit them and contribute
      them back.</p>

             <p><a href="#helpTop">[Go to top of page]</a></p>
       </div>
      
<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = --> 
      <a name="site" id="site"></a>
      <h2>Updating the JMRI.org Web Site</h2>

    <div class="para">      
      
      <p>Changes to Help pages which are checked-in should show up automatically on the
      <a href="WebSite.shtml">JMRI.org web site </a>after a short while. There's a <a href=
      "http://jmri.tagadab.com/jenkins/job/WebSite/job/generate-website/">
      Jenkins job</a> that handles periodic updates for the static
      (from repository, unlike e.g. Javadoc) pages.</p>

             <p><a href="#helpTop">[Go to top of page]</a></p>

       </div>

      <!--#include virtual="/Footer.shtml" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
