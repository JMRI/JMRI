<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: Static Analysis with SpotBugs</title>
  <meta name="author" content="Bob Jacobsen">
  <meta name="keywords" content="JMRI technical code bugs">
  <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
  <!-- are an arbitrary design pattern used by the update.pl script to -->
  <!-- easily replace the common header/footer code for all the web pages -->
  <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
  <!-- or change them to reflect your alternative logo -->
  <!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head><!--#include virtual="/Header" -->

<body>
  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
        <h1>JMRI Code: Static Analysis with SpotBugs</h1>
        SpotBugs is a
        tool that can examine code to find possible problems. It does
      a "static analysis", looking through the code to find certain
      "known bad ideas": Things that are likely to cause
      occasional/intermittent problems, poor performance, etc.
      Because those kinds of problems are hard to find with tests,
      finding them by inspection is often the only realistic
      approach. Having a tool that can do those inspections
      automatically, so that they can be done every time something
      is changed, keeps the code from slowly getting worse and
      worse without anybody noticing until it's too late.

      <p>For more information on SpotBugs, see <a href=
                                                  "https://spotbugs.github.io">the SpotBugs home
              page</a>.</p>

      <p>We routinely run SpotBugs as part of our <a href=
                                                     "ContinuousIntegration.shtml">continuous integration
      process</a>. You can see the results of the most recent build
      online <a href=
      "https://jmri.ci.cloudbees.com/job/Development/job/SpotBugs/lastBuild/">
      here</a>.</p>

      <p>If SpotBugs is finding a false positive, a bug that's not
          really a bug, you can turn it off with an annotation such
      as:</p>
<pre style="font-family: monospace;">
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings("FE_FLOATING_POINT_EQUALITY","OK to compare floats, as even tiny differences should trigger update")
</pre>
      Note that this should be all on one line. Although Java
      itself considers it optional, we require the second "justification"
      argument. Explaining why you've added this annotation to suppress a
      message will help whoever comes after you and is trying to
      understand the code. It will also help make sure you properly
      understand the cause of the underlying bug report: Sometimes what
      seems a false positive really isn't. Annotations without a
      justification clause will periodically be removed.

      <p>For clarity, this annotation also supports the form:</p>
<pre style="font-family: monospace;">
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = "FE_FLOATING_POINT_EQUALITY", justification = "OK to compare floats, as even tiny differences should trigger update")

</pre>
    This can make it easier to see what is what when quickly
scanning through the code.

      <p>If you need to put more than one message type in an
      annotation, use array syntax:</p>
<pre style="font-family: monospace;">
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings("{type1},{type2}","why both are needed")
</pre>

      <p>There are also Java and SpotBugs annotations that can help
          it better understand your code. Sometimes they'll give it
      enough understanding of e.g. when a variable can be null,
      that it'll no longer make false-positive mistakes. For more
      on this, see the <a href=
      "https://docs.oracle.com/javase/tutorial/java/annotations/">Java
      annotations</a> and <a href=
             "http://findbugs.sourceforge.net/manual/annotations.html">SpotBugs
          annotation pages</a>.</p>

      <p>The basics of annotations are covered in a <a href=
      "https://docs.oracle.com/javase/tutorial/java/annotations/">Java
      annotations tutorial</a>.</p>

      <p>It can be useful to mark code with one of the following
          annotations so that SpotBugs does a good job of reasoning
          about it:</p>

      <ul>
        <li><a href=
        "http://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/javax/annotation/Nonnull.html">
        <code>javax.annotation.Nonnull</code></a> - The annotated
        element must not be null. Annotated fields must not be null
        after construction has completed. Annotated methods must
        have non-null return values. Use
        <a href="http://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/javax/annotation/ParametersAreNonnullByDefault.html">javax.annotation.ParametersAreNonnullByDefault</a>
        on the class declaration (the start of the class)
        to set @Nonnull for an entire class.
        Note that SpotBugs won't let you compare an @Nonnull value to
        null; that's an error that SpotBugs wants to find via static analysis.
        If you want to double-check at runtime, use 
        <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#requireNonNull-T-">Objects.requireNonNull(..)</a></li>

        <li><a href=
        "http://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/javax/annotation/CheckForNull.html">
        <code>javax.annotation.CheckForNull</code></a> - the
        annotated variable, parameter or return value may have a
        null value, so all uses should appropriately handle that.
        Please put this on method definitions to say that the
        return value should be checked for null.</li>

        <li>
          <a href=
          "http://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/javax/annotation/OverridingMethodsMustInvokeSuper.html">
          <code>javax.annotation.OverridingMethodsMustInvokeSuper</code></a>
          - Used to annotate a method that, if overridden, must (or
          should) be invoke super in the overriding method.
          Examples of such methods include finalize() and clone().

          <p>Note this replaces the deprecated <a href=
                                                  "http://findbugs.sourceforge.net/manual/annotations.html">
                  <code>edu.umd.cs.findbugs.annotations.OverrideMustInvoke</code></a>.</p>
        </li>

        <li><a href=
        "http://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/javax/annotation/CheckReturnValue.html">
        <code>javax.annotation.CheckReturnValue</code></a> -
        annotates a method to say the method has no side-effects,
        so there's no point in calling it without checking its
        return value.</li>

        <li><a href=
        "http://jcip.net/annotations/doc/net/jcip/annotations/Immutable.html">
        <code>net.jcip.annotations.Immutable</code></a> - An object
        of this class can't be changed after it's created. This
        allows both better checking of logic, and also simplifies
        use by your colleagues, so it's good to create classes that
        have this property and then annotate them.</li>

        <li><a href=
        "http://jcip.net/annotations/doc/net/jcip/annotations/NotThreadSafe.html">
        <code>net.jcip.annotations.NotThreadSafe</code></a> - a
        class that isn't thread-safe, so shouldn't be checked for
        concurrency issues. Often used for Swing-based classes, but
        note that some Swing components (e.g. monitor windows,
        classes with listeners) do have to accept input from other
        threads.</li>

        <li><a href=
        "http://jcip.net/annotations/doc/net/jcip/annotations/ThreadSafe.html">
        <code>net.jcip.annotations.ThreadSafe</code></a> - classes
        that do have to be usable for multiple threads. SpotBugs
        generally assumes this, but it's good to put it on a class
        that's intended to be thread-safe as a reminder to future
        developers.</li>
      </ul>For more information about these annotations, please see
      links above and

      <ul>
        <li>The JSR-305 <a href=
        "http://www.javadoc.io/doc/com.google.code.findbugs/jsr305/3.0.1">
        code annotations page</a>,</li>

        <li>the <a href=
        "http://jcip.net/annotations/doc/index.html">Concurrency
        API annotations page</a>, and</li>

        <li>for some older information, the <a href=
                                               "http://findbugs.sourceforge.net/manual/annotations.html">SpotBugs
                annotation page</a>.</li>
      </ul>

      <p>We do not use these annotations:</p>

      <ul>
        <li><a href=
               "http://findbugs.sourceforge.net/manual/annotations.html"><code>
                    javax.annotation.Nullable</code></a> - This doesn't really
        mean what people think it does, as SpotBugs doesn't really
        check anything when this is used. From the SpotBugs documentation:
        <blockquote>
              SpotBugs will treat the annotated items as though they had
              no annotation. In practice this annotation is useful only
            for overriding an overarching NonNull annotation. Use
            javax.annotation.ParametersAreNullableByDefault to set it
            for an entire class. Prefer the use of
            <code>CheckForNull</code>.
          </blockquote>
        </li>
      </ul>

      <h3>Suppressed Warnings</h3>We have turned off the routine
      SpotBugs checking of certain kinds of conditions:

      <dl>
        <dt><a href=
               "http://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#ri-class-implements-same-interface-as-superclass-ri-redundant-interfaces">
                RI_REDUNDANT_INTERFACES</a></dt>

        <dd>This flags cases where a class implements an interface,
        and also inherits from a superclass that already implements
        that interface. This is redundant and untidy, but it can't
        cause the code to malfunction. We have enough of them that
        we've turned off the warning, and will come back to it some
        later time.</dd>

        <dt><a href=
               "http://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#sic-could-be-refactored-into-a-named-static-inner-class-sic-inner-should-be-static-anon">
                SIC_INNER_SHOULD_BE_STATIC_ANON</a>, <a href=
                    "http://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#sic-could-be-refactored-into-a-static-inner-class-sic-inner-should-be-static-needs-this">
                    SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS</a></dt>

        <dd>Static, as opposed to non-static, inner classes
        (classes defined within another class) take less space
        because they don't maintain references to the containing
        object. This warning suggests moving an anonymous (defined
        in-line to the code) inner class to a regular (defined not
        in-line) class so it can be made static. Although probably
        a small improvement, it's a bit of work for a small
        improvement. We have enough of them that we've turned off
        the warning, and will come back to it some later time.</dd>

        <dt><a href=
               "http://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#pzla-consider-returning-a-zero-length-array-rather-than-null-pzla-prefer-zero-length-arrays">
                PZLA_PREFER_ZERO_LENGTH_ARRAYS</a></dt>

        <dd>What should a method that returns an array of values do
        when there aren't any? Returning "null", as opposed to an
        empty array, requires all the calling code to handle a
        special case. In many cases, returning an empty array makes
        the code simpler. But for existing code, that
        simplification is marginal. As this is a design issue, but
        it crops up a lot, we've suppressed these for now just to
        focus on more pressing problems.</dd>

        <dt>Malicious Code</dt>

        <dd>This is a class of warnings centered around the idea
        that data and code methods shouldn't be too visible,
        especially when static. This is true, but JMRI isn't a
        hardened library that's being released into a world of
        people trying to break it, as these changes are a lower
        priority.</dd>

        <dt>Nm</dt>

        <dd>The convention is that class names start with a capital
        letter, and method names (data and code) with a small
        letter.</dd>

        <dt>Se,SvVI</dt>

        <dd>This is a large class of warnings associated with Java
        serialization. JMRI doesn't used serialization, and is
        unlikely to do so in the future, so we suppress these to
        raise the average quality of the issued warnings.</dd>
      </dl>

      <h3>Background</h3>

      <p>Simon White added FindBugs support to our Ant-based build
      chain during the development of JMRI 2.5.5. His note on this
      follows.</p>

      <p>As per feature request 1716873, I've added an ant task to
          run SpotBugs. This will produce a report in HTML in the same
          location as the JMRI jar (i.e. the top level project dir).
      Note the new task first runs ant dist because SpotBugs
      examines the jmri.jar file.</p>

      <p>To run the task:</p>

      <ul>
          <li>Install SpotBugs (for me I put this in
              C:/spotbugs-3.1.1)</li>

          <li>either run
              <pre style="font-family: monospace;">
ant -Dspotbugs.home=C:/spotbugs-3.1.1 spotbugs  (replacing the parameter with your install location)
              </pre>
            or edit the local.properties file and add the line
            <pre style="font-family: monospace;">spotbugs.home=C:/spotbugs-3.1.1</pre>
            setting spotbugs.home to your install location and then run
            <pre style="font-family: monospace;">
ant spotbugs
            </pre>
        </li>
      </ul>On my old machine this takes about 20 minutes but your
      mileage may vary.

      <p>Note that in the build.xml I have set the maximum memory
          -Xmx setting for the spotbugs task to 1024m. If your system
          has more memory, boosting this may speed things up.</p>

      <p>Running this on JMRI 2.5.4 produced the following:</p>

      <table border="1">
        <tr>
          <td>Bad practice Warnings</td>

          <td>164</td>
        </tr>

        <tr>
          <td>Correctness Warnings</td>

          <td>77</td>
        </tr>

        <tr>
          <td>Experimental Warnings</td>

          <td>7</td>
        </tr>

        <tr>
          <td>Malicious code vulnerability Warnings</td>

          <td>221</td>
        </tr>

        <tr>
          <td>Multithreaded correctness Warnings</td>

          <td>90</td>
        </tr>

        <tr>
          <td>Performance Warnings</td>

          <td>459</td>
        </tr>

        <tr>
          <td>Dodgy Warnings</td>

          <td>304</td>
        </tr>

        <tr>
          <th>Total</th>

          <th>1322</th>
        </tr>
      </table>

      <p>A lot of work has gone into JMRI during the 2.12 release
      cycle to bring the bug count down to zero. The <a href=
      "ContinuousIntegration.shtml">Continuous Integration
          server</a> runs SpotBugs twice a day, which helps developers
      see the results of their coding without having to set up to
      run SpotBugs themselves.</p>

      <p>If you are checking code in to the JMRI repository, please
      check the CI server and make sure that your changes do not
      introduce new errors.</p>
       <!--#include virtual="/Footer" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
