<!DOCTYPE html>
<html lang="en">
<head>
  <meta name="generator" content="HTML Tidy for HTML5 for Apple macOS version 5.8.0">
  <!-- Copyright Bob Jacobsen 2008, 2022 -->

  <title>JMRI: DecoderPro - Tour</title>
  <!--#include virtual="/Style.shtml" -->
</head>
<body>
  <!--#include virtual="/Header.shtml" -->

  <div id="mBody">
    <!--#include virtual="Sidebar.shtml" -->

    <div id="mainContent">
      <h1>JMRI: DecoderPro User Guide</h1>

      <h2>A Short Tour</h2>

      <p>This tour demonstrates DecoderPro version 5.1.3. Version 4 works similarly.</p>

      <div class="flex-container">
        <div class="flex-item-30">
          <a href="./images/DP5Start.png"><img src="./images/DP5Start.png"
          alt="DecoderPro 5 welcome screen"></a>
        </div>
        <div class="flex-item-70">
          <h3>Start DecoderPro</h3>
          When you first open DecoderPro, the main window will show. Read the steps and click
          the "New Loco" button to start adding your first decoder. (This assumes you have already
          <a href="../../hardware/index.shtml">connected</a> your computer to your layout and
          have a locomotive on your programming track)
        </div>
      </div>

      <div class="flex-container">
        <div class="flex-item-30">
          <a href="./images/SelDecoder5.png"><img src="./images/SelDecoder5.png"
                                                  alt="Decoder Identification"></a>
        </div>
        <div class="flex-item-70">
          <h3>Decoder and Programmer selection</h3>

          <p>You'll get a new window to configure the programmer with information about a
          specific type of decoder, or an existing locomotive. This will become your locomotive
          roster as you program your decoders</p>

          <p>To start working with a newly-installed decoder, click the "Read type from decoder" button
          to have the programmer read the decoder and attempt to identify it. (You could also
          explicitly tell the programmer the decoder type by selecting it from the "Decoder Installed"
          list)</p>

          <p>While the programmer is talking to the decoder, status will be displayed at the
          bottom of the window; "Idle" or "OK" means that things are working. Number codes will point out
          <a href="../Errors.shtml">errors</a>.<br>
          If it succeeds, it will select the decoder model in the selection box. Usually it will only be
          able to narrow the selection down to a few choices. Check that the right model is selected
          in the "Decoder Installed" list; update the selection if desired.</p>

          <p>Some people prefer a very plain programmer, and some want to have access to every
          feature. To handle this, DecoderPro provides several programming interfaces which you can set in your
          Preferences under Roster > Programmer:</p>

          <ul>
            <li>Basic - A simple one, with just the most popular information such as address and user info.</li>

            <li>Comprehensive - The most complete display, with multiple panes of detailed
            information.</li>

            <li>Advanced - Adds advanced panes to the Comprehensive Programmer.</li>

            <li>Registers - Complete configuration for a register-only decoder</li>

            <li>Sample Club - A sample of how a club might define their own programmer format
            that shows just their set of required variables</li>

            <li>TrainShowBasic</li>

            <li>Tutorial - Not useful for actually programming decoders, this contains examples
            of how various special effects can be obtained when you're constructing your own
            programmer.</li>

            <li>ESU</li>

            <li>Zimo - Adds a Zimo Specific tab to access special elements in their decoders.</li>

            <li>Custom - You can even define your own programmer if you'd prefer to just see the variables
            you use. </li>
          </ul>

          <p>For now, we stay with the "Comprehensive Programmer".</p>
        </div>
      </div>

      <div class="flex-container">
        <div class="flex-item-30">
          <a href="./images/DP4StartScreen.png"><img src="./images/DP4StartScreen.png"
                                                     alt="Create Roster Entry"></a>
        </div>
        <div class="flex-item-70">
          <h3>Creating an entry</h3>

          <p>After a single decoder is selected in the listing on the left, the right-hand side will open and
          allow entering a unique roster ID and the (current) decoder address.</p>
          <p>Continue by clicking "Open Programmer".</p>
        </div>
      </div>

      <div class="flex-container">
        <div class="flex-item-30">
          <a href="./images/EditLoco5.png"><img src="./images/EditLoco5.png"
                                                alt="Open Roster Entry"></a>
        </div>
        <div class="flex-item-70">
          <h3>Filling it in</h3>

          <p>You will be presented a new pane, opening on the first tab "Roster Entry".<br>
          Enter any information on the locomotive model and the decoder installed. None of this is
          programmed in the decoder, except for the Address, but you can't change it here. Still,
          you can keep some notes here to track your model's internals.</p>
        </div>
      </div>

      <div class="flex-container">
        <div class="flex-item-30">
          <a href="./images/BasicPane5.png"><img src="./images/BasicPane5.png"
                                                 alt="Comprehensive Programmer Basic pane"></a>
        </div>
        <div class="flex-item-70">
          <h3>Programmer Details</h3>

          <p class="dl">Each of the tabs opens a new screen you can use to configure different
          aspects of the decoder. The "Basic" pane handles the address and other settings you'll
          need to start.</p>

          <p class="dl">Using the buttons -- On the bottom of each screen are buttons that will
          read values from or write values to the decoder. For example, to do a basic
          configuration, enter values in the fields and click <code>Write sheet</code>. The
          variable fields are color coded to represent their states:</p>

          <dl>
          <dt style="background:orange;">Edited</dt>

          <dd>You've changed this value, or it contains default values from the decoder file.
          This is shown as black numbers on an orange background, since the value differs from what's
          expected or last seen in the decoder.</dd>

          <dt style="background:yellow;">From File</dt>

          <dd>The field contains values read from a locomotive file. This is shown on yellow,
          since we're not certain that the file agrees with the decoder contents.</dd>

          <dt style="background:white;">Read</dt>

          <dd>The value shown has been read from the decoder. This is shown as white to
          indicate that the value is trustworthy.</dd>

          <dt style="background:white;">Stored</dt>

          <dd>The value show has been written to the decoder. This is also shown as
          white.</dd>

          <dt style="background:red;">Unknown</dt>

          <dd>If something goes wrong with the read or write process, we might have a
          completely untrustworthy result. This results in the variable's state being marked
          as UNKNOWN and shown on a red background.</dd>
          </dl>
        </div>
      </div>

      <div class="flex-container">
        <div class="flex-item-30">
          <a href="./images/SpeedTable5.png"><img src="./images/SpeedTable5.png"
                                                  alt="Speed table"></a>
        </div>
        <div class="flex-item-70">
          <h3>Examples</h3>

          <p>For example, after a "Read" the speed table values are shown on white in the first
          image, while in the second image it shows that when you modify a value, it's marked on
          yellow. Doing a write will set the color back to white; doing a read will reset the number to
          the value in the decoder, and also reset the field to white.</p>
        </div>
      </div>

      <div class="flex-container">
        <div class="flex-item-30">
          <a href="./images/FnMap5.png"><img src="./images/FnMap5.png" alt="Function Mappings"></a>
        </div>
        <div class="flex-item-70">
          <h3>Complex interactions - Function Mappings</h3>

          <p>Although having a name for an entire CV is nice, where this really helps is with
          complicated bit-mapped options. Digitrax FX lighting options, for example, require
          configuring two sets of bits into one CV. Another example is configuring a Soundtraxx
          decoder's mapping between functions and sounds. This involves bits and values spread
          across a dozen different CVs, but DecoderPro turns that configuration job into simple
          checking of boxes.</p>

          <p>Each selection box, checkbox or radiobutton is mapped to specific bit(s) in the
          decoder's CVs. The programmer handles the reading and writing of the CVs when the
          individual settings are changed. Instead of bits, you're working with the name or
          description from the decoder manual.</p>
        </div>
      </div>

      <div class="flex-container">
        <div class="flex-item-30">
          <a href="./images/Digitrax5.png"><img src="./images/Digitrax5.png" alt="Digitrax DH142"></a>
        </div>
        <div class="flex-item-70">
          <h3>Decoder-specific programmer Panels</h3>

          <p>DecoderPro is meant to be easily configurable to add new types of decoders. You
          can also add programmer sheets, change their layout, and even redo the entire
          appearance. To do that, DecoderPro is driven by human-readable files in XML format.
          Read how to do that <a href="CreateDecoder.shtml">here</a>.</p>

          <p>These files make it convenient to update DecoderPro to work with a new decoder.
          For example, the unique capabilities of a Digitrax DH142 decoder appear on the
          "Digitrax" tab.</p>

          <p>Additional decoder-specific variables and sheets can be added via configuration
          files. By choosing an industry-standard XML format for decoder information, we hope
          to make it possible to create a complete library. Perhaps we can even interest
          manufacturers in documenting their products in this format.</p>
        </div>
      </div>

      <div class="flex-container">
        <div class="flex-item-30">
          <a href="./images/CvTable5.png"><img src="./images/CvTable5.png" alt="CV Programmer"></a>
        </div>
        <div class="flex-item-70">
          <h3>Direct CV Programming</h3>

          <p>It is also possible to program the CVs directly using the CV Programmer. The "Read"
          and "Write" buttons allow you to work with individual CV contents. Changes made here
          will also update any associated values found on other programmer tabs.</p>
        </div>
      </div>

      <div class="flex-container">
        <div class="flex-item-30">
          <a href="./images/DP5Roster.png"><img src="./images/DP5Roster.png" alt="The Roster"></a>
        </div>
        <div class="flex-item-70">
          <h3>Locomotive Roster</h3>

          <p>DecoderPro maintains a Roster of your locomotives. You can save the decoder
          configuration, and then later work with the stored CV values instead of having to
          read them from the decoder. This saves the time it takes to read a complete decoder,
          which can be quite long. The roster can also store locomotive information for you.
          </p>
          <p>From the DecoderPro main screen, you can select a specific locomotive to work on by
          selecting it from the Roster list and then clicking the "Program..." button.
          The programmer opens with the current values already present on the "Roster Entry" sheet.
          After you made changes and wrote them to the decoder, click "Save to Roster" to store the
          roster information to a file on your computer's local disk; you'll be reminded to do this
          if you close the programmer with any unstored information.</p>

          <p>For more info, see <a href="./Roster.shtml">Roster Help</a>.</p>
        </div>
      </div>

      <div class="flex-container">
        <div class="flex-item-30">
          <img src="./images/DP5FileMenu.png" alt="The File Menu">
        </div>
        <div class="flex-item-30">
          <img src="./images/DP5SettingsMenu.png" alt="The Settings Menu">
        </div>
        <div class="flex-item-30">
          <img src="./images/DP5RosterMenu.png" alt="The Roster Menu">
        </div>
      </div>

      <p>A combination of menus allow you to access and manipulate your roster entries.<br>
      For example you can print the information for a selected roster entry by choosing "Print Rostre &gt; Selected
      Entry" from the File menu.</p>

      <h2>More Info</h2>
      <p>For information on how to set up and use DecoderPro, please see <a href="index.shtml">the
      DecoderPro User Guide</a>.</p>
      <p>Here's more information on <a href="MoreInfo.shtml">how DecoderPro works</a> and
      <a href="CreateDecoder.shtml">how to add a new Decoder Type</a>.</p>

      <!--#include virtual="/Footer.shtml" -->
    </div>
    <!-- close #mainContent -->
  </div>
  <!-- close #mBody -->
  <script src="/js/main.js"></script>
</body>
</html>
