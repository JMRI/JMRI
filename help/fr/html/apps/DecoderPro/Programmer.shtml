<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="fr">
<head>
<!-- Copyright Bob Jacobsen 2008 -->
<!-- UpDated by Blorec Herv&#233;  2013-08-31-->
<title>JMRI: Cr&#233;er un Programmateur Personnalis&#233;</title>

<!-- Style -->
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
<link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
<link rel="icon" href="/images/jmri.ico" TYPE="image/png">
<link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>
<!--#include virtual="/Header" -->
    <div id="mBody">
<!--#include virtual="Sidebar" -->
<div id="mainContent">

<h1>Guide Utilisateur DecoderPro - Cr&#233;er un Programmateur Personnalis&#233;</h1>

<p>Comment puis-je cr&#233;er mon propre programmateur personnalis&#233;?</p>

<p>La r&#233;ponse commence par la cr&#233;ation d'un fichier xml dans le sous-r&#233;pertoire 
"programmers" de la distribution JMRI. Le
contenu du fichier est d&#233;crit ci-dessous.</p>

<dl>
<dt class="left">Sp&#233;cifier les &#233;l&#233;ments &#224; afficher</dt>
<dd class="first">
<p>L'&#233;l&#233;ment de base d'un volet de programmation est un "affichage". Cela signifie que
 le programmateur ne pr&#233;sente qu'une seule variable. Les attributs sont:
<ul>
<li><dfn>name</dfn> - (N&#233;cessaire)
C'est le "nom standard" de la variable qui sera pr&#233;sent&#233;.
<li><dfn>label</dfn> -
S'il est pr&#233;sent, il va &#234;tre utilis&#233; pour marquer la variable sur le volet au lieu du nom ou du nom 
standard de la variable.
<li><dfn>Layout</dfn> -
O&#249; trouver l'&#233;tiquette en ce qui concerne le domaine &#233;ditable,
par exemple, la z&#244;ne de texte. Les valeurs possibles sont "gauche", "au-dessus",
"en dessous", "droit", par d&#233;faut "droit".
<li><dfn>format</dfn> -
<p>Comment la variable devra &#234;tre pr&#233;sent&#233;e. Les variables num&#233;riques peuvent &#234;tre pr&#233;sent&#233;es comme <ul>
<li> un champ de texte &#233;ditable, qui est la valeur par d&#233;faut si rien n'est sp&#233;cifi&#233;
<li><dfn>hslider</dfn> - un curseur horizontal
<li><dfn>vslider</dfn> - un curseur vertical
</ul>
<p>Enum variables peuvent &#234;tre pr&#233;sent&#233;es comme
<ul>
<li> une z&#244;ne de s&#233;lection, qui est la valeur par d&#233;faut si rien n'est
sp&#233;cifi&#233;
<li><dfn>radiobuttons</dfn> - Chaque valeur possible est pr&#233;sent&#233;e comme un bouton individuel
<li><dfn>checkbox</dfn> - Une liste avec seulement deux &#233;tats peut &#233;galement
&#234;tre pr&#233;sent&#233;e comme une case &#224; cocher
<li><dfn>offradiobutton</dfn> - Un seul bouton qui donne le choix 0 pour la variable lorsqu'il est s&#233;lectionn&#233;
<li><dfn>onradiobutton</dfn> - Un seul bouton qui donne le choix 1 pour la variable lorsqu'il est s&#233;lectionn&#233;
</ul>
<p>Ces deux derniers peuvent &#234;tre utiles pour indiquer quelles parties d'une configuration sont actives, voir 
le volet  "Speed Table" de Comprehensive.xml comme exemple.</p>
<li><dfn>tooltip</dfn> -
Vous permet de sp&#233;cifier une info-bulle qui sera pr&#233;sent&#233;e lorsque le curseur sera &#224; gauche sur la variable.
 S'il n'est pas pr&#233;sent,  l'info-bulle d&#233;fini dans le fichier d&#233;codeur est utilis&#233;. (Note: Ce n'est pas
 encore compl&#232;tement impl&#233;ment&#233;,  mais vous devez les inclure dans vos d&#233;finitions de programmateur car 
ils travailleront bient&#244;t)
</ul>

<a name="display">
<p> Quel nom &#224; afficher est command&#233; par le volet de l'attribut "nameFmt  et l'attribut 'label' sur 
chaque &#233;l&#233;ment d'affichage (variable)</p></a>

<p>Les choix sont:
<ul><li>Si une &#233;tiquette est sp&#233;cifi&#233;e, elle sera utilis&#233;e. Utilisez une &#233;tiquette si
 vous souhaitez un contr&#244;le absolu sur qu'une variable doit &#234;tre appel&#233;e, quel que soit 
le fichier d&#233;codeur qui l'appelle, et que vous n'aimez pas le nom standard.
<li>Le volet  attribut nameFmt est "&#233;l&#233;ment ", auquel cas le nom de l'&#233;l&#233;ment sera utilis&#233; 
ind&#233;pendamment de ce que le fichier d&#233;codeur appelle la variable. Utilisez ceci si vous
 voulez un aspect uniforme pour le volet pour tous les d&#233;codeurs. Mais soyez conscient
 que certains noms standard sont vraiment tellement g&#233;n&#233;rique qu'ils sont inutiles.
<li> Si le volet attribut nnameFmt est autoris&#233; par d&#233;faut, ou contient "mfg", le nom du fichier
 de d&#233;finition de d&#233;codeur sera utilis&#233;. Il s'agit de la forme normale, car il permet au fabricant
 d'indiquer en d&#233;tail ce qu'une variable d&#233;finit.
</ul>
</dd>

<dt class="left">Formatage</dt>
<dd>
<p>Chaque volet du programmateur se compose de lignes et/ou des colonnes (imbriqu&#233;es) .
Les colonnes exposent les variables de haut en bas. Les rang&#233;es exposent les variables 
de gauche &#224; droite. Vous pouvez les imbriquer  pour obtenir des effets diff&#233;rents; pour 
un exemple, voir le volet "Speed Table" du dossier Comprehensive.xml.
Il a deux colonnes, la gauche de chacune utilise une ligne pour mettre des curseurs
 de gauche &#224; droite .
</p>
</dd>

<dt class="left">&#201;l&#233;ments sp&#233;ciaux</dt>
<dd>
Il y a un certain nombre d'&#233;l&#233;ments que vous pouvez utiliser pour obtenir le programmateur
 format&#233; exactement comme vous le souhaitez:
<ul>
<li><dfn>label</dfn> - Ajouter du texte au volet.
<li><dfn>separator</dfn> - Ajouter une ligne de s&#233;paration &#224; un volet. S'il est inclus dans une colonne,
 ce sera une ligne de s&#233;paration horizontale. S'il est inclus dans une ligne, ce sera une ligne verticale.
<li><dfn>cvtable</dfn> - Ins&#233;rer un tableau des valeurs de CV sur le volet.
Pour obtenir le droit d'espacement, etc, vous devriez probablement ne pas combiner
cela avec d'autres variables sur le m&#234;me volet.
<li><dfn>fnmapping</dfn> -Afficher une grille fonction de Mapping .Cela n&#233;cessite des variables avec
 des noms sp&#233;cifiques, qui sont d&#233;crites sur une <A HREF="FnMapping.shtml"> page s&#233;par&#233;e </a>
<li><dfn>dccaddress</dfn> - Afficher une variable combin&#233;e pour l'adresse DCC. Il s'agit d'une case &#224; 
cocher qui permet de s&#233;lectionner l'utilisation de l'adresse courte par rapport &#224; une longue, et un 
champ de texte simple pour entrer l'adresse. Selon la façon dont la case est activ&#233;e, le champ de texte
 permet de configurer l'adresse courte dans CV 1  ou adresse longue dans CV 17/18.
</ul>
</dd>

<dt class="left">Installation de votre nouveau programmateur</dt>
<dd>
<p>
Tous les fichiers .xml dans le sous-r&#233;pertoire "programmers"  appara&#238;tront dans la bo&#238;te de s&#233;lection
 lorsque vous cr&#233;erez un nouveau programmateur dans DecoderPro. Pour utiliser votre nouveau fichier, il
 suffit de mettre dans le sous-r&#233;pertoire "programmers"  du r&#233;pertoire "prefs"  et de le s&#233;lectionnez.
 Vous n'avez pas &#224; red&#233;marrer le programme, la liste est refaite &#224; chaque fois que vous
 ouvrez une nouvelle fen&#234;tre programmateur.

<p> Il ya une option pour pr&#233;senter/masquer les voletsdepuis le fichier d&#233;codeur. Si vous &#233;crivez
 un programmateur t&#232;s basique, vous pouvez les cacher.</p>
</dd>

</dl>

<a name="id">
</a><h3>Comment les variables dans un fichier d&#233;codeur correspondent avec le fichier programmateur</h3>

Chaque fichier d&#233;codeur d&#233;finit
<a HREF="CreateDecoder.shtml#variable"> les variables </a> qui d&#233;crivent des contr&#244;les sp&#233;cifiques dans
 le d&#233;codeur. Le fichier programmateur d&#233;crit ensuite comment les placer sur ces panneaux, de telle sorte
 que l'utilisateur puisse les trouver et les manipuler
<P>
Chaque &#233;l&#233;ment "affichage" dans le fichier programmer d&#233;finit une chose &#224; montrer.
Mais laquel? C'est contr&#244;l&#233; par l'attribut "name" de l'&#233;l&#233;ment "display" . DecoderPro ne prend que "name "
 et regarde &#224; travers la d&#233;finition d&#233;codeur pour un &#233;l&#233;ment "variable" qui a soit le m&#234;me "&#233;l&#233;ment" ou le 
m&#234;me attribut "label".
<P>
Cela a des effets tr&#232;s int&#233;ressants:
<ol>
<LI>Le "nom" dans l'&#233;l&#233;ment "display"  est effectivement un "nom standard", qui peut &#234;tre utilis&#233; dans
 les fichiers de d&#233;finition d&#233;codeur provenant de diff&#233;rents constructeurs. Comme il est distinct du "label"
 sur la variable d&#233;codeur, il est possible d'avoir un fichier programmateur g&#233;n&#233;rique qui fonctionne pour de
 nombreux types de d&#233;codeurs diff&#233;rents, tout en affichant les noms des variables sp&#233;cifiques. Pour en savoir 
plus, s'il vous pla&#238;t <A HREF="#display"> voir ci-dessus </a>.
<LI>
Il vous permet d'utiliser des noms tr&#232;s g&#233;n&#233;riques pour contr&#244;ler o&#249; vont des choses un peu diff&#233;rentes. Par
 exemple, diff&#233;rents d&#233;codeurs sonores donnent diff&#233;rents contr&#244;les. On pourrait avoir "pompe &#224; air", tandis
 qu'un autre n'a pas du tout ceci, et a au lieu "Crissement de frein". Nous ne voulons pas avoir les fichiers
 programmateur contenant des milliards d'&#233;l&#233;ments "display" &#224; ma&#238;triser avec toutes les options possibles.
 Au lieu de cela, nous utilisons des &#233;l&#233;ments avec des noms plus g&#233;n&#233;riques, comme "Option 1 Sound", pour le nom d'affichage.
<br>
La d&#233;finition d&#233;codeur dispose alors d'un "label" de "Airpump" ou que ce soit, et
un "&#233;l&#233;ment" de "l'option 1 Sound". Tout correspond correctement, et
Airpump" appara&#238;t sur l'&#233;cran de l'ordinateur.
</ol>

<!--#include virtual="/Footer" -->
</div>
</body>
</html>
