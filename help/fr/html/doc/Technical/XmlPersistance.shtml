<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- UpDated by Blorec Herv&#233; le 2013-09-09--> 
<html lang="fr">
<!-- Copyright Bob Jacobsen 2004, 2007, 2008 -->
<head>
    <TITLE>
 	JMRI: Persistence XML
    </TITLE>
    <META content="Bob Jacobsen" name="Author">
    <meta name="keywords" content="JMRI technical code xml persistance">

<!-- Style -->
    <meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>
<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">

	    <h1>JMRI: Persistence XML </h1>

<P>
JMRI utilise XML pour la persistance des structures internes, en particulier lors du stockage
des pr&#233;f&#233;rences et des fichiers de panneau.

<P>
La persistance de XML se fait via un code &#233;crit explicitement. Fondamentalement, certaines cat&#233;gories
s'enregistrent aupr&#232;s d'une instance de la "ConfigureManager". La mise en oeuvre de l'un de ceux que nous
avons est celui pour le chargement et le stockage des fichiers XML: jmri.configurexml.
ConfigXmlManager. Quand il est temps d'enregistrer, on dit au ConfigureXmlManager de le faire.
Il va au travers des objets enregistr&#233;s et trouve la classe responsable de la persistance
du stockage de l'objet. Par exemple, abFoo class aura la classe a.b.configurexml.FooXml
localis&#233;e. Si cette cat&#233;gorie est trouv&#233;e, elle est dite pour enregistrer l'objet Foo, et il ajoute un contenu Xml
dans un document JDOM pour le faire. Si ce n'est pas localis&#233;, un message d'erreur est &#233;mis.
<P>
En charge, un fichier XML est lu par le gestionnaire. Chaque &#233;l&#233;ment est examin&#233; par
un attribut "class". S'il est trouv&#233;, cette classe est charg&#233;e et &#224; remis l'&#233;l&#233;ment &#224; traiter. Etc
<P>
C'est assez une m&#233;thode de hackers, et pas tr&#232;s proprement tenu . Il y a une bonne quantit&#233; de
duplication de code, mais peut-&#234;tre parce qu'il vient d'un C + + de base et que
le d&#233;veloppeur souhaite le garder pour des mod&#232;les et classes mixin. Mais il marche!


<h3>Exemple</h3>

Un LightManager conna&#238;t Lights.
<p>
Il y a beaucoup de classes concr&#232;tes mettant en oeuvre l'interface Light:
<p>
<ul>
<li>jmri.jmrix.loconet.LnLight
<li>jmri.jmrix.cmri.serial.SerialLight
<li>jmri.jmrix.powerline.SerialLight
</ul>
Celles-ci ont leurs propres informations internes, ce qui n'est pas toujours le
cas.
<p>
Il ya aussi plusieurs classes concr&#232;tes LightManager pour les traiter
<p>
<ul>
<li>jmri.jmrix.loconet.LnLightManager
<li>jmri.jmrix.cmri.serial.SerialLightManager
<li>jmri.jmrix.powerline.SerialLightManager
</ul>

<p>
Chaque type de gestionnaire est stock&#233; et charg&#233; par l'interm&#233;diaire d'une classe de persistance,
qui se trouve en consultant la classe A avec "XML" ajout&#233; au nom, dans un sous-paquet direct
"configurexml" :
<ul>
<li>jmri.jmrix.loconet.configurexml.LnLightManagerXml
<li>jmri.jmrix.cmri.serial.configurexml.SerialLightManagerXml
<li>jmri.jmrix.powerline.configurexml.SerialLightManagerXml
</ul>

Dans le cas des classes concr&#232;tes Light, le code de persistance du
gestionnaire enregistre directement et charge m&#234;me directement les lumi&#232;res individuelles. Ceci est
parce qu' (&#224; ce jour) un gestionnaire donn&#233; a un seul type de Light (par exemple
LnLightManager n'a pas &#224; se soucier de LnLight). Dans les cas o&#249; cela
n'est pas vrai, par exemple, SignalHeads qui ont plusieurs classes, ils
sont classes de persistance pour les objets individuels, en plus du gestionnaire.

<h3>Ajout d'informations &#224; une Classe</h3>

Si vous souhaitez enregistrer plus de renseignements sur l'&#233;tat, trouver la classe persistante
et ajouter du code pour cr&#233;er et lire des attributs ou des &#233;l&#233;ments.
<p>
Peut-&#234;tre la meilleure fa&#231;on de faire est de cr&#233;er un fichier de panneau de l'&#233;chantillon
de l'objet que vous souhaitez stocker dedans:

<p>
<pre>
  &lt;sensors class="jmri.jmrix.cmri.serial.configurexml.SerialSensorManagerXml" /&gt;
    &lt;sensor systemName="CS3001" /&gt;
  &lt;/sensor&gt;
  &lt;sensors class="jmri.managers.configurexml.InternalSensorManagerXml" /&gt;
   &lt;sensor systemName="IS21" /&gt;
  &lt;/sensors&gt;
  &lt;signalheads class="jmri.configurexml.AbstractSignalHeadManagerXml"&gt;
    &lt;signalhead class="jmri.configurexml.DoubleTurnoutSignalHeadXml" systemName="IH1P"&gt;
      &lt;turnout systemName="CT10" userName="1-bit pulsed green" /&gt;
      &lt;turnout systemName="CT2" userName="1-bit pulsed red" /&gt;
    &lt;/signalhead&gt;
  &lt;/signalheads&gt;
</pre>

<p>
Notez la "classe" attributs. Elle donne le nom pleinement qualifi&#233;
de la classe qui permet de charger ou stocker cet &#233;l&#233;ment particulier. Dans le
cas de capteurs, nous voyons qu'il y a deux gestionnaires en service: un pour C/MRI, et
un pour les capteurs internes. Pour SignalHeads, il n'y a qu'un seul g&#233;rant,
jmri.configurexml.AbstractSignalHeadManager persist&#233; par jmri.configurexml.AbstractSignalHeadManager,
mais chaque SignalHead notamment la mise en oeuvre de classe a sa propre classe persistante.


<p>
 Par exemple pour ajouter des donn&#233;es sur un capteur, le jmri.jmrix.cmri.serial.configurexml.SerialSensorManagerXml
et les classes jmri.managers.configurexml.InternalSensorManagerXml devraient &#234;tre
modifi&#233;es.

<p>
Notez que dans certains cas, il y a une relation d'h&#233;ritage entre la persistance des classes qui peut aider. Par exemple, la classe LocoNet
<a href="http://jmri.org/JavaDoc/doc/jmri/jmrix/loconet/configurexml/LnSensorManagerXml.html"> LnSensorManagerXml </a>
h&#233;rite de
<a href="http://jmri.org/JavaDoc/doc/jmri/configurexml/AbstractTurnoutManagerConfigXML.html"> jmri.configurexml.AbstractSensorManagerConfigXML </a>, qui fait
presque tout le travail d'enregistrement et de chargement des capteurs.

<p>
Si vous ajoutez des attributs ou des &#233;l&#233;ments nouveaux, n'oubliez pas de mettre &#224; jour
la d&#233;finition du format, voir ci-dessous..

<a id="schema">
<h2> Sch&#233;ma de Gestion </h2>

JMRI contr&#244;le la s&#233;mantique de XML utilisant le <a href="XmlSchema.shtml">Sch&#233;ma XML  </a>.

<p>
Par exemple, l'information mise en page est enregistr&#233;e dans des fichiers XML en tant qu'un &#233;l&#233;ment 
de "sch&#233;ma de configuration" , dont le contenu est alors d&#233;fini par un
fichier de sch&#233;ma. Ces fichiers sont conserv&#233;s dans le r&#233;pertoire
<a href="http://jmri.org/xml/schema"> xml/schema </a>.

<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>

