<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">
<!-- UpDated by Blorec Herv&#233; le 2013-09-04-->

<html lang="fr">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: Analyse statique avec FindBugs</title>
  <meta content="Bob Jacobsen" name="Author">
  <meta name="keywords" content="JMRI technical code">
  <!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
      <h1>JMRI: Analyse statique avec FindBugs</h1>FindBugs est un
      outil qui peut examiner le code pour trouver
      d'&eacute;ventuels probl&egrave;mes. Il fait un "analyse
      statique", en regardant &agrave; travers le code pour trouver
      certaines "mauvaises id&eacute;es connues ": Les choses qui
      sont susceptibles de causer des probl&egrave;mes
      occasionnels/intermittents, mauvaise performance, etc Parce
      que ces genre de probl&egrave;mes sont difficile &agrave;
      trouver avec les tests, les trouver par l'inspection est
      souvent la seule approche r&eacute;aliste. Disposer d'un
      outil qui peut faire les inspections automatiquement, afin
      qu'elles puissent se faire &agrave; chaque fois que quelque
      chose est chang&eacute;, prot&egrave;ge le code d'une
      d&eacute;gradation lente sans que quelqu'un le remarque
      jusqu'&agrave; ce qu'il soit trop tard.

      <p>Pour plus d'informations sur FindBugs, voir <a href=
      "http://findbugs.sourceforge.net/">la page d'accueil
      FindBugs</a> .</p>

      <p>Nous ex&eacute;cutons sous forme d'une routine FindBugs
      comme une partie de notre <a href=
      "ContinuousIntegration.shtml">processus continue
      d'int&eacute;gration</a>. Vous pouvez voir les
      r&eacute;sultats des plus r&eacute;centes constructions en
      ligne <a href=
      "https://jmri.ci.cloudbees.com/job/Development/job/FindBugs/lastBuild/">
      ici</a>.</p>

      <p>Si findBugs trouve une erreur positive, un bug qui n'est
      pas r&eacute;ellemnt un bug, vous pouvez l'&eacute;teindre
      avec une annotation tels que:</p>
      <pre style="font-family: monospace;">
@edu.umd.cs.findbugs.annotations.SuppressWarnings("FE_FLOATING_POINT_EQUALITY","OK pour comparer les flottantess, car m&eacute;me les plus infimes diff&eacute;rences 
devraient d&eacute;clencher les mises &agrave; jour")
</pre>Le second argument "justification" est optionnel, mais
hautement recommand&eacute;. Expliquer pourquoi vous avez
ajout&eacute; cette annotation pour supprimer un message aidera
Celui qui viendra apr&egrave;s vous et tentera de comprendre le
code. Il aidera &eacute;galement &agrave; vous assurer que vous
comprenez correctement la cause du rapport du bugg sous-jacent:
Parfois ce qui semble un faux positif ne l'est pas vraiment.

      <p>si vous avez besoin de mettre plus d'un type de message
      dans une annotation, utilisez la syntaxe en tableau:</p>
      <pre style="font-family: monospace;">
@edu.umd.cs.findbugs.annotations.SuppressWarnings("{type1},{type2}","Pourquoi les deux sont n&eacute;cessaire")
</pre>Les annotations de bug peuvent aider &agrave; mieux
comprendre votre code. Parfois, ils vont lui donner suffisamment de
compr&eacute;hension exemple: quand une variable peut &eacute;tre
nulle, que &ccedil;a ne va plus faire de fausses erreurs positives.
Pour plus d'information sur ceci, voir la <a href=
"http://findbugs.sourceforge.net/manual/annotations.html">page des
annotations Findbugs</a> . Elle peut &eacute;tre utile pour marquer
les classes avec une des annotations suivantes de telle sorte que
FindBugs fasse un bon travail de raisonnement &agrave; ce sujet:

      <ul>
        <li><a href=
        "http://findbugs.sourceforge.net/manual/annotations.html">edu.umd.cs.findbugs.annotations.CheckForNull</a>
        - une variable ou un param&egrave;tre peut avoir une valeur
        nulle ,donc toutes les utilisations devraient
        convenablement g&eacute;rer cela.</li>

        <li><a href=
        "http://findbugs.sourceforge.net/manual/annotations.html">edu.umd.cs.findbugs.annotations.CheckReturnValue</a>
        - cette m&eacute;thode n'a aucun effet secondaire, il n'y a
        donc pas lieu de l'appeler sans v&eacute;rifier que c'est
        la valeur de retour</li>

        <li><a href=
        "http://jcip.net/annotations/doc/net/jcip/annotations/Immutable.html">
        net.jcip.annotations.Immutable</a> - Un objet de cette
        classe ne peut pas &eacute;tre modifi&eacute; apr&egrave;s
        sa cr&eacute;ation. Cela permet &agrave; la fois la une
        meilleure v&eacute;rification de la logique, et de
        simplifier &eacute;galement l'utilisation par vos
        coll&egrave;gues, il est donc bon de marquer les classes
        avec cette propri&eacute;t&eacute;.</li>

        <li><a href=
        "http://jcip.net/annotations/doc/net/jcip/annotations/NotThreadSafe.html">
        net.jcip.annotations.NotThreadSafe</a> - une classe qui
        n'est pas un lien de s&eacute;curit&eacute;,ne devrait donc
        pas &eacute;tre v&eacute;rifi&eacute;e pour les
        probl&egrave;mes de simultan&eacute;it&eacute;. Souvent
        utilis&eacute; pour les classes Swing , mais il faut noter
        que certains composants Swing (par exemple, les
        fen&eacute;tres moniteur, les classes avec les auditeurs)
        ne doivent pas accepter l'entr&eacute;e d'autres
        liens.</li>

        <li><a href=
        "http://jcip.net/annotations/doc/net/jcip/annotations/ThreadSafe.html">
        net.jcip.annotations.ThreadSafe</a> - Les classes qui ne
        doivent &eacute;tre utilisables pour de multiples liens.
        FindBugs l'assumes g&eacute;n&eacute;ralement, mais il est
        bon de le mettre sur une classe qui est destin&eacute;e
        &agrave; &eacute;tre un lien de s&eacute;curit&eacute;
        comme un rappel pour les d&eacute;veloppeurs futurs.</li>
      </ul>Pour de plus ample informations au sujet de ces
      annotations, svp voir la <a href=
      "http://jcip.net/annotations/doc/index.html">page dans l'API
      Concurrency</a>.
    </div>

    <p>Simon White a ajout&eacute; le support FindBugs &agrave;
    notre Chaine de construction bas&eacute;e sur Ant pendant le
    d&eacute;veloppement du JMRI 2.5.5. Sa note sur ceci
    suit...</p>

    <p>Comme demande de fonctionnalit&eacute; par 1716873, j'ai
    ajout&eacute; une t&acirc;che Ant pour ex&eacute;cuter
    FindBugs. Ceci va produire un rapport en HTML dans le
    m&eacute;me emplacement que le JMRI jar (c'est &agrave; dire le
    plus haut niveau du r&eacute;pertoire projet ). Notez la
    nouvelle t&acirc;che ex&eacute;cute en premier ant dist parce
    FindBugs examine le dossier jmri.jar. Pour ex&eacute;cuter la
    t&acirc;che:</p>

    <ul>
      <li>Installer Findbugs (pour moi j'ai mis cela dans
      C:/FindBugs-1.3.8)</li>

      <li>copie FindBugs-ant.jar &agrave; partir du
      r&eacute;pertoire lib FindBugs dans le r&eacute;pertoire
      java/lib</li>

      <li>soit ex&eacute;cuter
        <pre>
ant-Dfindbugs.home = C: / FindBugs-1.3.8 FindBugs (rempla&ccedil;ant le param&egrave;tre de votre emplacement d'installation)
</pre>

        <p>ou modifier le build.xml et modifier le param&egrave;tre
        comment&eacute; de findbugs.home &agrave; votre emplacement
        d'installation, puis ex&eacute;cutez</p>
        <pre>
ant FindBugs
</pre>
      </li>
    </ul>Sur mon ancienne machine il faut environ 20 minutes, mais
    votre dur&eacute;e peut varier.

    <p>Notez que dans le build.xml j'ai mis le r&eacute;glage
    maximal de m&eacute;moire-Xmx pour le t&acirc;che FindBugs pour
    1024m. Si votre syst&egrave;me a plus de m&eacute;moire, la
    stimuler peut acc&eacute;l&eacute;rer les choses.</p>

    <p>L'ex&eacute;cution de ceci sur JMRI 2.5.4 donn&eacute; les
    r&eacute;sultats suivants:</p>

    <table border="1">
      <tr>
        <td>Avertissements Mauvaise pratique</td>

        <td>164</td>
      </tr>

      <tr>
        <td>Avertissements Correction</td>

        <td></td>

        <td>77</td>
      </tr>

      <tr>
        <td>Avertissements exp&eacute;rimentaux</td>

        <td>7</td>
      </tr>

      <tr>
        <td>Avertissements vuln&eacute;rabilit&eacute; code
        malveillant</td>

        <td>221</td>
      </tr>

      <tr>
        <td>Avertissements multithread exactitude</td>

        <td></td>

        <td>90</td>
      </tr>

      <tr>
        <td>Avertissements Performance</td>

        <td>459</td>
      </tr>

      <tr>
        <td>Avertissements Louche</td>

        <td>304</td>
      </tr>

      <tr>
        <th>Total</th>

        <th>1322</th>
      </tr>
    </table>

    <p>Beaucoup de travail a &eacute;t&eacute; fait dans JMRI
    pendant le cycle de lib&eacute;ration 2,12 pour amener le
    compteur de bug &agrave; z&eacute;ro. Le <a href=
    "ContinuousIntegration.shtml">serveur d'int&eacute;gration
    continue a fait</a> fonctionner FindBugs deux fois par jour, ce
    qui permet aux d&eacute;veloppeurs de voir les r&eacute;sultats
    de leur codage sans avoir &agrave; ex&eacute;cuter findbugs
    eux-m&eacute;mes.</p>

    <p>Si vous regardez le code dans le d&eacute;p&ocirc;t
    Subversion JMRI, s'il vous pla&icirc;t v&eacute;rifier le
    serveur CI et assurez-vous que vos modifications ne vont pas
    introduire de nouvelles erreurs.</p>
    <!--#include virtual="/Footer" -->
  </div><!-- closes #mainContent-->
  <!-- closes #mBody-->
</body>
</html>
