<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="fr">
<head>
<!-- Translated by Herv&#233; Blorec 2013-09-07 -->
<title>JMRI: Mise &#224; jour de Multi-connexions</title>

<!-- Style -->
<meta http-equiv="Content-Type" content="text/html; charset= iso-8859-1">
<link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
<link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
<link rel="icon" href="/images/jmri.ico" TYPE="image/png">
<link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>
<!--#include virtual="/Header" -->
    <div id="mBody">
<!--#include virtual="Sidebar" -->
<div id="mainContent">

<h1> 
JMRI: Mise &#224; jour de Multi-connexions
</h1>

Cette page est une liste de conseils pour adapter les syst&#232;mes
(sous-r&#233;pertoires jmri.jmrix) vers le nouveau format multi-syst&#232;me.
C'est clairement un travail en cours!

<p>
Fondamentalement, vous devez obtenir toutes les variables statiques
et les  ()m&#233;thodes en instance  hors du code. A leur place,
vous mettrez des r&#233;f&#233;rences &#224; des proc&#233;dures sp&#233;cifiques d'un objet 
SystemConnectionMemo  qui porte les r&#233;f&#233;rences qui ont
l'habitude d'&#234;tre statiques.

<p>
Dans le m&#234;me temps, nous faisons la mise &#224; jour du mod&#232;le Swing, et
un couple d'autres nettoyages mineurs sur le code.


<h2>Dans le r&#233;pertoire du syst&#232;me principal</h2>

Cr&#233;er une sous-classe sp&#233;cifique de SystemConnectionMemo.
Ce qui finira par faire tout l'initialisation gestionnaire, et
transporter des r&#233;f&#233;rences d'objet qui servent &#224; faire par exemple
des variables.

<p>
Ajouter toute ces choses

<h3>Pour chaque m&#233;thode de connexion (par exemple chaque sous-r&#233;pertoire)</h3>.
     
<p>
Modifier la classe ConnectionConfig pour prendre et enregistrer une r&#233;f&#233;rence &#224; un objet SerialPortAdapter, et le retourner depuis la m&#233;thode getAdapter(). Aussi enlevez la m&#233;tode() en instance et sa mise en œuvre.
<pre><code>
    protected void setIntrucsstance() { 
        if (adapter == null) {
            adapter = new PR3Adapter();
        }
    }
</code></pre>

<p>
Modifier la classe d'adaptateur (exemple: PR3Adapter) pour &#233;liminer
l'exemple () et sa mise en œuvre.

<p>
La classe configurexml/ConnectionConfigXml
doit avoir une proc&#233;dure ajout&#233;e:
<pre><code>
    protected void getInstance(Object object) {
        adapter = ((ConnectionConfig)object).getAdapter();
    }
</code></pre>

Nous devrions sans doute le remanier plus tard, mais ceci
est la forme actuelle pour veiller &#224; ce que la bonne classe 
ConnectionConfig soit utilis&#233;e.
Nous le laissons inchang&#233; pour le moment pour
&#233;viter la concurrence avec les serial/network refactoring
<p>
Aussi, changez ceci
<pre><code>
    protected void getInstance() {
      	 adapter= new PR3Adapter();
	}
</code></pre>
pour ceci:
<pre><code>
    protected void getInstance() {
        adapter = new LnHexFilePort();
    }
</code></pre>
<p>
Modifier la classe d'adaptateur (par exemple PR3Adapter) pour enlever
l'exemple() de proc&#233;dure et son application.
<p>
La classe configurexml / ConnectionConfigXml
a besoin d'avoir une proc&#233;dure ajout&#233;e:
<pre><code>
    protected void getInstance(Object object) {
        adapter = ((ConnectionConfig)object).getAdapter();
    }
</code></pre>

<h3>Gestionnaire et Composants JavaBeans</h3>
Pour chaque gestionnaire et  combinaison de Composants JavaBeans, vous devez
les mettre &#224; jour pour ne plus utiliser une instance () de m&#233;thode
pour acc&#233;der au TrafficController. Passer le
SystemConnectionMemo au gestionnaire pour la dur&#233;e de construction est une approche recommand&#233;e, puis, si besoin est
 en passant par les Composants JavaBeans nouvellement cr&#233;&#233;s.
Qui passe la cha&#238;ne de pr&#233;fixe, nom d'utilisateur pour la connexion, etc.

<p>
Le gestionnaire doit &#233;galement utiliser le pr&#233;fixe du syst&#232;me au lieu d'une
seule lettre syst&#232;me fix&#233;e. En utilisant par exemple ". startsWith (getSystemPrefix () +"T")"
est une bonne approche. Ne pas juste v&#233;rifier que le nom commence par le pr&#233;fixe parce
par exemple "L" et "L2" ne sont pas univoques.

<h3>Menu</h3>

Cr&#233;er un sous-r&#233;pertoire swing, s'il n'existe pas d&#233;j&#224;.

<p>
Placez l&#224; le code pour faire le menu , en cas de besoin
quitter une sous-classe derri&#232;re la migration. (voir
jmri.jmrix.loconet.LocoNetMenu et jmri.jmrix.loconet.swing.LocoNetMenu
pour un mod&#232;le)
<p>
Cr&#233;er une classe de fabrique ComponentFactory dans le
souspaquet swing qui peut par exemple cr&#233;er le menu,
et, &#233;ventuellement, les arbres, etc

<p>
Modifier jmri.jmrix.ActiveSystemsMenu pour &#233;liminer
la classe, la cr&#233;ation de menu est automatique &#224; partir de maintenant.

((Chaque fois que vous cr&#233;er et enregistrer un * SystemConnectionMemo,
vous enregistrez aussi le ComponentFactory)

<h3>Pour garder les actions de d&#233;marrage actives</h3>
(Nous allons bient&#244;t refaire ce code bient&#244;t)

<p>
Pour garder les choses en actions, il est pr&#233;f&#233;rable de convertir
les  sous-classes JmriPane. Temporairement, la
connexion du syst&#232;me est alors cr&#233;&#233;z
via l'utilisation de classes internes, comme
jmri.jmrix.loconet.locomon.LocoMonPane$Default

Cela demande aux gens de r&#233;initialiser leurs pr&#233;f&#233;rences pour les actions de d&#233;marrage
, boutons, etc Nous n'allons pas les faire migrer pour
pour eux.

<!--#include virtual="/Footer" -->
    </div>
    </div>
</body>
</html>
