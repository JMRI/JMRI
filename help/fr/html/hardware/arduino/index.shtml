

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//FR" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="fr">

<head>

<!-- Copyright 2020 Jerry Grochow -->
  <!--translated on 2020-12-13 -->
  <title>Hardware Support: Using Arduinos with JMRI</title>
  
  <meta name="author" content="Jerry Grochow">
  <meta name="keywords" content="JMRI arduino DCC++ CMRI serial">
  
     <!--#include virtual="/Style.shtml" -->

</head>

<body>
  <!--#include virtual="/Header.shtml" -->
  <div id="mBody">
    <!--#include virtual="Sidebar.shtml" -->
    <div id="mainContent">

    <h1><a name="top" id="top">Support mat&#233;riel : Utilisation d'Arduinos avec JMRI</a></h1>
    
    <img src=images/JMRIArduinoTitlepicBrackstone.jpg" 
    alt="Benson Valley Railway" align="middle" height="192" width="360">
    <p style="font-size:60%">Cr&#233;dit photo:<a href="http://www.motorhomesites.org.uk/jmri-arduino-setup/" target="_blank">
    http://www.motorhomesites.org.uk/jmri-arduino-setup</a></p>
    
    <p>
    <a href="https://en.wikipedia.org/wiki/arduino" target="_blank">Microcontr&#244;leurs Arduino</a> sont des ordinateurs sp&#233;ciaux qui, gr&#226;ce &#224; des capteurs appropri&#233;s et &#224; d'autres &#233;l&#233;ments &#233;lectroniques,
    peut &#234;tre utilis&#233; pour &#233;muler les centrales et les d&#233;codeurs de  DCC, pour contr&#244;ler les machines d'aiguillage, pour &#233;clairer les b&#226;timents et les paysages, 
    et animer &#224; peu pr&#232;s tout ce qui se trouve dans votre r&#233;seau - le tout sous le contr&#244;le de JMRI.
    </p>
    
    <ul class="snav">
        <li><a href="#intro">Introduction</a></li>
        <li><a href="#connect">Connexion</a></li>
        <li><a href="#using">Utilisation des fonctionnalit&#233;s de lJMRI</a></li>
        <li><a href="#exemple-CMRI">N&#339;ud CMRI &#233;tape par &#233;tape </a></li>
    </ul>
 
 <!-- *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*= -->    
    <h2><a name="intro" id="intro">Introduction &#224; l'utilisation d'Arduinos avec JMRI </a></h2>

    <p>
    Utiliser des arduinos pour votre r&#233;seau n'est pas aussi difficile que vous le pensez. Vous pouvez mettre en place un syst&#232;me d'occupation de canton et faire fonctionner vos capteurs et panneaux et communiquer avec eux en JMRI en quelques heures seulement.  Vous pouvez &#233;galement concevoir une animation de r&#233;seau personnalis&#233; qui est d&#233;clench&#233;e par Logix ou un script Jython et il faut des jours pour en comprendre tous les rouages.  Vous pouvez m&#234;me 
    utilisez un arduino comme centrale DCC avec<a href="../dccpp/index.shtml"> DCC++</a>. C'est vous qui d&#233;cidez.
    </p>

    <p>
    Un logiciel pour d&#233;velopper du code sur votre arduino est gratuit en ligne &#224; l'adresse suivante : <a href="https://www.arduino.cc/" target="_blank">
    arduino.cc</a>. 
    </p>
 
    <p>
    Les arduinos peuvent &#234;tre utilis&#233;s de nombreuses fa&#231;ons sur votre chemin de fer gr&#226;ce &#224; JMRI :
    </p>
    
    <ul>
        <li>En tant que centrale DCC</li>
        <li>Comme un d&#233;codeur DCC install&#233; dans une locomotive</li>
        <li>Comme un d&#233;codeur DCC reli&#233; &#224; un dispositif auxiliaire, y compris les aiguillages et les lumi&#232;res</li>
        <li>Pour d&#233;tecter l'occupation d'un canton &#224; l'aide de capteurs de courant, infrarouges, photo-optiques ou autres</li>
        <li>Contr&#244;ler un relais pour activer ou d&#233;sactiver des accessoires</li>.
        <li>Pour contr&#244;ler directement les lumi&#232;res et cr&#233;er divers effets d'&#233;clairage</li>
        <li>Pour commander des moteurs de diff&#233;rents types (via des tableaux de commande de moteur optionnels), comme pour d&#233;placer des panneaux de signalisation, des grandes roues, etc.</li>
        <li>Associer l'occupation du bloc et le contr&#244;le des moteurs pour cr&#233;er des animations d&#233;clench&#233;es</li>
        <li>Contr&#244;ler les servomoteurs pour cr&#233;er d'autres types d'animations, y compris le fonctionnement des aiguillages, le franchissement des portes, et bien d'autres encore.</li>
    </ul>

    <p>
    JMRI fournit un support pour utiliser un arduino comme centrale DCC (<a href="../dccpp/index.shtml">
    DCC++</a>) ou en tant que d&#233;codeur DCC (en configurant un fichier de d&#233;finition de <a href="../../apps/DecoderPro/CreateDecoder.shtml">d&#233;codeur </a>. 
    Vous pouvez &#233;galement utiliser des arduinos pour contr&#244;ler un ou plusieurs appareils auxiliaires sur votre voie ferr&#233;e en connectant l'arduino &#224; votre ordinateur qui ex&#233;cute JMRI soit par les voies (auquel cas il recevra les commandes comme tout autre d&#233;codeur) soit par un r&#233;seau auxiliaire tel que<a href="../cmri/CMRI.shtml"> C/MRI </a>
    ou <a href="../loconet/Digitrax.shtml">Loconet </a>dans ce cas, ils communiqueront avec JMRI
    en suivant les r&#232;gles de ce protocole.  Les sections ci-dessous vous aideront &#224; d&#233;marrer.
    </p>
    

    <h3>Mat&#233;riel de r&#233;f&#233;rence suppl&#233;mentaire</h3>
    
    <p>
    Vous pouvez trouver des informations sur des projets typiques &#224; diff&#233;rents endroits sur le web.  En voici quelques-uns :
    </p>
    
    <ul>
        <li>Pour les questions sur l'utilisation des arduinos avec le mod&#233;lisme ferroviaire (y compris l'utilisation avec le JMRI), allez au groupe de discussion <a href="https://groups.io/g/arduini" target="_blank">"arduini"  </a></li>.
        <li>Pour des exemples d'animations, de d&#233;codeurs DCC, et autres, voir <a href="https://model-railroad-hobbyist.com/blog/geoff-bunza" target="_blank">
        Le blog de Geoff Bunza</a>. [Beaucoup d'entre eux peuvent facilement &#234;tre adapt&#233;s pour communiquer avec JMRI.]</li>
        <li>Pour obtenir un code arduino permettant de mettre en &#339;uvre un certain nombre des sujets &#233;num&#233;r&#233;s ci-dessus, allez &#224; 
        <a href="https://github.com/Arduini-Projects" target="_blank">cette page dans Github.</a>
        Saisissez &#233;galement des termes de recherche tels que "arduino", "chemin de fer miniature", "DCC" et, bien s&#251;r, "JMRI".  
        <li>Pour tout ce qui concerne les arduinos et JMRI, allez sur <a href="https://www.youtube.com/results?search_query=model+railroading+jmri+arduino" target="_blank"> YouTube pour des centaines de vid&#233;os</a>, certaines avec des descriptions tr&#232;s d&#233;taill&#233;es sur la fa&#231;on de configurer JMRI pour interagir avec des arduinos.</li>
    </ul>
    
    <p>
    De nouveaux blogs et vid&#233;os sont cr&#233;&#233;s presque quotidiennement pour d&#233;crire les utilisations suppl&#233;mentaires des arduinos sur le chemin de fer. 
    Avec l'introduction constante de nouveaux capteurs et contr&#244;leurs &#224; connecter aux broches d'un arduino, il y a rarement un objet contr&#244;lable &#233;lectroniquement qui ne peut pas &#234;tre contr&#244;l&#233; via JMRI.
    </p>

    <p><a href="#top">[Aller en haut de la page]</a></p>     
 
 <!-- *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*= -->
    <h2><a name="connect" id="connect">Connexion &#224; JMRI </a></h2>

    <ul class="snav">
        <li><a href="#CMRI">CMRI</a></li>
        <li><a href="#serial">S&#233;rie</a></li>
        <li><a href="#multi">RS485</a></li>
    </ul>
 

    <p>
    Les Arduinos communiquent avec votre ordinateur Windows, Mac ou Linux de diff&#233;rentes mani&#232;res 
    en fonction de la fonction qu'ils exercent :
    </p>
    
    <ul>
    <li>via un port USB s'il agit comme une <a href="../dccpp/index.shtml">centrale DCC.</a></li>
    <li>via connexion &#224; la voie ou une connexion &#224; <a href="../loconet/Digitrax.shtml">Loconet </a>
    (n&#233;cessite des circuits suppl&#233;mentaires) ou &#224; un r&#233;seau<a href="../can/cbus/index.shtml#thirdpary"> CBUS&trade;</a> si
    agissant comme un d&#233;codeur DCC (voir, par exemple, cette <a href="https://github.com/mrrwa/NmraDcc" target="_blank">
    biblioth&#232;que arduino sur Github</a>)</li>
    <li>via un port USB si vous &#233;mulez un <a href="#CMRI">n&#339;ud CMRI</a></li>
    <li>via TCP/IP en utilisant le <a href="../mqtt/index.shtml">protocole MQTT</a></li>
    <li>via un port USB pour les communications directes <a href="#serial">s&#233;rielles </a></li>
    <li>via un connecteur USB-to-RS485 si de <a href="#multi">multiples arduinos sont connect&#233;s</a> via un r&#233;seau RS485</li>.
    </ul>
    
    <p> Les sections suivantes fournissent des conseils pour utiliser certaines des diff&#233;rentes approches de communication.</p>

    
    <h3><a name="CMRI" id="CMRI">Emulation d'un n&#339;ud CMRI</a></h3>
    
    <p>
    L'un des moyens les plus simples de faire communiquer votre arduino avec JMRI est d'installer un logiciel qui
    lui permet d'&#233;muler un n&#339;ud CMRI. [ Voir <a href="../cmri/index.shtml">la page d'aide CMRI</a> pour l' information sur l'utilisation des n&#339;uds CMRI avec  JMRI]. Sur l'arduino, installez un des C/MRI et l'inclure dans votre croquis (par exemple, la biblioth&#232;que de Michael Adams
    <a href="https://github.com/madleech/ArduinoCMRI" target="blank_"> disponible sur Github</a> . Voir aussi<a href="#exemple-CMRI">
     ci-dessous </a>pour un ensemble d'&#233;tapes permettant de trouver et de fonctionner avec un arduino comme n&#339;ud CMRI avec JMRI.
    </p>
    
    <p>Certaines notes int&#233;ressantes pour programmer votre arduino en tant que n&#339;ud CMRI:</p>
    
    <ul>
    <li>
    Assurez-vous de r&#233;gler la vitesse de communication (vitesse de transmission) de la m&#234;me mani&#232;re dans votre croquis arduino et dans JMRI <a href="../cmri/CMRI.shtml#L215"> connexion au syst&#232;me CMRI</a>.  Le d&#233;bit en bauds ne sera visible que dans la fen&#234;tre Pr&#233;f&#233;rences->Connexions de JMRI si vous cochez la case "Autres
    Param&#232;tres de connexion".
    </li>
    <li>
    Lors de la d&#233;finition des objets JMRI tels que les capteurs et les aiguillages qui sont identifi&#233;s par des bits IRM, JMRI commence &#224; num&#233;roter les bits CMRI avec 1 alors que le logiciel CMRI commun pour l'arduino commence avec 0. L'&#233;criture ("setting") du bit CMRI 0 dans un croquis arduino met le bit d'entr&#233;e CMRI de JMRI &#224; 1
    pour le n&#339;ud appropri&#233;.  Ainsi, un capteur JMRI nomm&#233; CS2001 (bit 1 sur
    Le n&#339;ud 2) sera contr&#244;l&#233; en mettant le bit 0 du CMRI dans le code dans un sketch arduino.  Lecture ("obtention")
    Le bit 0 du CMRI dans un croquis arduino lira le bit contr&#244;lant l'Aiguillage ou la Lumi&#232;res JMRI attach&#233;es&#224; la sortie CMRI bit 1 en JMRI, par exemple CT2001 ou CL2001 (notez que vous ne pouvez pas avoir &#224; la fois une Lumi&#232;re et un Aiguillage
&#224; la sortie CMRI bit 1 en JMRI, par exemple CT2001 ou CL2001 (notez que vous ne pouvez pas avoir &#224; la fois une Lumi&#232;re et un Aiguillage contr&#244;lant le m&#234;me bit de sortie). Voir aussi l'exemple de configuration ci-dessous</a>.
    </li>
    <li>
    Lorsque vous utilisez des arduinos pour contr&#244;ler les aiguillages JMRI, n'oubliez pas que le comportement de JMRI est diff&#233;rent si l'aiguillage
    est d&#233;fini pour avoir une sortie en r&#233;gime permanent par rapport &#224; une sortie impulsionnelle
    (voir <a href="../cmri/CMRI.shtml#L519"> Options aiguillage avec CMRI</a> pour plus d'informations). Il est plus facile de d&#233;finir l'aiguillage JMRI pour avoir un  sortie constante et d'utiliser la programmation arduino pour prendre les mesures appropri&#233;es selon le type d'aiguillage que vous utilisez.
    </li>
    <li>
    Le retour d'information sur l'aiguillagen fonctionne diff&#233;remment pour C/MRI que pour les autres r&#233;seaux lorsqu'il utilise &#233;galement TCOl
    dans le cadre de votre exploitation. Il est facile de programmer un arduino pour avoir 
les interrupteurs qui d&#233;vient vos aiguillages, Cependant, le comportement de JMRI peut ne pas &#234;tre celui auquel vous vous attendiez (si vous essayez d'envoyer la r&#233;trosignalisation &#224; JMRI, JMRI va effectivement ignorer cela et tenter de ramener l'aiguillage &#224; la position qui est dans la table aiguillage de JMRI).  Voir les<a href="../cmri/CMRI.shtml#L519"> Options d'Aiguillage CMRI  </a> pour les informations correctes. 
    </li>
    <li>
 
    Le <a href="../cmri/CMRI.shtml#L568">gestionnaire de r&#233;seau CMRI</a> peut &#234;tre utilis&#233; pour activer et d&#233;sactiver la communication
  &#224; n'importe quel n&#339;ud CMRI que vous souhaitez, ce qui est utile si un ou plusieurs sont temporairement mis
    hors service ou en cours de test.
    </li>
    <li>
    Lorsque vous changez l'&#233;tat de plusieurs appareils connect&#233;s au CMRI (disons deux aiguillages) en un seul 
    <a href="../../tools/Routes.shtml">Itin&#233;raire</a> ou <a href="../../tools/Logix.shtml">Logix</a>, 
    vous ne pouvez pas &#234;tre s&#251;r d'obtenir les deux bits la premi&#232;re fois que votre programme arduino les demande. Apr&#232;s un certain temps (g&#233;n&#233;ralement une fraction de seconde), vous les obtiendrez, mais programmez votre sketch arduino de mani&#232;re &#224; &#234;tre sensible &#224; cette question.    
    </li>
    </ul>
     
    <p>Voir aussi la section ci-dessous pour un <a href="#exemple-CMRI">Exemple de cr&#233;ation &#233;tape par &#233;tape
   d' un n&#339;ud CMRI &#224; base d'arduino.</a></p>
     
    <p><a href="#top">[Aller en haut de la page]</a></p>     


    <h3><a name="serial" id="serial">Communication s&#233;rie</a></h3>
    
    <p>
    Les Arduinos peuvent &#234;tre directement connect&#233;s &#224; un port USB et utiliser des communications s&#233;rie via un
    <a href="../../tools/scripting/index.shtml">Script Jython </a> ex&#233;cut&#233; en JMRI.  Un    
    exemple est inclus dans <a href="../../../../../jython/SerialPortTest.py">le r&#233;pertoire JMRI Jython.</a>
    Geoff Bunza d&#233;crit un <a href="https://model-railroad-hobbyist.com/node/34392"
    target="_blank">script de communication s&#233;rie pour la collecte des donn&#233;es des capteurs</a> d'un arduino.
    Il n'est pas n&#233;cessaire de configurer une connexion au syst&#232;me JMRI pour utiliser des communications s&#233;rie directes.
    </p>

    <p><a href="#top">[Aller en haut de la page]</a></p>     

 
    <h3><a name="multi" id="multi">Utilisation de plusieurs arduinos via RS-485</a></h3>
    
    <p class="im">
    <img src="images/rs485chain.jpg" alt="RS485 Daisy Chain" align="right" height="211" width="396">
    JMRI ne permet de configurer qu'une seule connexion CMRI pour votre r&#233;seau. Si votre arduino
    est connect&#233; via un c&#226;ble USB, c'est-&#224;-dire un seul arduino.  Cependant, vous pouvez connecter un
    c&#226;ble RS-485 (deux fils) au port USB et connectez plusieurs arduinos en "guirlande" (chaque
    arduino connect&#233; au suivant et enfin une connexion &#224; l'ordinateur), comme le montre ce sch&#233;ma :
    </p>
    
    <p>
    Connectez chaque arduino &#224; une carte de communication RS-485 via les broches s&#233;rie de votre arduino.
    Il existe plusieurs sources pour la carte de communication RS-485
    les prix varient de quelques dollars &#224; plus de 30 dollars.  Vous aurez &#233;galement besoin d'un simple USB-RS485
    disponible aupr&#232;s de plusieurs sources.
    </p>
    
    <p>Voir <a href="http://www.motorhomesites.org.uk/control-single-turnout-with-rs485-and-cmri/" target="_blank">
    Stephen Brackstone &#224; nouveau </a> pour une bonne description de la fa&#231;on de proc&#233;der.
    </p>
    
    <p>Incluez ensuite une biblioth&#232;que RS-485 dans votre sketch d'arduino (par exemple, 
    <a href="https://github.com/madleech/Auto485" target="_blank">
    celui-ci par Michael Adams</a>).  Assurez-vous que chaque arduino se voit attribuer un  num&#233;ro de n&#339;ud CMRI diff&#233;rent
   .  Vous n'avez pas besoin de logiciel suppl&#233;mentaire sur votre ordinateur.
    Il suffit d'indiquer &#224; JMRI &#224; quel port USB le convertisseur est connect&#233; et tous les arduinos sur le RS485
    seront vus par  JMRI.
    </p>

    <p><a href="#top">[Aller en haut de la page]</a></p>     
  

 <!-- *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*= -->     
    <h2><a name="using" id="using">Utilisation des fonctions et outils de JMRI avec Arduinos</a></h2>
    
    <p>
    Les Arduinos peuvent &#234;tre connect&#233;s &#224; presque tous les composants &#233;lectroniques utilis&#233;s sur un chemin de fer miniature, notamment les
    moteurs d'aiguillage, relais d'aiguillage, &#233;clairage &#224; leds et une grande vari&#233;t&#233; de capteurs.  Vous pouvez, 
    par exemple, d&#233;finir un <a href="../../tools/Sensors.shtml">capteur dans JMRI </a>
    qui est identifi&#233; par un bit d'entr&#233;e CMRI et un <a href="../../tools/Turnouts.shtml">aiguillage</a> identifi&#233;
    avec un bit de sortie CMRI, qui sont tous deux trait&#233;s par un arduino pour contr&#244;ler un moteur d'aiguillage.  Ou bien, vous
   pouvezt identifier ces capteurs et ces aiguillages comme &#233;tant "internes" (objets JMRI non associ&#233;s &#224;  
   votre r&#233;seau) et utilisez un <a href="../../tools/scripting/index.shtml">script</a> pour traiter les 
    donn&#233;es qui circulent dans les deux sens vers l'arduino.
    </p>
    
    <p>Voici quelques exemples avec des liens vers des articles explicatifs et/ou du code arduino dont vous pouvez vous inspirer:</p>
    
    <ul>
    <li> D&#233;tecteurs d'occupation de Canton: Connectez un arduino &#224; plusieurs d&#233;tecteurs d'occupation de canton et d&#233;finissez des capteurs JMRI pour signaler si des cantons sont occup&#233;s.
    Les panneaux de configuration afficheront des voies changeant de couleur au fur et &#224; mesure que les cantons passent de l'&#233;tat inoccup&#233; &#224; l'&#233;tat occup&#233; et vice-versa.
    <li>D&#233;tecteurs de localisation : Connectez un arduino &#224; un capteur "ponctuel" tel qu'un module Photocoupleur, un module infrarouge, un lecteur &#224; effet Hall, un lecteur RFID,
    etc.  D&#233;finisser un capteur JMRI qui s'active lorsque le capteur physique est actif et utilisez-le pour contr&#244;ler les itin&#233;raires,
    Logix, ou autre action "d&#233;clench&#233;e" par JMRI.</li>
    <li>Contr&#244;le de l'aiguillage : Connecter un arduino &#224; un moteur d'aiguillage ou &#224; une machine de commutation (il faudra utiliser une carte de circuit imprim&#233; auxiliaire pour alimenter ces dispositifs).
    D&#233;finissez un aiguillage  JMRI et un capteur pour le retour d'information. Si l'arduino re&#231;oit une demande de JMRI pour d&#233;vi&#233; l'aiguillage
    (via le protocole r&#233;seau que vous avez choisi - voir <a href="#connect">ci-dessusr</a>),  l'arduino d&#233;vie l'aiguille et 
  r&#233;gle le capteur.</li>
    <li>Contr&#244;le multiple des aiguillages par communication s&#233;rie : Voir &#233;tape par &#233;tape et code de Geoff Bunza 
    <a href="https://model-railroad-hobbyist.com/node/34417" target="_blank"> here.</a></li>
    <li>D&#233;clenchement de Logix : Connecter un arduino &#224; un interrupteur ou &#224; un bouton-poussoir duTCO. D&#233;finir un capteur JMRI qui est utilis&#233; pour d&#233;clencher un Logix pour
    faire quelque chose (par exemple, d&#233;vier plusieurs aiguillages, allumer des lumi&#232;res, etc.)  Programmer l'arduino pour qu'il r&#232;gle le capteur lorsque l'interrupteur ou le bouton poussoir
    est activ&#233;. </li>
    <li>Contr&#244;le de la lumi&#232;re ou de l'animation : Ajouter une commande &#224; votre arduino, cr&#233;er un <a href="../../tools/Lights.shtml"> objet lumi&#232;re JMRI</a>.
    pour envoyer une commande de contr&#244;le,
    cr&#233;er quelques capteurs dans  JMRI pour obtenir un retour d'information, et utiliser ce <a href="https://github.com/jerryg2003/MRR-arduino-auxmotorcontrol" target="_blank">
    sketch pour contr&#244;ler un moteur auxiliaire, </a> comme celui d'une grande roue.  Utilisez <a href="../../tools/Lights.shtml">Objets lumi&#232;re de JMRI</a>
    pour envoyer des commandes pour modifier la vitesse ou d'autres caract&#233;ristiques de l'animation, soit par des communications en s&#233;rie, soit en utilisant
    les techniques de communication par octet examin&#233;es sur <a href="ArduinoCMRIByteComm.shtml">cette page.</a></li>
    <li>Speedom&#232;tre : surveiller le temps de trajet d'une locomotive entre deux (ou plusieurs) capteurs, et en utilisant 
    la distance qui les s&#233;pare, calculer sa vitesse.  Envoyez ces informations &#224; JMRI soit par des communications en s&#233;rie, soit en utilisant
    les techniques de communication par octet examin&#233;es sur <a href="ArduinoCMRIByteComm.shtml">cette page.</a></li>
    <li>Compteur de voitures : &#224; l'aide de d&#233;tecteurs de position plac&#233;s au-dessus du niveau des boggies et des attelages, faites un sketch arduino
    pour compter les voitures au fur et &#224; mesure qu'elles passent. Connectez-vous &#224; JMRI via <a href="#serial">communications s&#233;rie </a> et &#233;crivez un 
    <a href="../../tools/scripting/index.shtml">script </a>pour &#233;crire le nombre sur un <a href="../../tools/Memories.shtml">objet m&#233;moire JMRI</a>
    qui peut s'afficher sur un <a href="../../apps/PanelPro/index.shtml">panneau montrant votre r&#233;seau.</a></li>
    <li>D&#233;codeur DCC : Transformez votre arduino en un <a href="https://github.com/mrrwa/NmraDcc" target="_blank">d&#233;codeur compatible C/MRI</a>.  
    Utilisez <a href="../../apps/DecoderPro/index.shtml">DecoderPro </a>pour modifier les variables de configuration.</li>
    </ul>
    
    <p>
    Les possibilit&#233;s sont presque infinies.
    </p>

    <p><a href="#top">[Aller en haut de la page]</a></p>     

  
<!-- *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*= -->
 
    <h2><a name="example-CMRI" id="example-CMRI">Exemple &#233;tape par &#233;tape de l'utilisation d'Arduino comme n&#339;ud CMRI</a></h2>
      
    <p>
    Dans cet exemple, nous allons parcourir les principales &#233;tapes de l'utilisation d'un arduino pour surveiller un capteur d'occupation de canton
    et JMRI utilisant ce capteur pour changer la couleur de la voie de la section occup&#233;e sur un TCO.
    Il ne s'agit pas d'un tutoriel sur les arduinos ou sur JMRI, mais plut&#244;t d'un guide pour quelqu'un qui, de mani&#232;re g&#233;n&#233;rale est
    familier avec les deux, mais en essaye de les utiliser ensemble.  On peut trouver bien plus d'informations en consultant  
    les r&#233;f&#233;rences &#233;num&#233;r&#233;es dans <a href="#intro">l'introduction ci-dessus.</a>
    </p>
    
    <ul>
    <li>Connectez d'abord le d&#233;tecteur d'occupation de canton (BOD) que vous utilisez aux broches appropri&#233;es de l'arduino.</li>
    <li>Utilisation de l'IDE <a href="https://www.arduino.cc/en/main/software" target="_blank">arduino 
    (environnement de d&#233;veloppement int&#233;gr&#233;)</a> ou autre environnement de d&#233;veloppement, cr&#233;er (ou t&#233;l&#233;charger) un
    sketch (programme arduino) qui inclut la biblioth&#232;que CMRI.</li>
    <li>Dans le skecth, attribuez &#224; ce n&#339;ud CMRI &#233;mul&#233; le n&#339;ud 1.</li>
    <li>Dans le croquis, utilisez le bit 0 pour envoyer l'&#233;tat du capteur (inoccup&#233;=0 ou occup&#233;=1).  Certains capteurs
    indiquent un bloc occup&#233; par un signal LOW sur la broche de l'arduino alors que les autres passeront en HIGH - soyez s&#251;r
    de savoir savez lequel est lequel pour votre capteur particulier, donc vous r&#233;glez le bit CMRI de mani&#232;re appropri&#233;e.</li>
    <li> Connectez le port USB de votre arduino &#224; un c&#226;ble USB et ensuite &#224; votre ordinateur.</li>
    <li>Note le port USB auquel l'arduino est connect&#233; (sur une machine Windows, par exemple, allez dans le gestionnaire de p&#233;riph&#233;riques et voyez
    quel num&#233;ro de port appara&#238;t lorsque vous branchez le c&#226;ble arduino sur un port USB).</li>
    <li>T&#233;l&#233;chargez le sketch de votre environnement de d&#233;veloppement vers votre arduino.</li>
    <li>Ouvrez <a href="../../apps/PanelPro/index.shtml">JMRI PanelPro.</a></li>
    <li>S&#233;lectionnez &#201;dition->Pr&#233;f&#233;rences->Connexions dans les menus d&#233;roulants, puis "+" pour ajouter une nouvelle connexion.</li>
    <li>S&#233;lectionnez "CMRI" et "Serie" puis le port s&#233;rie auquel votre arduino est connect&#233; comme indiqu&#233; 
    <a href="../cmri/CMRI.shtml#L215"> ici.</a>
    REMARQUE : vous ne pourrez pas faire fonctionner simultan&#233;ment le moniteur s&#233;rie arduino IDE et JMRI, quel que soit l'appareil ouvert
   le second verra que le port est utilis&#233;.</li>
    <li>Cochez "D&#233;finir Connexion Suppl&#233;mentaires" et s&#233;lectionnez le m&#234;me "Baud rate" (vitesse de communication s&#233;rie) que
    que vous avez utilis&#233; dans le sketch arduino.</li>
    <li>Cliquez sur "Configurer N&#339;uds" et ensuite "Ajouter N&#339;ud".  Lorsque la fen&#234;tre "Ajouter un n&#339;ud" s'ouvre, modifiez l'"Adresse du n&#339;ud"
    &#224; 1 et cliquez sur "Ajouter un n&#339;ud" comme indiqu&#233;<a href="../cmri/CMRI.shtml#L296"> ici.</a>
    Fermez cette fen&#234;tre et cliquez sur "Termin&#233;".  N'oubliez pas de cliquer sur "Enregistrer" dans la fen&#234;tre des pr&#233;f&#233;rences.
    <li>Ouvrir la table <a href="../../tools/Sensors.shtml">capteurs </a>et cr&#233;er un capteur CMRI avec le nom de syst&#232;me 1001 (premier bit CMRI sur le n&#339;ud 1)</li>
    <li>Ouvrir la table <a href="../../help/fr/html/tools/Blocks.shtml">canton </a>et cr&#233;er un canton. (set occupancy sensir t$ la sensir que vous venez de cr&#233;er).</li>
    <li>Allez &#224; un panneau que vous avez cr&#233;&#233; et attribuez le canton que vous venez de cr&#233;er &#224; la section de voie appropri&#233;e.</li>
    <li> Faites circuler les trains et regardez l'action ! </li> 
    </ul>
     
    <p><a href="#top">[Aller en haut de la page]</a></p>
    

        <h2></h2>
        <p>CBUS&trade; est une marque d&#233;pos&#233;e du Dr Michael Bolton</p>
        <p></p>

      <!--#include virtual="/Footer.shtml" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>




