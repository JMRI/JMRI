<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="fr">
<head>
<!-- Copyright ($Author$) 2008 -->
<!-- Translated  by Blorec Herv&#233; le 2013-09-10 -->
<title>JMRI: CAN Network Support</title>

<!-- Style -->
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<LINK REL="stylesheet" TYPE="text/css" HREF="/css/default.css"
	MEDIA="screen">
<LINK REL="stylesheet" TYPE="text/css" HREF="/css/print.css"
	MEDIA="print">
<LINK REL="icon" HREF="/images/jmri.ico" TYPE="image/png">
<LINK REL="home" TITLE="Home" HREF="/">
<!-- /Style -->
</HEAD>
<BODY>
<!--#include virtual="/Header" -->
  <div class="nomenu" id="mBody">
    <div id="mainContent">

<h1>
JMRI: Scripts CAN</h1>

JMRI script peut &#234;tre utilis&#233; pour
envoyer et recevoir des trames CAN.
Vous pouvez l'utiliser pour cr&#233;er des routines de test pour
des cartes en cours de d&#233;veloppement, etc

<p>
Cette page d&#233;crit les extensions CAN pour les scripts JMRI.
Pour plus d'informations sur le script JMRI lui-m&#234;me,
voir les
<a href="../../tools/scripting/index.shtml"> pages d'aide</a>.

<p>
Il y a un
<a href="../../../../../jython/CanExample.py"> CanExample.py</a>
exemple basique de script dans le r&#233;pertoire jython.

<h2>Envoi des Trames CAN</h2>

Les Trames CAN sont cr&#233;&#233;s comme des objets, puis mis en file d'attente pour
transmission. L'en-t&#234;te (ID) et les donn&#233;es sont trait&#233;es
s&#233;par&#233;ment.

<pre style="font-family: monospace;">

frame = jmri.jmrix.can.CanMessage(2)  # charge 2 bytes
frame.setId(0x123)
frame.setElement(0, 0x45)
frame.setElement(1, 0x67)
jmri.jmrix.can.TrafficController.instance().sendCanMessage(frame, None)
</pre>

<h2>R&#233;ception de Trames CAN</h2>
Un script peut &#233;couter les trames CAN comme elles sont re&#231;ues
du bus, et s&#233;par&#233;ment pour les trames CAN qui sont
transmises sur le bus par JMRI.
L'interface fournit ces CanListener s&#233;par&#233;ment
via des proc&#233;dures "reply"et "message", respectivement.

<pre style="font-family: monospace;">

class MyCanListener (jmri.jmrix.can.CanListener) :
    def message(self, msg) :
        # g&#232;re la transmission des trames CAN en ignorant leurs retours
    def reply(self, msg) :
        # g&#232;re la r&#233;ception des trames CAN en imprimant leur contenu
        print "received Frame"
        print "ID: 0x"+java.lang.Integer.toHexString(msg.getId())
        print "content: ", msg.toString()
        return
    
jmri.jmrix.can.TrafficController.instance().addCanListener(MyCanListener())
</pre>

<!--#include virtual="/Footer" -->
</body>
</html>
