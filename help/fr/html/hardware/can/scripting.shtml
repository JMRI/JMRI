<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="fr">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">
  <!-- Copyright ($Author$) 2008 -->
  <!-- Translated  by Blorec Herv&#233; le 2013-09-10 -->

  <title>JMRI: CAN Network Support</title><!-- Style -->
  <meta http-equiv="content-type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div class="nomenu" id="mBody">
    <div id="mainContent">
      <h1>JMRI: Scripts CAN</h1>JMRI script peut &ecirc;tre
      utilis&eacute; pour envoyer et recevoir des trames CAN. Vous
      pouvez l'utiliser pour cr&eacute;er des routines de test pour
      des cartes en cours de d&eacute;veloppement, etc

      <p>Cette page d&eacute;crit les extensions CAN pour les
      scripts JMRI. Pour plus d'informations sur le script JMRI
      lui-m&ecirc;me, voir les <a href=
      "../../tools/scripting/index.shtml">pages d'aide</a>.</p>

      <p>Il y a un <a href=
      "../../../../../jython/CanExample.py">CanExample.py</a>
      exemple basique de script dans le r&eacute;pertoire
      jython.</p>

      <h2>Envoi des Trames CAN</h2>Les Trames CAN sont
      cr&eacute;&eacute;s comme des objets, puis mis en file
      d'attente pour transmission. L'en-t&ecirc;te (ID) et les
      donn&eacute;es sont trait&eacute;es s&eacute;par&eacute;ment.
      <pre style="font-family: monospace;">

frame = jmri.jmrix.can.CanMessage(2)  # charge 2 bytes
frame.setId(0x123)
frame.setElement(0, 0x45)
frame.setElement(1, 0x67)
jmri.jmrix.can.TrafficController.instance().sendCanMessage(frame, None)
</pre>

      <h2>R&eacute;ception de Trames CAN</h2>Un script peut
      &eacute;couter les trames CAN comme elles sont re&ccedil;ues
      du bus, et s&eacute;par&eacute;ment pour les trames CAN qui
      sont transmises sur le bus par JMRI. L'interface fournit ces
      CanListener s&eacute;par&eacute;ment via des
      proc&eacute;dures "reply"et "message", respectivement.
      <pre style="font-family: monospace;">

class MyCanListener (jmri.jmrix.can.CanListener) :
    def message(self, msg) :
        # g&egrave;re la transmission des trames CAN en ignorant leurs retours
    def reply(self, msg) :
        # g&egrave;re la r&eacute;ception des trames CAN en imprimant leur contenu
        print "received Frame"
        print "ID: 0x"+java.lang.Integer.toHexString(msg.getId())
        print "content: ", msg.toString()
        return
    
jmri.jmrix.can.TrafficController.instance().addCanListener(MyCanListener())
</pre><!--#include virtual="/Footer" -->
    </div>
  </div>
</body>
</html>
