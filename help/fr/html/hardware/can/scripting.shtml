
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//FR"
"http://www.w3.org/TR/html4/strict.dtd">
<html lang="fr">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X" (vers 31 octobre 2006 - Apple Inc. build 15.17), voir www.w3.org">

  <title>Support mat&#233;riel JMRI - R&#233;seau CAN - Scripting</title>
  <!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html ; charset=utf-8">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
  <!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header.shtml" -->
  <div id="mBody">
      <!--#include virtual="Sidebar.shtml" -->
    <div id="mainContent">

      <h1>Assistance mat&#233;riel : Script - CAN </h1>

      <p>Le script JMRI peut &#234;tre utilis&#233; pour envoyer et recevoir des trames CAN.
      Vous pouvez l'utiliser pour cr&#233;er des routines de test pour les cartes sous
      d&#233;veloppement, etc.</p>

      <p>Cette page d&#233;crit les extensions CAN pour les scripts JMRI.
      Pour plus d'informations sur le script JMRI lui-m&#234;me, voir les
      <a href="../../tools/scripting/index.shtml">pages Aide pour les scripts</a>.</p>

      <p>Il y a un <a href= 
      "../../../../jython/CanExample.py">CanExample.py</a>
      de script basique dans le r&#233;pertoire jython.</p>

      <h2>Exemples de codes de script</h2>

      <h3>Envoi de trames CAN</h3>

      <p>Les trames CAN sont cr&#233;&#233;es en tant qu'objets, puis mises en file d'attente pour
      transmission. L'en-t&#234;te (ID) et les donn&#233;es sont trait&#233;es
      s&#233;par&#233;ment.</p>
      <pre style="font-family : monospace ;">
frame = jmri.jmrix.can.CanMessage(2) # chargera 2 octets
        # g&#233;rer les trames CAN reçus en imprimant leur contenu
frame.setId(0x123)
frame.setElement(0, 0x45)
frame.setElement(1, 0x67)
jmri.jmrix.can.TrafficController.instance().sendCanMessage(frame, None)
</pre>

      <h3>R&#233;ception des Trames CAN</h3>

      <p>Un script peut &#233;couter les trames CAN au fur et &#224; mesure qu'elles sont reçues
      du bus, et s&#233;par&#233;ment pour les trames CAN qui sont
      transmis dans le bus par JMRI. L'interface CanListener
      les fournit s&#233;par&#233;ment via "r&#233;ponse" et "message".
      respectivement.</p>
      <pre style="font-family : monospace ;">
classe MyCanListener (jmri.jmrix.can.CanListener) :
    def message(self, msg) :
        # g&#233;rer les trames CAN transmises en les ignorant
        return
    def reply(self, msg) :
        # g&#233;rer les cadres CAN reçus en imprimant leur contenu
        imprimer "Trame reçue".
        print "ID : 0x "+java.lang.Integer.toHexString(msg.getId())
        imprimer le "contenu" : ", msg.toString()
        return
    
jmri.jmrix.can.TrafficController.instance().addCanListener(MyCanListener())
</pre><a name="documentation" id="documentation"></a>

      <h2>Documentation</h2>

      <h3>Aide JMRI</h3>

      <ul>
        <li>Retour &#224; la Page d'Aide <a href="index.shtml">R&#233;seau CAN principal
       </a>.</li>
      </ul><!--#include virtual="/Footer.shtml" -->
    </div><!-- closes #mainContent-->
  </div><!-- closes #mBody-->
</body>
</html>
