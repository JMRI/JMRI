<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="fr">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">
  <!-- Copyright Bob Jacobsen, John Plocher 2005, 2006, 2008 -->
  <!-- $Id$ -->
  <!-- Translated by Herv&#233; Blorec le 2012/01/18-->

  <title>JMRI: Layout Automation in Java</title><!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <!--#include virtual="/Header" -->

  <div id="mBody">
    <!--#include virtual="Sidebar" -->

    <div id="mainContent">
      <!-- Page Body -->

      <h2>JMRI: Automatisation R&eacute;seau en Java</h2>La
      biblioth&egrave;que JMRI fournit un ensemble puissant
      d'outils pour automatiser votre r&eacute;seau. Si les outils
      int&eacute;gr&eacute;s &agrave; <a href=
      "../../apps/PanelPro/PanelPro.shtml">PanelPro</a> ou les
      <a href="../scripting/index.shtml">capacit&eacute;s de
      scripts</a> ne sont pas suffisantes pour faire ce que vous
      voulez, la solution sera d'&eacute;crire vous-m&ecirc;me vos
      propres programme de commande.

      <p>Cette page d&eacute;crit les classes Java qui ont en
      charge l'&eacute;criture
      &Acirc;&laquo;Automatisation&Acirc;&raquo; JMRI du code en
      Java. C'est des choses comme les signaux d'exploitation, les
      trains, et m&ecirc;me des choses subtiles comme
      l'&eacute;volution du volume du son du d&eacute;codeur quand
      un train passe dans un tunnel.</p>

      <dl>
        <dt class="left">Introduction</dt>

        <dd class="first">
          <p>La classe"Automat" fournit un moyen facile
          d'&eacute;crire l'automatisation par Java pour votre
          r&eacute;seau en utilisant JMRI.</p>

          <p>La classe cl&eacute; est <a href=
          "http://jmri.org/JavaDoc/doc/jmri/jmrit/automat/AbstractAutomaton.html">
          AbstractAutomaton</a>, qui fournit un support de liaison
          pour simplifier le code d'automatisation
          personnalis&eacute;es.</p>

          <p>Aspect essentiel: Ceux-ci s'ex&eacute;cutent dans un
          liens&eacute;par&eacute;, de sorte qu'ils peuvent
          attendre que quelque chose se produise pour que le reste
          du programme continue. Effectivement, chaque Automat est
          un programme distinct s'ex&eacute;cutant quand il le
          doit.</p>

          <p>Il y a plusieurs exemples:</p>

          <ul>
            <li>SampleAutomaton - surveille un capteur, et ajuste
            l' &eacute;tat d'un aiguillage afin qu'elle corresponde
            &agrave; l'&eacute;tat du capteur.</li>

            <li>SampleAutomaton2 - surveille un capteur, et ajuste
            le mouvement d'un d&eacute;codeur de locomotive
            utilisant le mode de programmation ops-mode lorsque
            l'&eacute;tat du capteur change.</li>

            <li>SampleAutomaton3 - une locomotive fonctionne en
            avant et en arri&egrave;re sur un morceau de voie en
            regardant deux capteurs, inversant la locomotive quand
            ils changent d'&eacute;tat.</li>
          </ul>

          <p>Ceux-ci peuvent &ecirc;tre d&eacute;marr&eacute;s
          &agrave; partir du Menu
          &Acirc;&laquo;D&eacute;veloppement&Acirc;&raquo; de l'
          application JmriDemo . Notez qu'ils ne peuvent rien faire
          d'utile sur votre r&eacute;seau, car ils ont les
          num&eacute;ros de Loco qui ne sont pas modifiables. Ils
          sont cens&eacute;s &ecirc;tre des exemples pour votre
          propre programmation, pas des outils utiles .</p>
        </dd>

        <dt class="left">Contr&ocirc;le de Locomotives</dt>

        <dd>
          <p class="example">/ / R&eacute;cup&egrave;re l'instance
          du r&eacute;gulateur pour l'&Acirc; &Acirc;&laquo;adresse
          courte&Acirc;&raquo; 3<br>
          throttle = getThrottle (3, false);</p>

          <p>Cet extrait de code assigne "adresse courte de 3"
          &agrave; la variable &Acirc;&laquo;
          r&eacute;gulateur&Acirc; &Acirc;&raquo; (le
          &Acirc;&laquo;faux&Acirc;&raquo; s&eacute;lectionne
          l'adresse courte; l'adresse longue aurait
          &eacute;t&eacute; pour &Acirc;&laquo;vrai&Acirc;&raquo;).
          Si cela ne fonctionne pas pour une raison quelconque,
          vous obtiendrez un message p&eacute;riodique "toujours en
          attente de r&eacute;gulateur" dans la fen&ecirc;tre de
          Java, et le programme attendra.</p>
        </dd>

        <dt class="left">Interaction avec l'utilisateur</dt>

        <dd>
          <p>Vous pouvez mettre en place des bo&icirc;tes de
          message directement &agrave; partir de Java, mais cela
          prend un peu de code pour le faire. Pour simplifier, au
          d&eacute;but, j'ai ajout&eacute; une classe d'assistance
          "MsgFrame" &agrave; la biblioth&egrave;que JMRI.</p>

          <p>Pour faire une bo&icirc;te de message, vous devez
          d'abord faire un objet de la &Acirc;&laquo;MsgFrame"
          classe:</p>

          <p class="example">Bo&icirc;te MsgFrame = nouvelle
          MsgFrame ();</p>

          <p>(Vous pouvez appelez &ccedil;a comme vous voulez, bien
          s&ucirc;r). Cette ligne devrait aller avec les autres
          d&eacute;clarations, par exemple &agrave; droite
          apr&egrave;s la ligne "DccThrottle= null;. "</p>

          <p>Puis, &agrave; l'int&eacute;rieur des routines de
          test, il y a quelques choses que vous pouvez faire. Pour
          afficher un message et attendre que l'utilisateur clique
          sur un bouton faite:
          &Acirc;&laquo;Continuer&Acirc;&raquo;.</p>

          <p class="example">box.show ("mon texte du message va
          ici", true);</p>

          <p>Le 2&egrave;me argument montre le "bouton Continuer et
          attendre si elle est vraie, et continuer si elle est
          fausse. Donc, si vous souhaitez afficher un message
          d'&eacute;tat pendant que le programme continue &agrave;
          courir, faire:</p>

          <p class="example">box.show ("text message
          d'&eacute;tat", false);</p>

          <p>Si vous avez fait cela, vous pouvez modifier le
          message avec un autre "show", ou vous pouvez faire la
          bo&icirc;te s'en aller avec:</p>

          <p class="example">box.hide ();</p>

          <p>Java a fait faire des travaux pour faire
          appara&icirc;tre la bo&icirc;te et la dessiner. Nous ne
          voulons que retarder le programme de test principal, donc
          j'ai &eacute;crit cette classe d'aide pour faire tout ce
          genre de travail en tant que 2&egrave;me plus faible
          priorit&eacute;. Vous devriez &ecirc;tre capable de
          mettre en place des messages sur l'&eacute;cran sans
          ralentir consid&eacute;rablement le fonctionnement
          (&agrave; moins que le programme attende que le bouton
          &Acirc;&laquo;Continuer&Acirc;&raquo; soit press&eacute;
          pour continuer, des bien s&ucirc;r). Et attendre que
          &Acirc;&laquo;Continuer&Acirc;&raquo; soit ne fera pas
          arr&ecirc;ter l'op&eacute;ration du reste du
          programme.</p>
        </dd>
      </dl><!--#include virtual="/Footer" -->
    </div>
  </div>
</body>
</html>
