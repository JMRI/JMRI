<!-- Ant build.xml file for JMRI development -->
<!-- Bob Jacobsen, Copyright 2002, 2003, 2004 -->

<!-- This file is part of JMRI.                                             -->
<!--                                                                        -->
<!-- JMRI is free software; you can redistribute it and/or modify it under  -->
<!-- the terms of version 2 of the GNU General Public License as published  -->
<!-- by the Free Software Foundation. See the "COPYING" file for a copy     -->
<!-- of this license.                                                       -->
<!--                                                                        -->
<!-- JMRI is distributed in the hope that it will be useful, but WITHOUT    -->
<!-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  -->
<!-- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  -->
<!-- for more details.                                                      -->

<project name="JMRI Config Portable" default="debug" basedir=".">
<!-- basedir="." means all paths are relative to the "java" subdir -->
<!-- in the project.  We expect that lib et al will be present in -->
<!-- .. from there -->

  <description>
  Provides build services for JMRI libraries and applications
  </description>

  <!-- options you might want to change during development,   -->
  <!-- but please change them back before commiting this file -->
  
    <!-- should compiler warn of use of deprecated APIs? (yes/no) -->
    <property name="deprecation" value="no" />
  
    <!-- SDK version (currently 1.4) -->
    <property name="sdk_version" value="1.4" />
  
    <!-- source code version (currently 1.3) -->
    <property name="source_version" value="1.3" />
  
    <!-- JRE version (currently 1.3) -->
    <property name="jre_version" value="1.3" />
    
  <!-- You can specify a DecoderPro/PanelPro config file at runtime -->
  <!-- with e.g. "ant -Dantargline=DecoderProFile.xml decoderpro"   -->

  <!-- set global properties for this build -->
  <property name="source" value="src"/>
  <property name="target" value="classes"/>
  <property name="jartarget" value="."/>
  
  <path id="project.class.path">
    <pathelement location=".." />
    <!-- To compile, this requires checking-out the "scripts" CVS target -->
    <!-- alongside the "all" target - see README for further details and -->
    <!-- for JMRI to have been compiled                                  -->
    <pathelement location="../../java/classes/" />
    <pathelement location="${target}/" />  <!-- last to check for name collisions -->
  </path>

  <target name="init" description="create needed directories">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${target}"/>
  </target>

  <target name="clean" description="remove compilation results to force rebuild">
    <mkdir dir="${target}"/>
    <delete includeEmptyDirs="true">
      <fileset dir="${target}"/>
    </delete>
  </target>

  <target name="copyfiles" depends="init" description="copy resource files">
    <!-- Copy top level resources to include in jar file -->
    <!-- <copy todir="${target}">
      <fileset dir="src/" includes="**/*.properties"  />
    </copy> -->
  </target>

  <target name="compile" depends="init, copyfiles" description="compile source, omitting tests">
    <!-- Compile the java code from ${source} into ${target} -->
    <javac srcdir="${source}" 
           destdir="${target}"
           source="${source_version}" 
           target="${jre_version}" 
           fork="true"
           memoryinitialsize="256m"
           memorymaximumsize="256m"
           deprecation="${deprecation}"
           debug="no" >
       <classpath refid="project.class.path"    />
    </javac>
  </target>

  <target name="debug" depends="init, copyfiles" description="compile source with debugging on, omitting tests">
    <!-- Compile the java code from ${source} into ${target} -->
    <javac srcdir="${source}" 
           destdir="${target}" 
           source="${source_version}" 
           target="${jre_version}" 
           fork="true"
           memoryinitialsize="256m"
           memorymaximumsize="256m"
           deprecation="${deprecation}"
           debug="yes" >
       <classpath refid="project.class.path"    />
    </javac>
  </target>


  <!-- The next target is NetBeans-specific, but is here so it -->
  <!-- can use other info defined in this file -->
  <target name="profile-nb" depends="debug" description="build and run DecoderPro app with NetBeans profiling">
    <property name="antargline" value="DecoderProConfig2.xml" />
    <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
    <nbprofiledirect>
       <classpath refid="project.class.path"    />
    </nbprofiledirect>
    <java classname="apps.DecoderPro.DecoderPro"
            dir=".." 
	        fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="java.library.path" path=".:lib/"/>       
       <jvmarg value="${profiler.info.jvmargs.agent}"/>
       <!-- <jvmarg value="-verbose"/> -->
       <!-- <jvmarg value="-verbosegc"/> -->
       <!-- <jvmarg value="-Xloggc:memory.vgc"/> --> <!-- for JTune -->
       <arg value="${antargline}"/>
    </java>
  </target>

  <target name="jar" depends="compile"  
          description="create working jar file with current contents">
    <jar jarfile="${jartarget}/config-portable.jar" 
         basedir="${target}"
         compress="true" />   <!-- compress="true" is default -->
    <!-- Starting with JMRI 1.9, building the JAR index crashes.  -->
    <!-- This appears to be due to a problem with compression in  -->
    <!-- one of the referenced jar files, but we don't know which -->
    <!-- <exec executable="jar" dir="${jartarget}"> -->
    <!--	<arg line="i jmri.jar"/>                -->
    <!-- </exec>                                    -->
  </target>


 <target name="dist" depends="clean, init, debug, jar"
 		 description="create a distribution jar file"/>

</project>


