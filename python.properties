# Python Interpreter Properties
#
# JMRI searches for a python.properties file in the User Files
# directory, the Settings directory, and the installation directory in order,
# and uses the first python.properties file found. It is recommended that users
# copy the python.properties file from the installation directory into the
# User Files or Settings directory instead of editing python.properties in the
# installation directory.

# Augment the default search path for module files. The format is the same as
# the shell's PATH: one or more directory pathnames separated by os.pathsep
# (e.g. colons on Unix or semicolons on Windows). Non-existent directories are
# silently ignored.
# The directory in the JMRI Scripts File Location preference and the jython
# directory in the JMRI installation are automatically appended to the path.
# In addition to normal directories, individual python.path entries may refer to
# zipfiles containing pure Python modules (in either source or compiled form).
# Extension modules cannot be imported from zipfiles.
# Note that paths in Windows need to use double backslashes instead of single
# backslashes (use C:\\python\\path instead of C:\python\path).
python.path=

# Scan the classpath for Java packages if False. This allows Java packages to be
# imported into a Python script without using "import" statements for each Java
# package at the cost of a slower initialization of the Python interpreter and
# possibly more memory use.
# The Jython default and recommended setting is True.
# The JMRI default is False for ease of use.
# Note that the first character of True or False needs to be capitalized.
python.cachedir.skip=False

# Use the Jython PythonInterpreter.execfile() method to execute Python files
# instead of using the PythonInterpreter.eval() method if set to true.
# Note that Python code embedded in a panel or run from the Script Input window
# will always use the eval() method.
# Setting this to true will allow unusually large script files to be run (more
# than 100,000 characters in length).
# The recommended and default setting is false. If setting jython.exec to true,
# you may need to also ensure that jmri_bindings.py is executed at application
# start.
# Note that the first character of true or false needs to be lowercase.
jython.exec=false
