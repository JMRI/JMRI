package jmri.util;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.junit.Assume;
import org.junit.Assert;
import org.junit.jupiter.api.*;

/**
 * Builds the help index page for the JMRI help pages that's accessed as files
 * by the user's web browser.
 * 
 * @author Daniel Bergqvist  Copyright (C) 2021
 */
public class BuildHelpStubFilesTest {

    private String _lang;
    private String _stubFolder;
    private String _template;
    private PrintWriter _mapJhmWriter;
    private TreeSet<String> _helpKeys;
    
    
    // The main() method is used when this class is run directly from ant
    static public void main(String[] args) throws IOException, JDOMException {
        boolean enResult = new BuildHelpStubFilesTest().buildIndex("en");
        boolean frResult = new BuildHelpStubFilesTest().buildIndex("fr");
        if (enResult && frResult) {
            System.exit(0);
        } else {
            System.exit(1);
        }
    }
    
    
    private class XmlFile extends jmri.jmrit.XmlFile {
    }
    
    private void generateStubFile(String helpKey) throws IOException {
        Path path = Path.of(_stubFolder + helpKey + ".html");
        if (Files.exists(path)) {
            System.out.format("The file for tag %s already exists%n", helpKey);
        }
        FileWriter fileWriter = new FileWriter(FileUtil.getProgramPath()
                + "help/" + _lang + "/local/stub/"+helpKey+".html");
        try (PrintWriter printWriter = new PrintWriter(fileWriter)) {
            String contents = _template.replaceFirst("<!--HELP_KEY-->", helpKey);
            printWriter.print(contents);
        }
    }
    
    private void parseElement(Element e) throws IOException {
        String helpKey = e.getAttributeValue("target");
        if (helpKey != null) _helpKeys.add(helpKey);
        
        for (Element child : e.getChildren()) {
            parseElement(child);
        }
    }
    
    private void removeStubFiles() {
        Set<File> files = Stream.of(new File(_stubFolder).listFiles())
                  .filter(file -> !file.isDirectory())
                  .collect(Collectors.toSet());
        
        for (File file : files) {
            if (!file.getName().endsWith(".html")) continue;
            if (file.delete()) log.debug("Removed file: {}", file.toString());
            else log.error("Couldn't remove file: {}", file.toString());
        }
    }
    
    private boolean buildIndex(String lang) throws JDOMException, IOException {
        boolean result = true;
        
        _lang = lang;
        _stubFolder = FileUtil.getProgramPath() + "help/" + _lang + "/local/stub/";
        
        Path path = Path.of(FileUtil.getProgramPath() + "help/" + _lang + "/local/stub_template.html");
        _template = Files.readString(path);
        
        _helpKeys = new TreeSet<>();
        
        FileWriter fileWriter = new FileWriter(FileUtil.getProgramPath() + "help/" + _lang + "/local/jmri_map.xml");
        _mapJhmWriter = new PrintWriter(fileWriter);
        
        _mapJhmWriter.println("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>");
        _mapJhmWriter.println("<!DOCTYPE index PUBLIC \"Help Index\" \"http://java.sun.com/products/javahelp/index_2_0.dtd\"><!--generated by jmri.util.BuildHelpStubFilesTest -->");
        _mapJhmWriter.println("<map version=\"1.0\">");
        
        removeStubFiles();
        
        XmlFile xmlFile = new XmlFile();
        Assert.assertNotNull(xmlFile);
        Element e = xmlFile.rootFromName(FileUtil.getProgramPath()
                + "help/" + _lang + "/JmriHelp_" + _lang + "TOC.xml");
        Assert.assertNotNull(e);
        parseElement(e);
        
        xmlFile = new XmlFile();
        Assert.assertNotNull(xmlFile);
        e = xmlFile.rootFromName(FileUtil.getProgramPath()
                + "help/" + _lang + "/JmriHelp_" + _lang + "Index.xml");
        Assert.assertNotNull(e);
        parseElement(e);
        
        for (String helpKey : _helpKeys) {
            try {
                generateStubFile(helpKey);
            } catch (IOException ex) {
                System.out.format("Failed to create stub file for key \"%s\"", helpKey);
                result = false;
            }
            String expandedHelpKey = helpKey.replace(".", "/");
            int pos = expandedHelpKey.lastIndexOf('_');
            if (pos == -1) {
                expandedHelpKey = expandedHelpKey + ".shtml";
            } else {
                expandedHelpKey = expandedHelpKey.substring(0, pos) + ".shtml"
                        + "#" + expandedHelpKey.substring(pos+1);
            }
            _mapJhmWriter.format("<mapID target=\"%s\" url=\"%s\"/>%n", helpKey, expandedHelpKey);
        }
        
        _mapJhmWriter.println("</map>");
        _mapJhmWriter.close();
        
        return result;
    }


    @Test
    public void testBuildIndex() throws JDOMException, IOException {
        Assume.assumeFalse("Ignoring BuildHelpStubFilesTest", Boolean.getBoolean("jmri.skipBuildHelpStubFilesTest"));
        buildIndex("en");
        buildIndex("fr");
    }

    @BeforeEach
    public void setUp() {
        JUnitUtil.setUp();

    }

    @AfterEach
    public void tearDown() {
        JUnitUtil.tearDown();
    }
    
    private final static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(BuildHelpStubFilesTest.class);
}
