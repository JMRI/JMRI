package jmri.jmrix.lenz;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

/**
 * XNetMessageTest.java
 *
 * Description:	tests for the jmri.jmrix.lenz.XNetMessage class
 *
 * @author	Bob Jacobsen
 */
public class XNetMessageTest{

    @Test
    public void testCtor() {
        XNetMessage m = new XNetMessage(3);
        Assert.assertEquals("length", 3, m.getNumDataElements());
      
        //domain checks.
        try {
           m = new XNetMessage(21);
        } catch(IllegalArgumentException iae) {
           // the IllegalArgumentException is expected here.
           // the error below is generated by XNetMessage.
           jmri.util.JUnitAppender.assertErrorMessage("Invalid length in ctor: 21");
        }
        try { 
            m = new XNetMessage(-21);
        } catch(IllegalArgumentException iae){
           // the IllegalArgumentException is expected here.
           // the error below is generated by AbstractMRMessage.
           jmri.util.JUnitAppender.assertErrorMessage("invalid length in call to ctor");
        }
    }

    // check opcode inclusion in message
    @Test
    public void testOpCode() {
        XNetMessage m = new XNetMessage(5);
        m.setOpCode(4);
        Assert.assertEquals("read=back op code", 4, m.getOpCode());
        Assert.assertEquals("stored op code", 0x43, m.getElement(0));
    }

    // Test the string constructor.
    @Test
    public void testStringCtor() {
        XNetMessage m = new XNetMessage("12 34 AB 3 19 6 B B1");
        Assert.assertEquals("length", 8, m.getNumDataElements());
        Assert.assertEquals("0th byte", 0x12, m.getElement(0) & 0xFF);
        Assert.assertEquals("1st byte", 0x34, m.getElement(1) & 0xFF);
        Assert.assertEquals("2nd byte", 0xAB, m.getElement(2) & 0xFF);
        Assert.assertEquals("3rd byte", 0x03, m.getElement(3) & 0xFF);
        Assert.assertEquals("4th byte", 0x19, m.getElement(4) & 0xFF);
        Assert.assertEquals("5th byte", 0x06, m.getElement(5) & 0xFF);
        Assert.assertEquals("6th byte", 0x0B, m.getElement(6) & 0xFF);
        Assert.assertEquals("7th byte", 0xB1, m.getElement(7) & 0xFF);
    }

    @Test
    public void testStringCtorEmptyString() {
        XNetMessage m = new XNetMessage("");
        Assert.assertEquals("length", 0, m.getNumDataElements());
        Assert.assertTrue("empty reply",m.toString().equals(""));
    }

    @Test
    public void testCtorXNetReply(){
        XNetReply x = new XNetReply("12 34 AB 03 19 06 0B B1");
        XNetMessage m = new XNetMessage(x);
        Assert.assertEquals("length", x.getNumDataElements(), m.getNumDataElements());
        Assert.assertEquals("0th byte", x.getElement(0)& 0xFF, m.getElement(0)& 0xFF);
        Assert.assertEquals("1st byte", x.getElement(1)& 0xFF, m.getElement(1)& 0xFF);
        Assert.assertEquals("2nd byte", x.getElement(2)& 0xFF, m.getElement(2)& 0xFF);
        Assert.assertEquals("3rd byte", x.getElement(3)& 0xFF, m.getElement(3)& 0xFF);
        Assert.assertEquals("4th byte", x.getElement(4)& 0xFF, m.getElement(4)& 0xFF);
        Assert.assertEquals("5th byte", x.getElement(5)& 0xFF, m.getElement(5)& 0xFF);
        Assert.assertEquals("6th byte", x.getElement(6)& 0xFF, m.getElement(6)& 0xFF);
        Assert.assertEquals("7th byte", x.getElement(7)& 0xFF, m.getElement(7)& 0xFF);
    }

    // test setting/getting the opcode
    @Test
    public void testSetAndGetOpCode(){
        XNetMessage m = new XNetMessage("12 34 56");
        Assert.assertEquals(0x1,m.getOpCode());
        m.setOpCode(0xA);
        Assert.assertEquals(0xA,m.getOpCode()); 
        //domain checks.
        m.setOpCode(21);
        jmri.util.JUnitAppender.assertErrorMessage("Opcode invalid: 21");
        m.setOpCode(-21);
        jmri.util.JUnitAppender.assertErrorMessage("Opcode invalid: -21");
    }

    // test setting/getting the opcode
    @Test
    public void testGetOpCodeHex(){
        XNetMessage m = new XNetMessage("12 34 56");
        Assert.assertEquals("0x1",m.getOpCodeHex());
        m.setOpCode(0xA);
        Assert.assertEquals("0xa",m.getOpCodeHex()); 
    }

    // check parity operations
    @Test
    public void testParity() {
        XNetMessage m;
        m = new XNetMessage(3);
        m.setElement(0, 0x21);
        m.setElement(1, 0x21);
        m.setParity();
        Assert.assertEquals("parity set test 1", 0, m.getElement(2));
        Assert.assertEquals("parity check test 1", true, m.checkParity());

        m = new XNetMessage(3);
        m.setElement(0, 0x21);
        m.setElement(1, ~0x21);
        m.setParity();
        Assert.assertEquals("parity set test 2", 0xFF, m.getElement(2));
        Assert.assertEquals("parity check test 2", true, m.checkParity());

        m = new XNetMessage(3);
        m.setElement(0, 0x18);
        m.setElement(1, 0x36);
        m.setParity();
        Assert.assertEquals("parity set test 3", 0x2E, m.getElement(2));
        Assert.assertEquals("parity check test 3", true, m.checkParity());

        m = new XNetMessage(3);
        m.setElement(0, 0x87);
        m.setElement(1, 0x31);
        m.setParity();
        Assert.assertEquals("parity set test 4", 0xB6, m.getElement(2));
        Assert.assertEquals("parity check test 4", true, m.checkParity());

        m = new XNetMessage(3);
        m.setElement(0, 0x18);
        m.setElement(1, 0x36);
        m.setElement(2, 0x0e);
        Assert.assertEquals("parity check test 5", false, m.checkParity());

        m = new XNetMessage(3);
        m.setElement(0, 0x18);
        m.setElement(1, 0x36);
        m.setElement(2, 0x8e);
        Assert.assertEquals("parity check test 6", false, m.checkParity());
    }

    @Test
    public void testGetElementBCD(){
        XNetMessage m = new XNetMessage("12 34 56");
        Assert.assertEquals("BCD value",Integer.valueOf(12),m.getElementBCD(0));
        Assert.assertEquals("BCD value",Integer.valueOf(34),m.getElementBCD(1));
        Assert.assertEquals("BCD value",Integer.valueOf(56),m.getElementBCD(2));
    }

    @Test
    public void testLength(){
        XNetMessage m = new XNetMessage("12 34 56");
        Assert.assertEquals("length",3,m.length());
        m = new XNetMessage("12 34 56 78");
        Assert.assertEquals("length",4,m.length());
    }

    @Test
    public void testSetXNetMessageRetries(){
        XNetMessage m = new XNetMessage("12 34 56");
        Assert.assertEquals("Retries ",5,m.getRetries());
        XNetMessage.setXNetMessageRetries(0); 
        // the default number of retires should be 0, so create a message to see. 
        m = new XNetMessage("56 34 12");
        Assert.assertEquals("Retries",0,m.getRetries());
    }

    @Test
    public void testSetXNetMessageTimeout(){
        XNetMessage m = new XNetMessage("12 34 56");
        Assert.assertEquals("Timeout",5000,m.getTimeout());
        XNetMessage.setXNetMessageTimeout(0); 
        // the default timeout should be 0, so create a message to see. 
        m = new XNetMessage("56 34 12");
        Assert.assertEquals("Timeout",0,m.getTimeout());
    }

    @Test
    public void testGetAndSetBroadcastReply(){
        XNetMessage m = new XNetMessage("12 34 56");
        Assert.assertTrue(m.replyExpected()); // reply expected returns 
                                              // !broadcastReply, which defaults
                                              // to false.
        m.setBroadcastReply();
        Assert.assertFalse(m.replyExpected());
    }

    @Test
    public void testEquality(){
       XNetMessage m = new XNetMessage("11 34 45");
       XNetMessage n = new XNetMessage("11 34 45");
       XNetMessage o = new XNetMessage(3);
       o.setElement(0,0x11);
       o.setElement(1,0x34);
       o.setElement(2,0x45);
       Assert.assertEquals("messages equal",m,n);
       Assert.assertEquals("messages equal",m,o);

    }


    // test canned messages.
    @Test
    public void testGetNMRAXNetMsg() {
       XNetMessage m = XNetMessage.getNMRAXNetMsg(jmri.NmraPacket.opsCvWriteByte(2,false,29,32));
       Assert.assertEquals(0xE5,m.getElement(0));
       Assert.assertEquals(0x30,m.getElement(1));
       Assert.assertEquals(0x02,m.getElement(2));
       Assert.assertEquals(0xEC,m.getElement(3));
       Assert.assertEquals(0x1C,m.getElement(4));
       Assert.assertEquals(0x20,m.getElement(5));
       Assert.assertEquals(0x07,m.getElement(6));
    }
 
    @Test
    public void testToMonitorStringNMRAXNetMsg(){
       XNetMessage m = XNetMessage.getNMRAXNetMsg(jmri.NmraPacket.opsCvWriteByte(2,false,29,32));
       Assert.assertEquals("Monitor String","E5 30 02 EC 1C 20 07",m.toMonitorString());
    }
       

    @Test
    public void testGetTurnoutCommandMsg() {
       XNetMessage m = XNetMessage.getTurnoutCommandMsg(5,false,true,true);
       Assert.assertEquals(0x52,m.getElement(0));
       Assert.assertEquals(0x01,m.getElement(1));
       Assert.assertEquals(0x89,m.getElement(2));
       Assert.assertEquals(0xDA,m.getElement(3));

       m = XNetMessage.getTurnoutCommandMsg(5,true,false,true);
       Assert.assertEquals(0x52,m.getElement(0));
       Assert.assertEquals(0x01,m.getElement(1));
       Assert.assertEquals(0x88,m.getElement(2));
       Assert.assertEquals(0xDB,m.getElement(3));

       m = XNetMessage.getTurnoutCommandMsg(5,false,true,false);
       Assert.assertEquals(0x52,m.getElement(0));
       Assert.assertEquals(0x01,m.getElement(1));
       Assert.assertEquals(0x81,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));

       m = XNetMessage.getTurnoutCommandMsg(5,true,false,false);
       Assert.assertEquals(0x52,m.getElement(0));
       Assert.assertEquals(0x01,m.getElement(1));
       Assert.assertEquals(0x80,m.getElement(2));
       Assert.assertEquals(0xD3,m.getElement(3));

       // both thrown and close generates an error message.
       m = XNetMessage.getTurnoutCommandMsg(5,true,true,false);
       jmri.util.JUnitAppender.assertErrorMessage("XPressNet turnout logic can't handle both THROWN and CLOSED yet");
    }

    @Test
    public void testToMonitorStringTurnoutCmdMsg(){
       XNetMessage m = XNetMessage.getTurnoutCommandMsg(5,false,true,true);
       Assert.assertEquals("Monitor String","Accessory Decoder Operations Request: Turnout Address 5(Base Address 1,Sub Address 0) Turn Output 1 On.",m.toMonitorString());
       m = XNetMessage.getTurnoutCommandMsg(5,true,false,true);
       Assert.assertEquals("Monitor String","Accessory Decoder Operations Request: Turnout Address 5(Base Address 1,Sub Address 0) Turn Output 0 On.",m.toMonitorString());
       m = XNetMessage.getTurnoutCommandMsg(5,false,true,false);
       Assert.assertEquals("Monitor String","Accessory Decoder Operations Request: Turnout Address 5(Base Address 1,Sub Address 0) Turn Output 1 Off.",m.toMonitorString());
       m = XNetMessage.getTurnoutCommandMsg(5,true,false,false);
       Assert.assertEquals("Monitor String","Accessory Decoder Operations Request: Turnout Address 5(Base Address 1,Sub Address 0) Turn Output 0 Off.",m.toMonitorString());
    }

    @Test
    public void testGetFeedbackRequestMsg() {
       XNetMessage m = XNetMessage.getFeedbackRequestMsg(5,true);
       Assert.assertEquals(0x42,m.getElement(0));
       Assert.assertEquals(0x01,m.getElement(1));
       Assert.assertEquals(0x80,m.getElement(2));
       Assert.assertEquals(0xC3,m.getElement(3));

       m = XNetMessage.getFeedbackRequestMsg(5,false);
       Assert.assertEquals(0x42,m.getElement(0));
       Assert.assertEquals(0x01,m.getElement(1));
       Assert.assertEquals(0x81,m.getElement(2));
       Assert.assertEquals(0xC2,m.getElement(3));
    }

    @Test
    public void testToMonitorStringFeedbackRequestMsg(){
       XNetMessage m = XNetMessage.getFeedbackRequestMsg(5,true);
       Assert.assertEquals("Monitor String","Accessory Decoder/Feedback Encoder Status Request: Base Address 1,Lower Nibble.",m.toMonitorString());
       m = XNetMessage.getFeedbackRequestMsg(5,false);
       Assert.assertEquals("Monitor String","Accessory Decoder/Feedback Encoder Status Request: Base Address 1,Upper Nibble.",m.toMonitorString());
    }
 
    @Test
    public void testGetServiceModeResultMsg(){
       XNetMessage m = XNetMessage.getServiceModeResultsMsg();
       Assert.assertEquals(0x21,m.getElement(0));
       Assert.assertEquals(0x10,m.getElement(1));
       Assert.assertEquals(0x31,m.getElement(2));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());
    }

    @Test
    public void testToMonitorStringServiceModeResultMsg(){
       XNetMessage m = XNetMessage.getServiceModeResultsMsg();
       Assert.assertEquals("Monitor String","REQUEST: Service Mode Result",m.toMonitorString());
    }

    @Test
    public void testGetExitProgModeMsg(){
       XNetMessage m = XNetMessage.getExitProgModeMsg();
       Assert.assertEquals(0x21,m.getElement(0));
       Assert.assertEquals(0x81,m.getElement(1));
       Assert.assertEquals(0xA0,m.getElement(2));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());
    }

    @Test
    public void testToMonitorStringExitProgModeMsg(){
       XNetMessage m = XNetMessage.getExitProgModeMsg();
       Assert.assertEquals("Monitor String","REQUEST: Normal Operations Resumed",m.toMonitorString());
    }

    @Test
    public void testGetReadPagedCVMsg(){
       XNetMessage m = XNetMessage.getReadPagedCVMsg(29);
       Assert.assertEquals(0x22,m.getElement(0));
       Assert.assertEquals(0x14,m.getElement(1));
       Assert.assertEquals(0x1D,m.getElement(2));
       Assert.assertEquals(0x2B,m.getElement(3));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());
    }

    @Test
    public void testToMonitorStringReadPagedCVMsg(){
       XNetMessage m = XNetMessage.getReadPagedCVMsg(29);
       Assert.assertEquals("Monitor String","Service Mode Request: Read CV 29 in Paged Mode",m.toMonitorString());
    }

    @Test
    public void testGetReadDirectCVMsg(){
       XNetMessage m = XNetMessage.getReadDirectCVMsg(29);
       Assert.assertEquals(0x22,m.getElement(0));
       Assert.assertEquals(0x15,m.getElement(1));
       Assert.assertEquals(0x1D,m.getElement(2));
       Assert.assertEquals(0x2A,m.getElement(3));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());

       // CV > 256, version 3.6+ command.
       m = XNetMessage.getReadDirectCVMsg(300);
       Assert.assertEquals(0x22,m.getElement(0));
       Assert.assertEquals(0x19,m.getElement(1));
       Assert.assertEquals(0x2C,m.getElement(2));
       Assert.assertEquals(0x17,m.getElement(3));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());

       // CV = 1024, version 3.6+ command, a special case.
       // (sends 0 for CV value).
       m = XNetMessage.getReadDirectCVMsg(1024);
       Assert.assertEquals(0x22,m.getElement(0));
       Assert.assertEquals(0x18,m.getElement(1));
       Assert.assertEquals(0x00,m.getElement(2));
       Assert.assertEquals(0x3A,m.getElement(3));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());
    }

    @Test
    public void testToMonitorStringReadDirectCVMsg(){
       XNetMessage m = XNetMessage.getReadDirectCVMsg(29);
       Assert.assertEquals("Monitor String","Service Mode Request: Read CV 29 in Direct Mode",m.toMonitorString());
       m = XNetMessage.getReadDirectCVMsg(300);
       Assert.assertEquals("Monitor String","Service Mode Request (V3.6): Read CV 300 in Direct Mode",m.toMonitorString());
       m = XNetMessage.getReadDirectCVMsg(600);
       Assert.assertEquals("Monitor String","Service Mode Request (V3.6): Read CV 600 in Direct Mode",m.toMonitorString());
       m = XNetMessage.getReadDirectCVMsg(900);
       Assert.assertEquals("Monitor String","Service Mode Request (V3.6): Read CV 900 in Direct Mode",m.toMonitorString());
       m = XNetMessage.getReadDirectCVMsg(1024);
       Assert.assertEquals("Monitor String","Service Mode Request (V3.6): Read CV 1024 in Direct Mode",m.toMonitorString());
    }

    @Test
    public void testGetWritePagedCVMsg(){
       XNetMessage m = XNetMessage.getWritePagedCVMsg(29,5);
       Assert.assertEquals(0x23,m.getElement(0));
       Assert.assertEquals(0x17,m.getElement(1));
       Assert.assertEquals(0x1D,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0x2C,m.getElement(4));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());
    }

    @Test
    public void testToMonitorStringWritePagedCVMsg(){
       XNetMessage m = XNetMessage.getWritePagedCVMsg(29,5);
       Assert.assertEquals("Monitor String","Service Mode Request: Write 5 to CV 29 in Paged Mode",m.toMonitorString());
    }

    @Test
    public void testGetWriteDirectCVMsg(){
       XNetMessage m = XNetMessage.getWriteDirectCVMsg(29,5);
       Assert.assertEquals(0x23,m.getElement(0));
       Assert.assertEquals(0x16,m.getElement(1));
       Assert.assertEquals(0x1D,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0x2D,m.getElement(4));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());

       // CV > 256, version 3.6+ command.
       m = XNetMessage.getWriteDirectCVMsg(300,5);
       Assert.assertEquals(0x23,m.getElement(0));
       Assert.assertEquals(0x1D,m.getElement(1));
       Assert.assertEquals(0x2C,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0x17,m.getElement(4));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());

       // CV = 1024, version 3.6+ command, a special case.
       // (sends 0 for CV value).
       m = XNetMessage.getWriteDirectCVMsg(1024,5);
       Assert.assertEquals(0x23,m.getElement(0));
       Assert.assertEquals(0x1C,m.getElement(1));
       Assert.assertEquals(0x00,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0x3A,m.getElement(4));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());
    }

    @Test
    public void testToMonitorStringWriteDirectCVMsg(){
       XNetMessage m = XNetMessage.getWriteDirectCVMsg(29,5);
       Assert.assertEquals("Monitor String","Service Mode Request: Write 5 to CV 29 in Direct Mode",m.toMonitorString());
       m = XNetMessage.getWriteDirectCVMsg(300,5);
       Assert.assertEquals("Monitor String","Service Mode Request (V3.6): Write 5 to CV 300 in Direct Mode",m.toMonitorString());
       m = XNetMessage.getWriteDirectCVMsg(600,5);
       Assert.assertEquals("Monitor String","Service Mode Request (V3.6): Write 5 to CV 600 in Direct Mode",m.toMonitorString());
       m = XNetMessage.getWriteDirectCVMsg(900,5);
       Assert.assertEquals("Monitor String","Service Mode Request (V3.6): Write 5 to CV 900 in Direct Mode",m.toMonitorString());
       m = XNetMessage.getWriteDirectCVMsg(1024,5);
       Assert.assertEquals("Monitor String","Service Mode Request (V3.6): Write 5 to CV 1024 in Direct Mode",m.toMonitorString());
    }

    @Test
    public void testGetReadRegisterMsg(){
       XNetMessage m = XNetMessage.getReadRegisterMsg(5);
       Assert.assertEquals(0x22,m.getElement(0));
       Assert.assertEquals(0x11,m.getElement(1));
       Assert.assertEquals(0x05,m.getElement(2));
       Assert.assertEquals(0x36,m.getElement(3));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());
       m = XNetMessage.getReadRegisterMsg(10);
       jmri.util.JUnitAppender.assertErrorMessage("register number too large: 10");
    }

    @Test
    public void testToMonitorStringRegisterReadMsg(){
       XNetMessage m = XNetMessage.getReadRegisterMsg(5);
       Assert.assertEquals("Monitor String","Service Mode Request: Read Register 5",m.toMonitorString());
    }

    @Test
    public void testGetWriteRegisterMsg(){
       XNetMessage m = XNetMessage.getWriteRegisterMsg(5,5);
       Assert.assertEquals(0x23,m.getElement(0));
       Assert.assertEquals(0x12,m.getElement(1));
       Assert.assertEquals(0x05,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0x31,m.getElement(4));
       Assert.assertEquals("programming mode required",jmri.jmrix.AbstractMRTrafficController.PROGRAMINGMODE,m.getNeededMode());
       m = XNetMessage.getWriteRegisterMsg(10,5);
       jmri.util.JUnitAppender.assertErrorMessage("register number too large: 10");
    }

    @Test
    public void testToMonitorStringRegisterWriteMsg(){
       XNetMessage m = XNetMessage.getWriteRegisterMsg(5,5);
       Assert.assertEquals("Monitor String","Service Mode Request: Write 5 to Register 5",m.toMonitorString());
    }

    @Test
    public void testGetWriteOpsModeCVMsg(){
       XNetMessage m = XNetMessage.getWriteOpsModeCVMsg(0,5,29,5);
       Assert.assertEquals(0xE6,m.getElement(0));
       Assert.assertEquals(0x30,m.getElement(1));
       Assert.assertEquals(0x00,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0xEC,m.getElement(4));
       Assert.assertEquals(0x1C,m.getElement(5));
       Assert.assertEquals(0x05,m.getElement(6));
       Assert.assertEquals(0x26,m.getElement(7));
    }

    @Test
    public void testToMonitorStringWriteOpsModeCVMsg(){
       XNetMessage m = XNetMessage.getWriteOpsModeCVMsg(0,5,29,5);
       Assert.assertEquals("Monitor String","Operations Mode Programming Request: Byte Mode Write: 5 to CV 29 For Decoder Address 5",m.toMonitorString());
    }

    @Test
    public void testGetVerifyOpsModeCVMsg(){
       XNetMessage m = XNetMessage.getVerifyOpsModeCVMsg(0,5,29,5);
       Assert.assertEquals(0xE6,m.getElement(0));
       Assert.assertEquals(0x30,m.getElement(1));
       Assert.assertEquals(0x00,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0xE4,m.getElement(4));
       Assert.assertEquals(0x1C,m.getElement(5));
       Assert.assertEquals(0x05,m.getElement(6));
       Assert.assertEquals(0x2E,m.getElement(7));
    }

    @Test
    public void testToMonitorStringVerifyOpsModeCVMsg(){
       XNetMessage m = XNetMessage.getVerifyOpsModeCVMsg(0,5,29,5);
       Assert.assertEquals("Monitor String","Operations Mode Programming Request: Byte Mode Verify: 5 to CV 29 For Decoder Address 5",m.toMonitorString());
    }

    @Test
    public void testGetBitWriteOpsModeCVMsg(){
       XNetMessage m = XNetMessage.getBitWriteOpsModeCVMsg(0,5,29,2,true);
       Assert.assertEquals(0xE6,m.getElement(0));
       Assert.assertEquals(0x30,m.getElement(1));
       Assert.assertEquals(0x00,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0xE8,m.getElement(4));
       Assert.assertEquals(0x1C,m.getElement(5));
       Assert.assertEquals(0xEA,m.getElement(6));
       Assert.assertEquals(0xCD,m.getElement(7));

       m = XNetMessage.getBitWriteOpsModeCVMsg(0,5,29,2,false);
       Assert.assertEquals(0xE6,m.getElement(0));
       Assert.assertEquals(0x30,m.getElement(1));
       Assert.assertEquals(0x00,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0xE8,m.getElement(4));
       Assert.assertEquals(0x1C,m.getElement(5));
       Assert.assertEquals(0xE2,m.getElement(6));
       Assert.assertEquals(0xC5,m.getElement(7));
    }

    @Test
    public void testToMonitorStringWriteOpsBitModeCVMsg(){
       XNetMessage m = XNetMessage.getBitWriteOpsModeCVMsg(0,5,29,2,true);
       Assert.assertEquals("Monitor String","Operations Mode Programming Request: Bit Mode Write: 1 to CV 29 bit 2 For Decoder Address 5",m.toMonitorString());
       m = XNetMessage.getBitWriteOpsModeCVMsg(0,5,29,2,false);
       Assert.assertEquals("Monitor String","Operations Mode Programming Request: Bit Mode Write: 0 to CV 29 bit 2 For Decoder Address 5",m.toMonitorString());
    }

    @Test
    public void testGetBitVerifyOpsModeCVMsg(){
       XNetMessage m = XNetMessage.getBitVerifyOpsModeCVMsg(0,5,29,2,true);
       Assert.assertEquals(0xE6,m.getElement(0));
       Assert.assertEquals(0x30,m.getElement(1));
       Assert.assertEquals(0x00,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0xE8,m.getElement(4));
       Assert.assertEquals(0x1C,m.getElement(5));
       Assert.assertEquals(0xFA,m.getElement(6));
       Assert.assertEquals(0xDD,m.getElement(7));

       m = XNetMessage.getBitVerifyOpsModeCVMsg(0,5,29,2,false);
       Assert.assertEquals(0xE6,m.getElement(0));
       Assert.assertEquals(0x30,m.getElement(1));
       Assert.assertEquals(0x00,m.getElement(2));
       Assert.assertEquals(0x05,m.getElement(3));
       Assert.assertEquals(0xE8,m.getElement(4));
       Assert.assertEquals(0x1C,m.getElement(5));
       Assert.assertEquals(0xF2,m.getElement(6));
       Assert.assertEquals(0xD5,m.getElement(7));
    }

    @Test
    public void testToMonitorStringVerifyOpsBitModeCVMsg(){
       XNetMessage m = XNetMessage.getBitVerifyOpsModeCVMsg(0,5,29,2,true);
       Assert.assertEquals("Monitor String","Operations Mode Programming Request: Bit Mode Verify: 1 to CV 29 bit 2 For Decoder Address 5",m.toMonitorString());
       m = XNetMessage.getBitVerifyOpsModeCVMsg(0,5,29,2,false);
       Assert.assertEquals("Monitor String","Operations Mode Programming Request: Bit Mode Verify: 0 to CV 29 bit 2 For Decoder Address 5",m.toMonitorString());
    }

    @Test
    public void testGetBuildDoubleHeaderMessage(){
       XNetMessage m = XNetMessage.getBuildDoubleHeaderMsg(1234,4567);
       Assert.assertEquals(0xE5,m.getElement(0));
       Assert.assertEquals(0x43,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xD1,m.getElement(4));
       Assert.assertEquals(0xD7,m.getElement(5));
       Assert.assertEquals(0xB6,m.getElement(6));
    }

    @Test
    public void testToMonitorStringBuildDoubleHeaderMessage(){
       XNetMessage m = XNetMessage.getBuildDoubleHeaderMsg(1234,4567);
       Assert.assertEquals("Monitor String","Double Header Request: Establish Double Header with 1234 and 4567",m.toMonitorString());
    }

    @Test
    public void testGetDisolveDoubleHeaderMessage(){
       XNetMessage m = XNetMessage.getDisolveDoubleHeaderMsg(1234);
       Assert.assertEquals(0xE5,m.getElement(0));
       Assert.assertEquals(0x43,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0x00,m.getElement(5));
       Assert.assertEquals(0xB0,m.getElement(6));
    }

    @Test
    public void testToMonitorStringDisolveDoubleHeaderMessage(){
       XNetMessage m = XNetMessage.getDisolveDoubleHeaderMsg(1234);
       Assert.assertEquals("Monitor String","Double Header Request: Disolve Double Header that includes mobile decoder 1234",m.toMonitorString());
    }

    @Test
    public void testGetAddLocoToConsistMsg(){
       XNetMessage m = XNetMessage.getAddLocoToConsistMsg(42,1234,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x40,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x2A,m.getElement(4));
       Assert.assertEquals(0x98,m.getElement(5));

       m = XNetMessage.getAddLocoToConsistMsg(42,1234,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x41,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x2A,m.getElement(4));
       Assert.assertEquals(0x99,m.getElement(5));
    }

    @Test
    public void testToMonitorStringAddLocoToConsistMessage(){
       XNetMessage m = XNetMessage.getAddLocoToConsistMsg(42,1234,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Add Locomotive:1234 To Multi Unit Consist: 42 With Loco Direction Normal",m.toMonitorString());
       m = XNetMessage.getAddLocoToConsistMsg(42,1234,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Add Locomotive:1234 To Multi Unit Consist: 42 With Loco Direction Reversed",m.toMonitorString());
    }

    @Test
    public void testGetRemoveLocoFromConsistMsg(){
       XNetMessage m = XNetMessage.getRemoveLocoFromConsistMsg(42,1234);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x42,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x2A,m.getElement(4));
       Assert.assertEquals(0x9A,m.getElement(5));
    }

    @Test
    public void testToMonitorStringRemoveLocoFromConsistMessage(){
       XNetMessage m = XNetMessage.getRemoveLocoFromConsistMsg(42,1234);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Remove Locomotive:1234 From Multi Unit Consist: 42",m.toMonitorString());
    }

    @Test
    public void testGetNextAddressOnStackMsg(){
       // search forward
       XNetMessage m = XNetMessage.getNextAddressOnStackMsg(1234,true);
       Assert.assertEquals(0xE3,m.getElement(0));
       Assert.assertEquals(0x05,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xF0,m.getElement(4));

       // search backward
       m = XNetMessage.getNextAddressOnStackMsg(1234,false);
       Assert.assertEquals(0xE3,m.getElement(0));
       Assert.assertEquals(0x06,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xF3,m.getElement(4));
    }


    @Test
    public void testToMonitorStringNextAddressOnStackMsg(){
       XNetMessage m = XNetMessage.getNextAddressOnStackMsg(1234,true);
       Assert.assertEquals("Monitor String","Search Command Station Stack Forward - Start Address: 1234",m.toMonitorString());
       m = XNetMessage.getNextAddressOnStackMsg(1234,false);
       Assert.assertEquals("Monitor String","Search Command Station Stack Backward - Start Address: 1234",m.toMonitorString());
    }

    @Test
    public void testGetDBSearchMsgConsistAddress(){
       // search forward
       XNetMessage m = XNetMessage.getDBSearchMsgConsistAddress(42,true);
       Assert.assertEquals(0xE2,m.getElement(0));
       Assert.assertEquals(0x03,m.getElement(1));
       Assert.assertEquals(0x2A,m.getElement(2));
       Assert.assertEquals(0xCB,m.getElement(3));

       // search backward
       m = XNetMessage.getDBSearchMsgConsistAddress(42,false);
       Assert.assertEquals(0xE2,m.getElement(0));
       Assert.assertEquals(0x04,m.getElement(1));
       Assert.assertEquals(0x2A,m.getElement(2));
       Assert.assertEquals(0xCC,m.getElement(3));
    }

    @Test
    public void testToMonitorStringDBSearchMsgConsistAddress(){
       XNetMessage m = XNetMessage.getDBSearchMsgConsistAddress(42,true);
       Assert.assertEquals("Monitor String","Search Command Station Stack Forward from Consist Address: 42",m.toMonitorString());
       m = XNetMessage.getDBSearchMsgConsistAddress(42,false);
       Assert.assertEquals("Monitor String","Search Command Station Stack Backward from Consist Address: 42",m.toMonitorString());
    }

    @Test
    public void testGetDBSearchMsgNextMULoco(){
       // search forward
       XNetMessage m = XNetMessage.getDBSearchMsgNextMULoco(42,1234,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x01,m.getElement(1));
       Assert.assertEquals(0x2A,m.getElement(2));
       Assert.assertEquals(0xC4,m.getElement(3));
       Assert.assertEquals(0xD2,m.getElement(4));
       Assert.assertEquals(0xD9,m.getElement(5));

       // search backward
       m = XNetMessage.getDBSearchMsgNextMULoco(42,1234,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x02,m.getElement(1));
       Assert.assertEquals(0x2A,m.getElement(2));
       Assert.assertEquals(0xC4,m.getElement(3));
       Assert.assertEquals(0xD2,m.getElement(4));
       Assert.assertEquals(0xDA,m.getElement(5));
    }

    @Test
    public void testToMonitorStringDBSearchNextMULoco(){
       XNetMessage m = XNetMessage.getDBSearchMsgNextMULoco(42,1234,true);
       Assert.assertEquals("Monitor String","Search Command Station Stack Forward for next address in Consist 42 Starting at 1234",m.toMonitorString());
       m = XNetMessage.getDBSearchMsgNextMULoco(42,1234,false);
       Assert.assertEquals("Monitor String","Search Command Station Stack Backward for next address in Consist 42 Starting at 1234",m.toMonitorString());
    }


    @Test
    public void testGetDeleteAddressOnStackMsg(){
       XNetMessage m = XNetMessage.getDeleteAddressOnStackMsg(1234);
       Assert.assertEquals(0xE3,m.getElement(0));
       Assert.assertEquals(0x44,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xB1,m.getElement(4));
    }

    @Test
    public void testToMonitorStringDeleteAddressOnStackMsg(){
       XNetMessage m = XNetMessage.getDeleteAddressOnStackMsg(1234);
       Assert.assertEquals("Monitor String","Delete Address 1234 from Command Station Stack.",m.toMonitorString());
    }

    @Test
    public void testGetLocomoitveInfoRequestMsg(){
       XNetMessage m = XNetMessage.getLocomotiveInfoRequestMsg(1234);
       Assert.assertEquals(0xE3,m.getElement(0));
       Assert.assertEquals(0x00,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xF5,m.getElement(4));
    }

    @Test
    public void testToMonitorStringLocoInfoRequestMsg(){
       XNetMessage m = XNetMessage.getLocomotiveInfoRequestMsg(1234);
       Assert.assertEquals("Monitor String","Request for Address 1234 speed/direction/function on/off status.",m.toMonitorString());
    }

    @Test
    public void testGetLocomoitveFunctionStatusMsg(){
       XNetMessage m = XNetMessage.getLocomotiveFunctionStatusMsg(1234);
       Assert.assertEquals(0xE3,m.getElement(0));
       Assert.assertEquals(0x07,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xF2,m.getElement(4));
    }

    @Test
    public void testToMonitorStringLocoFunctionStatusMsg(){
       XNetMessage m = XNetMessage.getLocomotiveFunctionStatusMsg(1234);
       Assert.assertEquals("Monitor String","Request for Address 1234 function momentary/continuous status.",m.toMonitorString());
    }

    @Test
    public void testGetLocomoitveFunctionHighOnStatusMsg(){
       XNetMessage m = XNetMessage.getLocomotiveFunctionHighOnStatusMsg(1234);
       Assert.assertEquals(0xE3,m.getElement(0));
       Assert.assertEquals(0x09,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xFC,m.getElement(4));
    }

    @Test
    public void testToMonitorStringLocoFunctionHighOnStatusMsg(){
       XNetMessage m = XNetMessage.getLocomotiveFunctionHighOnStatusMsg(1234);
       Assert.assertEquals("Monitor String","Request for Address 1234 F13-F28 on/off status.",m.toMonitorString());
    }

    @Test
    public void testGetLocomoitveFunctionHighMomStatusMsg(){
       XNetMessage m = XNetMessage.getLocomotiveFunctionHighMomStatusMsg(1234);
       Assert.assertEquals(0xE3,m.getElement(0));
       Assert.assertEquals(0x08,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xFD,m.getElement(4));
    }

    @Test
    public void testToMonitorStringLocoFunctionHighMomStatusMsg(){
       XNetMessage m = XNetMessage.getLocomotiveFunctionHighMomStatusMsg(1234);
       Assert.assertEquals("Monitor String","Request for Address 1234 F13-F28 momentary/continuous status.",m.toMonitorString());
    }

    @Test
    public void testGetAddressedEmergencyStop(){
       XNetMessage m = XNetMessage.getAddressedEmergencyStop(1234);
       Assert.assertEquals(0x92,m.getElement(0));
       Assert.assertEquals(0xC4,m.getElement(1));
       Assert.assertEquals(0xD2,m.getElement(2));
       Assert.assertEquals(0x84,m.getElement(3));
    }

    @Test
    public void testToMonitorStringAddressedEmergencyStop(){
       XNetMessage m = XNetMessage.getAddressedEmergencyStop(1234);
       Assert.assertEquals("Monitor String","Emergency Stop 1234",m.toMonitorString());
    }

    @Test
    public void testGetSpeedAndDirectionMsg(){
       // 128 speed step mode, forward direction.
       XNetMessage m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode128,0.5f,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x13,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xC0,m.getElement(4));
       Assert.assertEquals(0x21,m.getElement(5));

       // 128 speed step mode, reverse direction.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode128,0.5f,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x13,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x40,m.getElement(4));
       Assert.assertEquals(0xA1,m.getElement(5));

       // 128 speed step mode, forward direction, speed 0.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode128,0f,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x13,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x80,m.getElement(4));
       Assert.assertEquals(0x61,m.getElement(5));

       // 128 speed step mode, reverse direction, speed 0.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode128,0f,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x13,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xE1,m.getElement(5));

       // 28 speed step mode, forward direction.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode28,0.5f,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x12,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x98,m.getElement(4));
       Assert.assertEquals(0x78,m.getElement(5));

       // 28 speed step mode, reverse direction.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode28,0.5f,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x12,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x18,m.getElement(4));
       Assert.assertEquals(0xF8,m.getElement(5));

       // 28 speed step mode, forward direction, speed 0.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode28,0f,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x12,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x80,m.getElement(4));
       Assert.assertEquals(0x60,m.getElement(5));

       // 28 speed step mode, reverse direction, speed 0.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode28,0f,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x12,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xE0,m.getElement(5));

       // 27 speed step mode, forward direction.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode27,0.5f,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x11,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x98,m.getElement(4));
       Assert.assertEquals(0x7B,m.getElement(5));

       // 27 speed step mode, reverse direction.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode27,0.5f,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x11,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x18,m.getElement(4));
       Assert.assertEquals(0xFB,m.getElement(5));

       // 27 speed step mode, forward direction, speed 0.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode27,0f,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x11,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x80,m.getElement(4));
       Assert.assertEquals(0x63,m.getElement(5));

       // 27 speed step mode, reverse direction, speed 0.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode27,0,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x11,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xE3,m.getElement(5));

       // 14 speed step mode, forward direction.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode14,0.5f,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x10,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x88,m.getElement(4));
       Assert.assertEquals(0x6A,m.getElement(5));

       // 14 speed step mode, reverse direction.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode14,0.5f,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x10,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x08,m.getElement(4));
       Assert.assertEquals(0xEA,m.getElement(5));

       // 14 speed step mode, forward direction, speed 0.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode14,0f,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x10,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x80,m.getElement(4));
       Assert.assertEquals(0x62,m.getElement(5));

       // 14 speed step mode, reverse direction, speed 0.
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode14,0f,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x10,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xE2,m.getElement(5));
    }

    @Test
    public void testToMonitorStringSpeedAndDirectin128SpeedSteps(){
       XNetMessage m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode128,0.5f,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 64 and direction Forward In 128 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode128,0.5f,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 64 and direction Reverse In 128 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode128,0,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 0 and direction Forward In 128 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode128,0,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 0 and direction Reverse In 128 speed step mode.",m.toMonitorString());
    }

    @Test
    public void testToMonitorStringSpeedAndDirectin28SpeedSteps(){
       XNetMessage m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode28,0.5f,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 14 and direction Forward In 28 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode28,0.5f,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 14 and direction Reverse In 28 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode28,0,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 0 and direction Forward In 28 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode28,0,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 0 and direction Reverse In 28 speed step mode.",m.toMonitorString());
    }

    @Test
    public void testToMonitorStringSpeedAndDirectin27SpeedSteps(){
       XNetMessage m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode27,0.5f,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 14 and direction Forward In 27 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode27,0.5f,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 14 and direction Reverse In 27 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode27,0,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 0 and direction Forward In 27 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode27,0,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 0 and direction Reverse In 27 speed step mode.",m.toMonitorString());
    }

    @Test
    public void testToMonitorStringSpeedAndDirectin14SpeedSteps(){
       XNetMessage m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode14,0.5f,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 8 and direction Forward In 14 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode14,0.5f,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 8 and direction Reverse In 14 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode14,0,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 0 and direction Forward In 14 speed step mode.",m.toMonitorString());
       m = XNetMessage.getSpeedAndDirectionMsg(1234,jmri.DccThrottle.SpeedStepMode14,0,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Address: 1234 To Speed Step 0 and direction Reverse In 14 speed step mode.",m.toMonitorString());
    }

    @Test
    public void testGetFunctionGroup1OpsMsg() {
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup1OpsMsg(1234,
          false,false,false,false,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x20,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xD2,m.getElement(5));
       // all on
       m = XNetMessage.getFunctionGroup1OpsMsg(1234,
          true,true,true,true,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x20,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x1F,m.getElement(4));
       Assert.assertEquals(0xCD,m.getElement(5));
    }

    @Test
    public void testToMonitorStringFunctionGroup1OpsMsg(){
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup1OpsMsg(1234,
          false,false,false,false,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 1 for address: 1234 F0 off F1 off F2 off F3 off F4 off ",m.toMonitorString());
       // all on
       m = XNetMessage.getFunctionGroup1OpsMsg(1234,
          true,true,true,true,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 1 for address: 1234 F0 on F1 on F2 on F3 on F4 on ",m.toMonitorString());
    }

    @Test
    public void testGetFunctionGroup1SetMomMsg() {
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup1SetMomMsg(1234,
          false,false,false,false,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x24,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xD6,m.getElement(5));
       // all on
       m = XNetMessage.getFunctionGroup1SetMomMsg(1234,
          true,true,true,true,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x24,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x1F,m.getElement(4));
       Assert.assertEquals(0xC9,m.getElement(5));
    }

    @Test
    public void testToMonitorStringFunctionGroup1SetMsg(){
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup1SetMomMsg(1234,
          false,false,false,false,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 1 Momentary Status for address: 1234 F0 continuous F1 continuous F2 continuous F3 continuous F4 continuous ",m.toMonitorString());
       // all on
       m = XNetMessage.getFunctionGroup1SetMomMsg(1234,
          true,true,true,true,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 1 Momentary Status for address: 1234 F0 momentary F1 momentary F2 momentary F3 momentary F4 momentary ",m.toMonitorString());
    }

    @Test
    public void testGetFunctionGroup2OpsMsg() {
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup2OpsMsg(1234,
          false,false,false,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x21,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xD3,m.getElement(5));
       // all on
       m = XNetMessage.getFunctionGroup2OpsMsg(1234,
          true,true,true,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x21,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x0F,m.getElement(4));
       Assert.assertEquals(0xDC,m.getElement(5));
    }

    @Test
    public void testToMonitorStringFunctionGroup2OpsMsg(){
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup2OpsMsg(1234,
          false,false,false,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 2 for address: 1234 F5 off F6 off F7 off F8 off ",m.toMonitorString());
       // all on
       m = XNetMessage.getFunctionGroup2OpsMsg(1234,
          true,true,true,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 2 for address: 1234 F5 on F6 on F7 on F8 on ",m.toMonitorString());
    }

    @Test
    public void testGetFunctionGroup2SetMomMsg() {
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup2SetMomMsg(1234,
          false,false,false,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x25,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xD7,m.getElement(5));
       // all on
       m = XNetMessage.getFunctionGroup2SetMomMsg(1234,
          true,true,true,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x25,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x0F,m.getElement(4));
       Assert.assertEquals(0xD8,m.getElement(5));
    }

    @Test
    public void testToMonitorStringFunctionGroup2SetMsg(){
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup2SetMomMsg(1234,
          false,false,false,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 2 Momentary Status for address: 1234 F5 continuous F6 continuous F7 continuous F8 continuous ",m.toMonitorString());
       // all on
       m = XNetMessage.getFunctionGroup2SetMomMsg(1234,
          true,true,true,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 2 Momentary Status for address: 1234 F5 momentary F6 momentary F7 momentary F8 momentary ",m.toMonitorString());
    }

    @Test
    public void testGetFunctionGroup3OpsMsg() {
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup3OpsMsg(1234,
          false,false,false,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x22,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xD0,m.getElement(5));
       // all on
       m = XNetMessage.getFunctionGroup3OpsMsg(1234,
          true,true,true,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x22,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x0F,m.getElement(4));
       Assert.assertEquals(0xDF,m.getElement(5));
    }

    @Test
    public void testToMonitorStringFunctionGroup3OpsMsg(){
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup3OpsMsg(1234,
          false,false,false,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 3 for address: 1234 F9 off F10 off F11 off F12 off ",m.toMonitorString());
       // all on
       m = XNetMessage.getFunctionGroup3OpsMsg(1234,
          true,true,true,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 3 for address: 1234 F9 on F10 on F11 on F12 on ",m.toMonitorString());
    }

    @Test
    public void testGetFunctionGroup3SetMomMsg() {
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup3SetMomMsg(1234,
          false,false,false,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x26,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xD4,m.getElement(5));
       // all on
       m = XNetMessage.getFunctionGroup3SetMomMsg(1234,
          true,true,true,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x26,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x0F,m.getElement(4));
       Assert.assertEquals(0xDB,m.getElement(5));
    }

    @Test
    public void testToMonitorStringFunctionGroup3SetMsg(){
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup3SetMomMsg(1234,
          false,false,false,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 3 Momentary Status for address: 1234 F9 continuous F10 continuous F11 continuous F12 continuous ",m.toMonitorString());
       // all on
       m = XNetMessage.getFunctionGroup3SetMomMsg(1234,
          true,true,true,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 3 Momentary Status for address: 1234 F9 momentary F10 momentary F11 momentary F12 momentary ",m.toMonitorString());
    }

    @Test
    public void testGetFunctionGroup4OpsMsg() {
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup4OpsMsg(1234,
          false,false,false,false,false,false,false,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x23,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xD1,m.getElement(5));
       // all on
       m = XNetMessage.getFunctionGroup4OpsMsg(1234,
          true,true,true,true,true,true,true,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x23,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xFF,m.getElement(4));
       Assert.assertEquals(0x2E,m.getElement(5));
    }

    @Test
    public void testToMonitorStringFunctionGroup4OpsMsg(){
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup4OpsMsg(1234,
          false,false,false,false,false,false,false,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 4 for address: 1234 F13 off F14 off F15 off F16 off F17 off F18 off F19 off F20 off ",m.toMonitorString());
       // all on
       m = XNetMessage.getFunctionGroup4OpsMsg(1234,
          true,true,true,true,true,true,true,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 4 for address: 1234 F13 on F14 on F15 on F16 on F17 on F18 on F19 on F20 on ",m.toMonitorString());
    }

    @Test
    public void testGetFunctionGroup4SetMomMsg() {
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup4SetMomMsg(1234,
          false,false,false,false,false,false,false,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x27,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xD5,m.getElement(5));
       // all on
       m = XNetMessage.getFunctionGroup4SetMomMsg(1234,
          true,true,true,true,true,true,true,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x27,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xFF,m.getElement(4));
       Assert.assertEquals(0x2A,m.getElement(5));
    }

    @Test
    public void testToMonitorStringFunctionGroup4SetMsg(){
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup4SetMomMsg(1234,
          false,false,false,false,false,false,false,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 4 Momentary Status for address: 1234 F13 continuous F14 continuous F15 continuous F16 continuous F17 continuous F18 continuous F19 continuous F20 continuous ",m.toMonitorString());
       // all on
       m = XNetMessage.getFunctionGroup4SetMomMsg(1234,
          true,true,true,true,true,true,true,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 4 Momentary Status for address: 1234 F13 momentary F14 momentary F15 momentary F16 momentary F17 momentary F18 momentary F19 momentary F20 momentary ",m.toMonitorString());
    }

    @Test
    public void testGetFunctionGroup5OpsMsg() {
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup5OpsMsg(1234,
          false,false,false,false,false,false,false,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x28,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xDA,m.getElement(5));
       // all on
       m = XNetMessage.getFunctionGroup5OpsMsg(1234,
          true,true,true,true,true,true,true,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x28,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xFF,m.getElement(4));
       Assert.assertEquals(0x25,m.getElement(5));
    }

    @Test
    public void testToMonitorStringFunctionGroup5OpsMsg(){
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup5OpsMsg(1234,
          false,false,false,false,false,false,false,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 5 for address: 1234 F21 off F22 off F23 off F24 off F25 off F26 off F27 off F28 off ",m.toMonitorString());
       // all on
       m = XNetMessage.getFunctionGroup5OpsMsg(1234,
          true,true,true,true,true,true,true,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 5 for address: 1234 F21 on F22 on F23 on F24 on F25 on F26 on F27 on F28 on ",m.toMonitorString());
    }

    @Test
    public void testGetFunctionGroup5SetMomMsg() {
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup5SetMomMsg(1234,
          false,false,false,false,false,false,false,false);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x2C,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0x00,m.getElement(4));
       Assert.assertEquals(0xDE,m.getElement(5));
       // all on
       m = XNetMessage.getFunctionGroup5SetMomMsg(1234,
          true,true,true,true,true,true,true,true);
       Assert.assertEquals(0xE4,m.getElement(0));
       Assert.assertEquals(0x2C,m.getElement(1));
       Assert.assertEquals(0xC4,m.getElement(2));
       Assert.assertEquals(0xD2,m.getElement(3));
       Assert.assertEquals(0xFF,m.getElement(4));
       Assert.assertEquals(0x21,m.getElement(5));
    }

    @Test
    public void testToMonitorStringFunctionGroup5SetMsg(){
       // all off
       XNetMessage m = XNetMessage.getFunctionGroup5SetMomMsg(1234,
          false,false,false,false,false,false,false,false);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 5 Momentary Status for address: 1234 F21 continuous F22 continuous F23 continuous F24 continuous F25 continuous F26 continuous F27 continuous F28 continuous ",m.toMonitorString());
       // all on
       m = XNetMessage.getFunctionGroup5SetMomMsg(1234,
          true,true,true,true,true,true,true,true);
       Assert.assertEquals("Monitor String","Mobile Decoder Operations Request: Set Function Group 5 Momentary Status for address: 1234 F21 momentary F22 momentary F23 momentary F24 momentary F25 momentary F26 momentary F27 momentary F28 momentary ",m.toMonitorString());
    }

    @Test
    public void testGetResumeOperationsMsg() {
       XNetMessage m = XNetMessage.getResumeOperationsMsg();
       Assert.assertEquals(0x21,m.getElement(0));
       Assert.assertEquals(0x81,m.getElement(1));
       Assert.assertEquals(0xA0,m.getElement(2));
    }

    @Test
    public void testToMonitorStringResumeOperationsMsg(){
       XNetMessage m = XNetMessage.getResumeOperationsMsg();
       Assert.assertEquals("Monitor String","REQUEST: Normal Operations Resumed",m.toMonitorString());
    }

    @Test
    public void testGetEmergencyOffMsg() {
       XNetMessage m = XNetMessage.getEmergencyOffMsg();
       Assert.assertEquals(0x21,m.getElement(0));
       Assert.assertEquals(0x80,m.getElement(1));
       Assert.assertEquals(0xA1,m.getElement(2));
    }

    @Test
    public void testToMonitorStringEmergencyOffMsg(){
       XNetMessage m = XNetMessage.getEmergencyOffMsg();
       Assert.assertEquals("Monitor String","REQUEST: Emergency Off",m.toMonitorString());
    }

    @Test
    public void testGetCSVersionRequestMessage() {
       XNetMessage m = XNetMessage.getCSVersionRequestMessage();
       Assert.assertEquals(0x21,m.getElement(0));
       Assert.assertEquals(0x21,m.getElement(1));
       Assert.assertEquals(0x00,m.getElement(2));
    }

    @Test
    public void testToMonitorStringCSVersionRequestMessage(){
       XNetMessage m = XNetMessage.getCSVersionRequestMessage();
       Assert.assertEquals("Monitor String","REQUEST: Command Station Version",m.toMonitorString());
    }

    @Test
    public void testGetCSStatusRequestMessage() {
       XNetMessage m = XNetMessage.getCSStatusRequestMessage();
       Assert.assertEquals(0x21,m.getElement(0));
       Assert.assertEquals(0x24,m.getElement(1));
       Assert.assertEquals(0x05,m.getElement(2));
    }

    @Test
    public void testToMonitorStringCSStatusRequestMessage(){
       XNetMessage m = XNetMessage.getCSStatusRequestMessage();
       Assert.assertEquals("Monitor String","REQUEST: Command Station Status",m.toMonitorString());
    }

    @Test
    public void testGetCsAutoStartMessge() {
       // test autostart mode.
       XNetMessage m = XNetMessage.getCSAutoStartMessage(true);
       Assert.assertEquals(0x22,m.getElement(0));
       Assert.assertEquals(0x22,m.getElement(1));
       Assert.assertEquals(0x04,m.getElement(2));
       Assert.assertEquals(0x04,m.getElement(3));
       // test manual mode.
       m = XNetMessage.getCSAutoStartMessage(false);
       Assert.assertEquals(0x22,m.getElement(0));
       Assert.assertEquals(0x22,m.getElement(1));
       Assert.assertEquals(0x00,m.getElement(2));
       Assert.assertEquals(0x00,m.getElement(3));
    }

    @Test
    public void testToMonitorStringCsAutoStartMessageMessage(){
       XNetMessage m = XNetMessage.getCSAutoStartMessage(true);
       Assert.assertEquals("Monitor String","REQUEST: Set Power-up Mode to Automatic",m.toMonitorString());
       m = XNetMessage.getCSAutoStartMessage(false);
       Assert.assertEquals("Monitor String","REQUEST: Set Power-up Mode to Manual",m.toMonitorString());
    }

    @Test
    public void testGetLIVersionRequestMessage() {
       XNetMessage m = XNetMessage.getLIVersionRequestMessage();
       Assert.assertEquals(0xF0,m.getElement(0));
       Assert.assertEquals(0xF0,m.getElement(1));
    }

    @Test
    public void testToMonitorStringLIVersionRequestMessage(){
       XNetMessage m = XNetMessage.getLIVersionRequestMessage();
       Assert.assertEquals("Monitor String","REQUEST LI10x hardware/software version",m.toMonitorString());
    }

    @Test
    public void testGetLIAddressRequestMsg() {
       XNetMessage m = XNetMessage.getLIAddressRequestMsg(1);
       Assert.assertEquals(0xF2,m.getElement(0));
       Assert.assertEquals(0x01,m.getElement(1));
       Assert.assertEquals(0x01,m.getElement(2));
       Assert.assertEquals(0xF2,m.getElement(3));
    }

    @Test
    public void testToMonitorStringLIAddressRequestMsg(){
       XNetMessage m = XNetMessage.getLIAddressRequestMsg(1);
       Assert.assertEquals("Monitor String","REQUEST LI101 Address 1",m.toMonitorString());
    }

    @Test
    public void testGetLISpeedReqeustMessage() {
       XNetMessage m = XNetMessage.getLISpeedRequestMsg(1);
       Assert.assertEquals(0xF2,m.getElement(0));
       Assert.assertEquals(0x02,m.getElement(1));
       Assert.assertEquals(0x01,m.getElement(2));
       Assert.assertEquals(0xF1,m.getElement(3));
    }

    @Test
    public void testToMonitorStringLISpeedRequestMessage(){
       XNetMessage m = XNetMessage.getLISpeedRequestMsg(1);
       Assert.assertEquals("Monitor String","REQUEST LI101 Baud Rate 19200bps (default)",m.toMonitorString());
    }

    @Test
    public void testToMonitorStringLISpeedRequestMessage2(){
       XNetMessage m = XNetMessage.getLISpeedRequestMsg(2);
       Assert.assertEquals("Monitor String","REQUEST LI101 Baud Rate 38400bps",m.toMonitorString());
    }

    @Test
    public void testToMonitorStringLISpeedRequestMessage3(){
       XNetMessage m = XNetMessage.getLISpeedRequestMsg(3);
       Assert.assertEquals("Monitor String","REQUEST LI101 Baud Rate 57600bps",m.toMonitorString());
    }

    @Test
    public void testToMonitorStringLISpeedRequestMessage4(){
       XNetMessage m = XNetMessage.getLISpeedRequestMsg(4);
       Assert.assertEquals("Monitor String","REQUEST LI101 Baud Rate 115200bps",m.toMonitorString());
    }

    @Test
    public void testToMonitorStringLISpeedRequestMessage5(){
       XNetMessage m = XNetMessage.getLISpeedRequestMsg(5);
       Assert.assertEquals("Monitor String","REQUEST LI101 Baud Rate <undefined>",m.toMonitorString());
    }


    // The minimal setup for log4J
    @Before
    public void setUp() {
        apps.tests.Log4JFixture.setUp();
    }

    @After
    public void tearDown() {
        apps.tests.Log4JFixture.tearDown();
        // make sure the message timeouts and retries are set to
        // the defaults.
        XNetMessage.setXNetMessageTimeout(5000); 
        XNetMessage.setXNetMessageRetries(5); 
    }

}
