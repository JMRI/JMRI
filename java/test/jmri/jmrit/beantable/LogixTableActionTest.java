package jmri.jmrit.beantable;

import java.awt.Frame;
import java.awt.GraphicsEnvironment;
import jmri.Conditional;
import jmri.InstanceManager;
import jmri.Light;
import jmri.Logix;
import jmri.Memory;
import jmri.Route;
import jmri.Sensor;
import jmri.SignalHead;
import jmri.Turnout;
import jmri.util.JUnitUtil;
import jmri.util.ThreadingUtil;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.netbeans.jemmy.FrameWaiter;

/**
 * Tests for the jmri.jmrit.beantable.LogixTableAction class
 * <p>
 * Note that the thread executing this test must yield to allow the event thread
 * access to create and dispose of window frames. i.e. those calls that simulate
 * an actionPerformed event.
 *
 * @author Pete Cressman Copyright 2009
 */
public class LogixTableActionTest {

    static final int NUM_STATE_VARS = 20;
    static final int NUM_ACTIONS = 27;

    private LogixTableAction _logixTable;

    @Test
    public void testCreateLogix() throws Exception {
        if (GraphicsEnvironment.isHeadless()) {
            return; // cannot use Assume in a TestCase
        }
        //Setting these two prevents any pop up message generated by the system trying to save messages.
        jmri.InstanceManager.getDefault(jmri.UserPreferencesManager.class).setPreferenceState("jmri.managers.DefaultUserMessagePreferences", "reminder", true);
        jmri.InstanceManager.getDefault(jmri.UserPreferencesManager.class).setPreferenceState("jmri.jmrit.beantable.LogixTableAction", "remindSaveLogix", true);

        jmri.InstanceManager.store(new jmri.jmrit.signalling.EntryExitPairs(), jmri.jmrit.signalling.EntryExitPairs.class);

        ThreadingUtil.runOnGUI(() -> {
            _logixTable.actionPerformed(null);
        });

        _logixTable.m.setValueAt(Bundle.getMessage("ButtonEdit"), 0, BeanTableDataModel.DELETECOL);
        // now close window
        Frame f = FrameWaiter.getFrame("Edit Logix", false, false);
        if (f != null) {
            f.dispose();
        }
    }

    // The minimal setup for log4J
    @Before
    public void setUp() throws Exception {
        apps.tests.Log4JFixture.setUp();

        JUnitUtil.resetInstanceManager();
        JUnitUtil.initDefaultUserMessagePreferences();
        JUnitUtil.initInternalTurnoutManager();
        JUnitUtil.initInternalLightManager();
        JUnitUtil.initInternalSensorManager();
        JUnitUtil.initInternalSignalHeadManager();

        _logixTable = new LogixTableAction() {
            // skip dialog box if in edit mode, just assume OK pressed
//             @Override
//             boolean checkEditConditional() {
//                 return inEditConditionalMode;
//             }
        };
        Assert.assertNotNull("LogixTableAction is null!", _logixTable);        // test has begun
//         _logixTable._suppressReminder = true;

        Logix x1 = new jmri.implementation.DefaultLogix("IX01");
        Assert.assertNotNull("Logix x1 is null!", x1);
        InstanceManager.getDefault(jmri.LogixManager.class).register(x1);

        for (int i = 0; i < 10; i++) {
            Sensor s = InstanceManager.sensorManagerInstance().newSensor("IS" + i, "Sensor" + i);
            Assert.assertNotNull(i + "th Sensor is null!", s);
            Turnout t = InstanceManager.turnoutManagerInstance().newTurnout("IT" + i, "Turnout" + i);
            Assert.assertNotNull(i + "th Turnout is null!", t);
            Light l = InstanceManager.lightManagerInstance().newLight("IL" + (i), "Light" + i);
            Assert.assertNotNull(i + "th Light is null!", l);
            Conditional c = InstanceManager.getDefault(jmri.ConditionalManager.class).createNewConditional("IX01C" + i, "Conditional " + i);
            Assert.assertNotNull(i + "th Conditional is null!", c);
            Memory m = InstanceManager.memoryManagerInstance().provideMemory("IMemory" + i);
            Assert.assertNotNull(i + "th Memory is null!", m);
            SignalHead sh = new jmri.implementation.VirtualSignalHead("SignalHead" + i);
            Assert.assertNotNull(i + "th SignalHead is null!", sh);
            InstanceManager.getDefault(jmri.SignalHeadManager.class).register(sh);
            Route r = new jmri.implementation.DefaultRoute("Route" + i);
            Assert.assertNotNull(i + "th Route is null!", r);
            InstanceManager.getDefault(jmri.RouteManager.class).register(r);
        }
    }

    @After
    public void tearDown() throws Exception {
        // now close logix action window
        if (_logixTable.f != null) {
            _logixTable.f.dispose();
        }

        JUnitUtil.resetInstanceManager();
        apps.tests.Log4JFixture.tearDown();
    }
}
