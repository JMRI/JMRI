package jmri.jmrit.beantable;

import apps.gui.GuiLafPreferencesManager;
import java.awt.GraphicsEnvironment;
import javax.swing.JFrame;
import jmri.InstanceManager;
import jmri.Turnout;
import jmri.util.JUnitUtil;
import org.junit.After;
import org.junit.Assert;
import org.junit.Assume;
import org.junit.Before;
import org.junit.Test;
import org.netbeans.jemmy.operators.JButtonOperator;
import org.netbeans.jemmy.operators.JDialogOperator;
import org.netbeans.jemmy.operators.JFrameOperator;

/**
 * Tests for the jmri.jmrit.beantable.TurnoutTableAction class.
 *
 * @author Paul Bender Copyright (C) 2017
 */
public class TurnoutTableActionTest extends AbstractTableActionBase {

    @Test
    public void testCTor() {
        Assert.assertNotNull("exists", a);
    }

    @Override
    public String getTableFrameName() {
        return Bundle.getMessage("TitleTurnoutTable");
    }

    @Override
    @Test
    public void testGetClassDescription() {
        Assert.assertEquals("Turnout Table Action class description", "Turnout Table", a.getClassDescription());
    }

    /**
     * Check the return value of includeAddButton.
     * <p>
     * The table generated by this action includes an Add Button.
     */
    @Override
    @Test
    public void testIncludeAddButton() {
        Assert.assertTrue("Default include add button", a.includeAddButton());
    }

    /**
     * Check Turnout Table GUI, menus and graphic state presentation.
     *
     * @since 4.7.4
     */
    @Test
    public void testAddAndInvoke() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        a.actionPerformed(null); // show table

        // create 2 turnouts and see if they exist
        Turnout it1 = InstanceManager.turnoutManagerInstance().provideTurnout("IT1");
        Turnout it2 = InstanceManager.turnoutManagerInstance().provideTurnout("IT2");
        it1.setCommandedState(Turnout.THROWN);
        it2.setCommandedState(Turnout.CLOSED);

        // set graphic state column display preference to false, read by createModel()
        InstanceManager.getDefault(GuiLafPreferencesManager.class).setGraphicTableState(false);

        TurnoutTableAction _tTable;
        _tTable = new TurnoutTableAction();
        Assert.assertNotNull("found TurnoutTable frame", _tTable);
        // prevent there are 2 menubars with the same name
        _tTable.dispose();

        // set to true, use icons
        InstanceManager.getDefault(GuiLafPreferencesManager.class).setGraphicTableState(true);
        TurnoutTableAction _t1Table;
        _t1Table = new TurnoutTableAction();
        Assert.assertNotNull("found TurnoutTable1 frame", _t1Table);
        JFrame t1Frame = JFrameOperator.waitJFrame(Bundle.getMessage("TitleTurnoutTable"), true, true);

        // test Add pane
        _t1Table.addPressed(null);
        JFrame af = JFrameOperator.waitJFrame(Bundle.getMessage("TitleAddTurnout"), true, true);
        Assert.assertNotNull("found Add frame", af);
        // close Add pane
        _t1Table.cancelPressed(null);
        // more Turnout Add pane tests are in TurnoutTableWindowTest

        // Open Automation pane to test Automation menu
        jmri.jmrit.turnoutoperations.TurnoutOperationFrame tof = new jmri.jmrit.turnoutoperations.TurnoutOperationFrame(null);
        // create dialog (bypassing menu)
        JDialogOperator am = new JDialogOperator("Turnout Operation Editor"); // TODO I18N using Bundle
        Assert.assertNotNull("found Automation menu dialog", am);
        // close pane
        JButtonOperator jbo = new JButtonOperator(am, "OK");
        jbo.pushNoBlock(); // instead of .push();

        // Open Speed pane to test Speed menu, which displays a JOptionPane
        //System.out.println("Speed pane started at " + java.time.LocalTime.now()); // debug
        // method 1: open as method
        //_t1Table.setDefaultSpeeds(null); // create dialog (bypassing menu, but is not found)
        //_t1Table.setDefaultSpeeds(t1Frame); // create dialog by frame (bypassing menu, but is also not found)
//        JFrameOperator main = new JFrameOperator(Bundle.getMessage("TitleTurnoutTable")); // create dialog (through menu)
        // method 2: Alternatively, used GUI menu to open Speeds pane:
        // pushMenuNoBlock is used, because dialog is modal
//        JMenuBarOperator mainbar = new JMenuBarOperator(main);
//        mainbar.pushMenuNoBlock("Speeds"); // stops at top level
//        JMenuOperator jmo = new JMenuOperator(mainbar, "Speeds");
//        JPopupMenu jpm = jmo.getPopupMenu();
//        JMenuItem firstMenuItem = (JMenuItem)jpm.getComponent(0); // first item is [Defaults...]
//        JMenuItemOperator jmio = new JMenuItemOperator(firstMenuItem);
//        jmio.pushNoBlock();
        // wait for Speeds dialog
        // for Jemmy to work, we need the Turnout Speeds pane inside a JDialog
        // TODO activate test when we manage to find pane:
//        JDialogOperator as = new JDialogOperator(Bundle.getMessage("TurnoutGlobalSpeedMessageTitle"));
//        Assert.assertNotNull("found Speeds menu dialog", as);
        //System.out.println("Speed pane found at " + java.time.LocalTime.now()); // debug
        // close pane
//        JButtonOperator jbs = new JButtonOperator(as, "OK");
//        jbs.pushNoBlock();
        // clean up
        JUnitUtil.dispose(af);
        am.dispose();
        //as.dispose(); // uncomment when test is Speeds menu activated
        JUnitUtil.dispose(tof);
        _t1Table.dispose();
        JUnitUtil.dispose(t1Frame);
    }

    // The minimal setup for log4J
    @Before
    @Override
    public void setUp() {
        JUnitUtil.setUp();
        jmri.util.JUnitUtil.initInternalTurnoutManager();
        jmri.util.JUnitUtil.initDefaultUserMessagePreferences();
        a = new TurnoutTableAction();
    }

    @After
    @Override
    public void tearDown() {
        a = null;
        JUnitUtil.tearDown();
    }

    //private final static Logger log = LoggerFactory.getLogger(TurnoutTableActionTest.class);

}
