package jmri.jmrit.beantable;

import apps.gui.GuiLafPreferencesManager;
import java.awt.GraphicsEnvironment;
import javax.swing.JFrame;
import javax.swing.JTextField;
import jmri.InstanceManager;
import jmri.Light;
import jmri.Sensor;
import jmri.Turnout;
import jmri.util.JUnitUtil;
import org.junit.*;
import org.netbeans.jemmy.operators.*;
import org.netbeans.jemmy.util.NameComponentChooser;

/**
 * Tests for the jmri.jmrit.beantable.LightTableAction class.
 * @author Paul Bender Copyright (C) 2017
 */
public class LightTableActionTest extends AbstractTableActionBase {

    @Test
    public void testCTor() {
        Assert.assertNotNull("exists",a);
    }

    @Override
    public String getTableFrameName(){
        return Bundle.getMessage("TitleLightTable");
    }

    @Override
    @Test
    public void testGetClassDescription(){
         Assert.assertEquals("Light Table Action class description","Light Table",a.getClassDescription());
    }

    /**
     * Check the return value of includeAddButton.  The table generated by
     * this action includes an Add Button.
     */
    @Override
    @Test
    public void testIncludeAddButton(){
         Assert.assertTrue("Default include add button",a.includeAddButton());
    }

    /**
     * Check graphic state presentation.
     * @since 4.7.4
     */
    @Test
    public void testAddAndInvoke() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());

        a.actionPerformed(null); // show table
        // create 2 lights and see if they exist
        Light il1 = InstanceManager.lightManagerInstance().provideLight("IL1");
        InstanceManager.lightManagerInstance().provideLight("IL2");
        il1.setState(Light.ON);
        il1.setState(Light.OFF);

        // set graphic state column display preference to false, read by createModel()
        InstanceManager.getDefault(GuiLafPreferencesManager.class).setGraphicTableState(false);

        LightTableAction _lTable;
        _lTable = new LightTableAction();
        Assert.assertNotNull("found LightTable frame", _lTable);

        // set to true, use icons
        InstanceManager.getDefault(GuiLafPreferencesManager.class).setGraphicTableState(true);
        LightTableAction _l1Table;
        _l1Table = new LightTableAction();
        Assert.assertNotNull("found LightTable1 frame", _l1Table);

        _l1Table.addPressed(null);
        JFrame af = JFrameOperator.waitJFrame(Bundle.getMessage("TitleAddLight"), true, true);
        Assert.assertNotNull("found Add frame", af);

//        // wait 1 sec (nothing to see)
//        Runnable waiter = new Runnable() {
//            @Override
//            public synchronized void run() {
//                try {
//                    this.wait(1000);
//                } catch (InterruptedException ex) {
//                    log.error("Waiter interrupted.");
//                }
//            }
//        };
//        waiter.run();

        // close AddPane
        _l1Table.cancelPressed(null);
        // TODO Add more Light Add pane tests in new LightTableWindowTest? see TurnoutEtc

        // clean up
        JFrame f = a.getFrame();
        if (f != null) {
            JUnitUtil.dispose(f);
        }
        JUnitUtil.dispose(af);
        _lTable.dispose();
        _l1Table.dispose();
    }

    @Override
    public String getAddFrameName(){
        return Bundle.getMessage("TitleAddLight");
    }

    @Test
    @Override
    public void testEditButton() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        Assume.assumeTrue(a.includeAddButton());
        a.actionPerformed(null);
        JFrame f = JFrameOperator.waitJFrame(getTableFrameName(), true, true);

        // find the "Add... " button and press it.
        JFrameOperator jfo = new JFrameOperator(f);
        jmri.util.swing.JemmyUtil.pressButton(jfo,Bundle.getMessage("ButtonAdd"));
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f1 = JFrameOperator.waitJFrame(getAddFrameName(), true, true);
        //Enter 1 in the text field labeled "Hardware address:"
        JTextField hwAddressField = JTextFieldOperator.findJTextField(f1, new NameComponentChooser("hwAddressTextField"));
        Assert.assertNotNull("hwAddressTextField", hwAddressField);

        // set to "1"
        new JTextFieldOperator(hwAddressField).typeText("1");
        //and press create
        jmri.util.swing.JemmyUtil.pressButton(new JFrameOperator(f1),Bundle.getMessage("ButtonCreate"));
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JTableOperator tbl = new JTableOperator(jfo, 0);
        // find the "Edit" button and press it.  This is in the table body.
        tbl.clickOnCell(0,tbl.getColumnCount() -1); // edit column is last in light table.
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f2 = JFrameOperator.waitJFrame(getEditFrameName(), true, true);
        jmri.util.swing.JemmyUtil.pressButton(new JFrameOperator(f2),Bundle.getMessage("ButtonCancel"));
        JUnitUtil.dispose(f2);
        JUnitUtil.dispose(f1);
        JUnitUtil.dispose(f);
    }

    @Override
    public String getEditFrameName(){
        return Bundle.getMessage("TitleEditLight");
    }
    
    @Test
    public void testAddEditSensorLightControl() throws jmri.JmriException {
        
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        
        // create 2 Sensors to pick from
        Sensor sOne = InstanceManager.getDefault(jmri.SensorManager.class).provideSensor("S1");
        Sensor sTwo = InstanceManager.getDefault(jmri.SensorManager.class).provideSensor("S2");

        a.actionPerformed(null); // show table
        
        JFrame f = JFrameOperator.waitJFrame(getTableFrameName(), true, true);

        // find the "Add... " button and press it.
        JFrameOperator jfo = new JFrameOperator(f);
        jmri.util.swing.JemmyUtil.pressButton(jfo,Bundle.getMessage("ButtonAdd"));
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f1 = JFrameOperator.waitJFrame(getAddFrameName(), true, true);
        //Enter 1234 in the text field labeled "Hardware address:"
        JTextField hwAddressField = JTextFieldOperator.findJTextField(f1, new NameComponentChooser("hwAddressTextField"));
        // set to "1234"
        new JTextFieldOperator(hwAddressField).typeText("1234");
        JFrameOperator jfob = new JFrameOperator(f1);
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("LightAddControlButton"));
        JFrame fControl = JFrameOperator.waitJFrame(Bundle.getMessage("TitleAddLightControl"), true, true);
        JFrameOperator jfoc = new JFrameOperator(fControl);
        
        Assert.assertEquals("No Sensor selected ", Bundle.getMessage("LightNoControl"),
            new JComboBoxOperator(jfoc, 0).getSelectedItem());
        
        // create a new LightControl by Sensor S2
        new JComboBoxOperator(jfoc, 0).selectItem(Bundle.getMessage("LightSensorControl"));
        
        new JComboBoxOperator(jfoc, 1).selectItem(("ISS2")); // select Sensor S2
        new JComboBoxOperator(jfoc, 2).selectItem(Bundle.getMessage("SensorStateActive"));
        jmri.util.swing.JemmyUtil.pressButton(jfoc,Bundle.getMessage("ButtonCreate"));
        // light control frame closes
        
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonCreate"));
        // new / edit light frame stays open
        
        // confirm light has been created with correct control
        Light created = InstanceManager.getDefault(jmri.LightManager.class).provideLight("IL1234");
        sOne.setState(Sensor.ON);
        Assert.assertEquals("OFF state, light does not react to sOne", Light.OFF, created.getState());
        sTwo.setState(Sensor.ON);
        JUnitUtil.waitFor(()->{return created.getState()==Light.ON;},"Light should go ON");
        
        Assert.assertEquals("Correct Light Control Type", "ON when ISS2 is Active.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
        
        // now we find the Light in the table and edit it
        JTableOperator tbl = new JTableOperator(jfo, 0);
        // find the "Edit" button and press it.  This is in the table body.
        tbl.clickOnCell(0,tbl.getColumnCount() -1); // edit column is last in light table.
        
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f2 = JFrameOperator.waitJFrame(getEditFrameName(), true, true);
        JFrameOperator jfoce = new JFrameOperator(f2);
        JTableOperator controltbl = new JTableOperator(jfoce, 0);
        // find the "Edit" button and press it.  This is in the table body.
        controltbl.clickOnCell(0,2); // click edit button in column 2.
        
        // find edit control window
        JFrame f3 = JFrameOperator.waitJFrame(Bundle.getMessage("TitleEditLightControl"), true, true);
        JFrameOperator jfof3 = new JFrameOperator(f3);
        
        Assert.assertEquals("Sensor Control type selected ", Bundle.getMessage("LightSensorControl"),
            new JComboBoxOperator(jfof3, 0).getSelectedItem());
        
        Assert.assertEquals("Sensor selected ", "ISS2",
            new JComboBoxOperator(jfof3, 1).getSelectedItem());
        
        Assert.assertEquals("Sensor active ", Bundle.getMessage("SensorStateActive"),
            new JComboBoxOperator(jfof3, 2).getSelectedItem());
        
        new JComboBoxOperator(jfof3, 1).selectItem(("ISS1")); // select Sensor S1
        jmri.util.swing.JemmyUtil.pressButton(jfof3,Bundle.getMessage("ButtonUpdate"));
        // light control edit frame closes
        
        sOne.setState(Sensor.OFF);
        Assert.assertEquals("Light still ON", Light.ON, created.getState());
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonUpdate"));
        // light edit frame closes
        
        // light should now be updaed to S1
        Assert.assertEquals("Correct Light Control Type", "ON when ISS1 is Active.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
        JUnitUtil.waitFor(()->{return created.getState()==Light.OFF;},"Light should go OFF to match sOne");
        sOne.setState(Sensor.ON);
        JUnitUtil.waitFor(()->{return created.getState()==Light.ON;},"Light should go ON to match sOne");
        Assert.assertEquals("1 Control", 1, created.getLightControlList().size());
        
        JUnitUtil.dispose(f1);
        JUnitUtil.dispose(f);  // close Light Table window
        
    }
    
    @Test
    public void testAddEditFastClockFollowerLightControl() throws jmri.JmriException {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());

        a.actionPerformed(null); // show table
        
        JFrame f = JFrameOperator.waitJFrame(getTableFrameName(), true, true);

        // find the "Add... " button and press it.
        JFrameOperator jfo = new JFrameOperator(f);
        jmri.util.swing.JemmyUtil.pressButton(jfo,Bundle.getMessage("ButtonAdd"));
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f1 = JFrameOperator.waitJFrame(getAddFrameName(), true, true);
        //Enter 4321 in the text field labeled "Hardware address:"
        JTextField hwAddressField = JTextFieldOperator.findJTextField(f1, new NameComponentChooser("hwAddressTextField"));
        // set to "4321"
        new JTextFieldOperator(hwAddressField).typeText("4321");
        JFrameOperator jfob = new JFrameOperator(f1);
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("LightAddControlButton"));
        JFrame fControl = JFrameOperator.waitJFrame(Bundle.getMessage("TitleAddLightControl"), true, true);
        JFrameOperator jfoc = new JFrameOperator(fControl);
        
        // create a new Light Controlled by Sensor S2
        new JComboBoxOperator(jfoc, 0).selectItem(Bundle.getMessage("LightFastClockControl"));
        
        Assert.assertEquals("default Hour ON Time ", "00",new JTextFieldOperator(jfoc,0).getText());
        Assert.assertEquals("default Minute ON Time ", "00",new JTextFieldOperator(jfoc,1).getText());
        Assert.assertEquals("default Hour OFF Time ", "00",new JTextFieldOperator(jfoc,2).getText());
        Assert.assertEquals("default Minute OFF Time ", "00",new JTextFieldOperator(jfoc,3).getText());
        
        new JTextFieldOperator(jfoc,0).clearText();
        new JTextFieldOperator(jfoc,0).typeText("01");
        new JTextFieldOperator(jfoc,1).clearText();
        new JTextFieldOperator(jfoc,1).typeText("02");
        new JTextFieldOperator(jfoc,2).clearText();
        new JTextFieldOperator(jfoc,2).typeText("03");
        new JTextFieldOperator(jfoc,3).clearText();
        new JTextFieldOperator(jfoc,3).typeText("04");

        jmri.util.swing.JemmyUtil.pressButton(jfoc,Bundle.getMessage("ButtonCreate"));
        // light control frame closes
        
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonCreate"));   
        // new light frame closes
        
        Light created = InstanceManager.getDefault(jmri.LightManager.class).provideLight("IL4321");
        Assert.assertEquals("1 Control", 1, created.getLightControlList().size());
        Assert.assertEquals("Correct Light Control Type and Times", "ON at 01:02, OFF at 03:04.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
        
         // now we find the Light in the table and edit it
        JTableOperator tbl = new JTableOperator(jfo, 0);
        // find the "Edit" button and press it.  This is in the table body.
        tbl.clickOnCell(0,tbl.getColumnCount() -1); // edit column is last in light table.
        
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f2 = JFrameOperator.waitJFrame(getEditFrameName(), true, true);
        
        JFrameOperator jfoce = new JFrameOperator(f2);
        JTableOperator controltbl = new JTableOperator(jfoce, 0);
        // find the "Edit" button and press it.  This is in the table body.
        
        controltbl.clickOnCell(0,2); // click edit button in column 2.
        
        // find edit control window
        JFrame f3 = JFrameOperator.waitJFrame(Bundle.getMessage("TitleEditLightControl"), true, true);
        JFrameOperator jfof3 = new JFrameOperator(f3);
        // edit window should have the FastClock Follower control selected
        Assert.assertEquals("Sensor Control type selected ", Bundle.getMessage("LightFastClockControl"),
            new JComboBoxOperator(jfof3, 0).getSelectedItem());
            
        Assert.assertEquals("Correct Hour ON Time ", "01",new JTextFieldOperator(jfof3,0).getText());
        Assert.assertEquals("Correct Minute ON Time ", "02",new JTextFieldOperator(jfof3,1).getText());
        Assert.assertEquals("Correct Hour OFF Time ", "03",new JTextFieldOperator(jfof3,2).getText());
        Assert.assertEquals("Correct Minute OFF Time ", "04",new JTextFieldOperator(jfof3,3).getText());
        
        new JTextFieldOperator(jfof3,0).clearText();
        new JTextFieldOperator(jfof3,0).typeText("21");
        new JTextFieldOperator(jfof3,1).clearText();
        new JTextFieldOperator(jfof3,1).typeText("22");
        new JTextFieldOperator(jfof3,2).clearText();
        new JTextFieldOperator(jfof3,2).typeText("23");
        new JTextFieldOperator(jfof3,3).clearText();
        new JTextFieldOperator(jfof3,3).typeText("24");
        
        jmri.util.swing.JemmyUtil.pressButton(jfof3,Bundle.getMessage("ButtonUpdate"));
        // light control edit frame closes
        
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonUpdate"));
        // light edit frame closes
        
        Assert.assertEquals("Correct Light Control Type and Times", "ON at 21:22, OFF at 23:24.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
        
        // now we edit the control then cancel the edit
        
        tbl.clickOnCell(0,tbl.getColumnCount() -1); // edit column is last in light table.
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f4 = JFrameOperator.waitJFrame(getEditFrameName(), true, true);
        
        JFrameOperator jfocef4 = new JFrameOperator(f4);
        new JTableOperator(jfocef4, 0).clickOnCell(0,2); // click edit button in column 2.
        // find the "Edit" Control button and press it.  This is in the table body.
        
        // find edit control window
        JFrame f5 = JFrameOperator.waitJFrame(Bundle.getMessage("TitleEditLightControl"), true, true);
        JFrameOperator jfof5 = new JFrameOperator(f5);
        // edit window should have the FastClock Follower control selected
        
        Assert.assertEquals("Correct Hour ON Time ", "21",new JTextFieldOperator(jfof5,0).getText());
        Assert.assertEquals("Correct Minute ON Time ", "22",new JTextFieldOperator(jfof5,1).getText());
        Assert.assertEquals("Correct Hour OFF Time ", "23",new JTextFieldOperator(jfof5,2).getText());
        Assert.assertEquals("Correct Minute OFF Time ", "24",new JTextFieldOperator(jfof5,3).getText());
        
        new JTextFieldOperator(jfof5,0).clearText();
        new JTextFieldOperator(jfof5,0).typeText("07");
        new JTextFieldOperator(jfof5,1).clearText();
        new JTextFieldOperator(jfof5,1).typeText("07");
        new JTextFieldOperator(jfof5,2).clearText();
        new JTextFieldOperator(jfof5,2).typeText("07");
        new JTextFieldOperator(jfof5,3).clearText();
        new JTextFieldOperator(jfof5,3).typeText("07");
        
        jmri.util.swing.JemmyUtil.pressButton(jfof5,Bundle.getMessage("ButtonUpdate"));
        // light control edit frame closes
        
        // now we click cancel on the edit light so changes from the edited control are not passed
        jmri.util.swing.JemmyUtil.pressButton(new JFrameOperator(f4),Bundle.getMessage("ButtonCancel"));
        
        Assert.assertEquals("Unchanged Light Control Type and Times", "ON at 21:22, OFF at 23:24.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );

        JUnitUtil.dispose(f);  // close Light Table window
        
    }

    @Test
    public void testAddEditTurnoutLightControl() throws jmri.JmriException {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        
        Turnout tOne = InstanceManager.getDefault(jmri.TurnoutManager.class).provideTurnout("T1");
        Turnout tTwo = InstanceManager.getDefault(jmri.TurnoutManager.class).provideTurnout("T2");

        Assert.assertNotNull("exists",tOne);
        Assert.assertNotNull("exists",tTwo);

        a.actionPerformed(null); // show table
        
        JFrame f = JFrameOperator.waitJFrame(getTableFrameName(), true, true);

        // find the "Add... " button and press it.
        JFrameOperator jfo = new JFrameOperator(f);
        jmri.util.swing.JemmyUtil.pressButton(jfo,Bundle.getMessage("ButtonAdd"));
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f1 = JFrameOperator.waitJFrame(getAddFrameName(), true, true);
        //Enter 333 in the text field labeled "Hardware address:"
        JTextField hwAddressField = JTextFieldOperator.findJTextField(f1, new NameComponentChooser("hwAddressTextField"));
        new JTextFieldOperator(hwAddressField).typeText("333");
        JFrameOperator jfob = new JFrameOperator(f1);
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("LightAddControlButton"));
        JFrame fControl = JFrameOperator.waitJFrame(Bundle.getMessage("TitleAddLightControl"), true, true);
        JFrameOperator jfoc = new JFrameOperator(fControl);
        
        new JComboBoxOperator(jfoc, 0).selectItem(Bundle.getMessage("LightTurnoutStatusControl"));
        
        new JComboBoxOperator(jfoc, 1).selectItem(("ITT2")); // select Turnout T2
        new JComboBoxOperator(jfoc, 2).selectItem(
            InstanceManager.getDefault(jmri.TurnoutManager.class).getThrownText());
        
        jmri.util.swing.JemmyUtil.pressButton(jfoc,Bundle.getMessage("ButtonCreate"));
        // light new control frame closes
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonCreate"));
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonClose"));
        
        Light created = InstanceManager.getDefault(jmri.LightManager.class).getLight("IL333");
        Assert.assertEquals("1 Control", 1, created.getLightControlList().size());
        
        // light should now be updaed to S1
        Assert.assertEquals("Correct LightControl Type Turnout", "ON when ITT2 is Thrown.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
        
        // now we find the Light in the table and edit it
        JTableOperator tbl = new JTableOperator(jfo, 0);
        // find the "Edit" button and press it.  This is in the table body.
        tbl.clickOnCell(0,tbl.getColumnCount() -1); // edit column is last in light table.
        
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f2 = JFrameOperator.waitJFrame(getEditFrameName(), true, true);
        // jmri.util.swing.JemmyUtil.pressButton(new JFrameOperator(f2),Bundle.getMessage("ButtonCancel"));
        JFrameOperator jfoce = new JFrameOperator(f2);
        JTableOperator controltbl = new JTableOperator(jfoce, 0);
        // find the "Edit" button and press it.  This is in the table body.
        controltbl.clickOnCell(0,2); // click edit button in column 2.
        
        // find edit control window
        JFrame f3 = JFrameOperator.waitJFrame(Bundle.getMessage("TitleEditLightControl"), true, true);
        JFrameOperator jfof3 = new JFrameOperator(f3);
        
        Assert.assertEquals("Turnout type selected ", Bundle.getMessage("LightTurnoutStatusControl"),
            new JComboBoxOperator(jfof3, 0).getSelectedItem());
        Assert.assertEquals("Turnout selected ", "ITT2",
            new JComboBoxOperator(jfof3, 1).getSelectedItem());
        Assert.assertEquals("Turnout thrown ", InstanceManager.getDefault(jmri.TurnoutManager.class).getThrownText(),
            new JComboBoxOperator(jfof3, 2).getSelectedItem());
        
        new JComboBoxOperator(jfof3, 1).selectItem(("ITT1")); // select Turnout T2
        new JComboBoxOperator(jfof3, 2).selectItem(
            InstanceManager.getDefault(jmri.TurnoutManager.class).getClosedText());
        
        jmri.util.swing.JemmyUtil.pressButton(jfof3,Bundle.getMessage("ButtonUpdate"));
        // light new control frame closes
        
        jmri.util.swing.JemmyUtil.pressButton(jfoce,Bundle.getMessage("ButtonUpdate"));
        // light edit frame closes
        
        // confirm light has been created with correct control        
        Assert.assertEquals("Correct LightControl", "ON when ITT1 is Closed.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
        
        JUnitUtil.dispose(f);  // close Light Table window
        
    }
    
    
    @Test
    public void testAddEditTimedOnLightControl() throws jmri.JmriException {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        
        // create 2 Sensors to pick from
        Sensor sOne = InstanceManager.getDefault(jmri.SensorManager.class).provideSensor("S1");
        Sensor sTwo = InstanceManager.getDefault(jmri.SensorManager.class).provideSensor("S2");

        Assert.assertNotNull("exists",sOne);
        Assert.assertNotNull("exists",sTwo);

        a.actionPerformed(null); // show table
        
        JFrame f = JFrameOperator.waitJFrame(getTableFrameName(), true, true);

        // find the "Add... " button and press it.
        JFrameOperator jfo = new JFrameOperator(f);
        jmri.util.swing.JemmyUtil.pressButton(jfo,Bundle.getMessage("ButtonAdd"));
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f1 = JFrameOperator.waitJFrame(getAddFrameName(), true, true);
        //Enter 444 in the text field labeled "Hardware address:"
        JTextField hwAddressField = JTextFieldOperator.findJTextField(f1, new NameComponentChooser("hwAddressTextField"));
        new JTextFieldOperator(hwAddressField).typeText("444");
        JFrameOperator jfob = new JFrameOperator(f1);
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("LightAddControlButton"));
        JFrame fControl = JFrameOperator.waitJFrame(Bundle.getMessage("TitleAddLightControl"), true, true);
        JFrameOperator jfoc = new JFrameOperator(fControl);
        
        // create a new Light Control
        new JComboBoxOperator(jfoc, 0).selectItem(Bundle.getMessage("LightTimedOnControl"));
        new JComboBoxOperator(jfoc, 1).selectItem(("ISS2")); // select Sensor S2
        new JTextFieldOperator(jfoc,0).clearText();
        new JTextFieldOperator(jfoc,0).typeText("20");
        
        jmri.util.swing.JemmyUtil.pressButton(jfoc,Bundle.getMessage("ButtonCreate"));
        // light control frame closes
        
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonCreate"));   
        // new light frame closes
        
        Light created = InstanceManager.getDefault(jmri.LightManager.class).provideLight("IL444");
        Assert.assertEquals("1 Control", 1, created.getLightControlList().size());
        Assert.assertEquals("Correct Light Control Type and Settings", "ON for 20 msec. when ISS2 goes Active.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
        
         // now we find the Light in the table and edit it
        JTableOperator tbl = new JTableOperator(jfo, 0);
        // find the "Edit" button and press it.  This is in the table body.
        tbl.clickOnCell(0,tbl.getColumnCount() -1); // edit column is last in light table.
        
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f2 = JFrameOperator.waitJFrame(getEditFrameName(), true, true);
        
        JFrameOperator jfoce = new JFrameOperator(f2);
        JTableOperator controltbl = new JTableOperator(jfoce, 0);
        // find the "Edit" button and press it.  This is in the table body.
        
        controltbl.clickOnCell(0,2); // click edit button in column 2.
        
        // find edit control window
        JFrame f3 = JFrameOperator.waitJFrame(Bundle.getMessage("TitleEditLightControl"), true, true);
        JFrameOperator jfof3 = new JFrameOperator(f3);
        
        // edit window should have the Timed On control selected
        Assert.assertEquals("Timed On Control type selected ", Bundle.getMessage("LightTimedOnControl"),
            new JComboBoxOperator(jfof3, 0).getSelectedItem());
        Assert.assertEquals("Correct duration ", "20",new JTextFieldOperator(jfof3,0).getText());
        
        new JComboBoxOperator(jfof3, 1).selectItem(("ISS1")); // select Sensor S1
        
        new JTextFieldOperator(jfof3,0).clearText();
        new JTextFieldOperator(jfof3,0).typeText("777");
        
        jmri.util.swing.JemmyUtil.pressButton(jfof3,Bundle.getMessage("ButtonUpdate"));
        // light control edit frame closes
        
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonUpdate"));
        // light edit frame closes
        
        // light should now be updaed to S1
        Assert.assertEquals("Correct Light Control Type", "ON for 777 msec. when ISS1 goes Active.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
        
        JUnitUtil.dispose(f); // close Light Table window
        
    }
    
    @Test
    public void testAddEditTwoSensorLightControl() throws jmri.JmriException {
    
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        
        // create 3 Sensors to pick from
        Sensor sOne = InstanceManager.getDefault(jmri.SensorManager.class).provideSensor("S1");
        Sensor sTwo = InstanceManager.getDefault(jmri.SensorManager.class).provideSensor("S2");
        Sensor sThree = InstanceManager.getDefault(jmri.SensorManager.class).provideSensor("S3");

        Assert.assertNotNull("exists",sOne);
        Assert.assertNotNull("exists",sTwo);
        Assert.assertNotNull("exists",sThree);

        a.actionPerformed(null); // show table
        
        JFrame f = JFrameOperator.waitJFrame(getTableFrameName(), true, true);

        // find the "Add... " button and press it.
        JFrameOperator jfo = new JFrameOperator(f);
        jmri.util.swing.JemmyUtil.pressButton(jfo,Bundle.getMessage("ButtonAdd"));
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f1 = JFrameOperator.waitJFrame(getAddFrameName(), true, true);
        //Enter 555 in the text field labeled "Hardware address:"
        JTextField hwAddressField = JTextFieldOperator.findJTextField(f1, new NameComponentChooser("hwAddressTextField"));
        new JTextFieldOperator(hwAddressField).typeText("555");
        JFrameOperator jfob = new JFrameOperator(f1);
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("LightAddControlButton"));
        JFrame fControl = JFrameOperator.waitJFrame(Bundle.getMessage("TitleAddLightControl"), true, true);
        JFrameOperator jfoc = new JFrameOperator(fControl);
        
        // create a new LightControl
        new JComboBoxOperator(jfoc, 0).selectItem(Bundle.getMessage("LightTwoSensorControl"));
        new JComboBoxOperator(jfoc, 1).selectItem(("ISS3")); // select Sensor S3
        new JComboBoxOperator(jfoc, 2).selectItem(("ISS1")); // select Sensor S1
        new JComboBoxOperator(jfoc, 3).selectItem(Bundle.getMessage("SensorStateActive"));
        
        jmri.util.swing.JemmyUtil.pressButton(jfoc,Bundle.getMessage("ButtonCreate"));
        // light control frame closes
        
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonCreate"));
        // new / edit light frame stays open
        
        // so we close it
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonClose"));
        
        // confirm light has been created with correct control
        Light created = InstanceManager.getDefault(jmri.LightManager.class).provideLight("IL555");
        
        Assert.assertEquals("Correct Light Control Type", "ON when either ISS3 or ISS1 is Active.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
            
        // now we find the Light in the table and edit it
        JTableOperator tbl = new JTableOperator(jfo, 0);
        // find the "Edit" button and press it.  This is in the table body.
        tbl.clickOnCell(0,tbl.getColumnCount() -1); // edit column is last in light table.
        
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f2 = JFrameOperator.waitJFrame(getEditFrameName(), true, true);
        
        JFrameOperator jfoce = new JFrameOperator(f2);
        JTableOperator controltbl = new JTableOperator(jfoce, 0);
        // find the "Edit" button and press it.  This is in the table body.
        controltbl.clickOnCell(0,2); // click edit button in column 2.
        
        // find edit control window
        JFrame f3 = JFrameOperator.waitJFrame(Bundle.getMessage("TitleEditLightControl"), true, true);
        JFrameOperator jfof3 = new JFrameOperator(f3);
        
        // edit window should have the 2 sensor control selected
        Assert.assertEquals("2 Sensor Control type selected ", Bundle.getMessage("LightTwoSensorControl"),
            new JComboBoxOperator(jfof3, 0).getSelectedItem());
        Assert.assertEquals("Sensor slot 1 selected ", "ISS3",
            new JComboBoxOperator(jfof3, 1).getSelectedItem());
        Assert.assertEquals("Sensor slot 2 selected ", "ISS1",
            new JComboBoxOperator(jfof3, 2).getSelectedItem());
            
        Assert.assertEquals("Sensor active", Bundle.getMessage("SensorStateActive"),
            new JComboBoxOperator(jfof3, 3).getSelectedItem());
            
        new JComboBoxOperator(jfof3, 1).selectItem(("ISS2")); // select Sensor S2
        new JComboBoxOperator(jfof3, 2).selectItem(("ISS3")); // select Sensor S3
        
        new JComboBoxOperator(jfof3, 3).selectItem(Bundle.getMessage("SensorStateInactive"));
        
        jmri.util.swing.JemmyUtil.pressButton(jfof3,Bundle.getMessage("ButtonUpdate"));
        // light control edit frame closes
        
        jmri.util.swing.JemmyUtil.pressButton(jfoce,Bundle.getMessage("ButtonUpdate"));
        // light edit frame closes
        
        // light should now be updaed
        Assert.assertEquals("Correct Light Control Type", "ON when either ISS2 or ISS3 is Inactive.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
        
        JUnitUtil.dispose(f); // close Light Table window

        // jmri.util.swing.JemmyUtil.pressButton(new JFrameOperator(f),("Pause"));

    }
    
    // sensors with usernames
        @Test
    public void testSensorUserNamesLightControl() throws jmri.JmriException {
    
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        
        // create 3 Sensors to pick from
        Sensor sOne = InstanceManager.getDefault(jmri.SensorManager.class).provideSensor("S1");
        Sensor sTwo = InstanceManager.getDefault(jmri.SensorManager.class).provideSensor("S2");
        
        sOne.setUserName("My Sensor One");
        sTwo.setUserName("My Sensor Two");

        a.actionPerformed(null); // show table
        
        JFrame f = JFrameOperator.waitJFrame(getTableFrameName(), true, true);

        // find the "Add... " button and press it.
        JFrameOperator jfo = new JFrameOperator(f);
        jmri.util.swing.JemmyUtil.pressButton(jfo,Bundle.getMessage("ButtonAdd"));
        new org.netbeans.jemmy.QueueTool().waitEmpty();
        JFrame f1 = JFrameOperator.waitJFrame(getAddFrameName(), true, true);
        //Enter 777 in the text field labeled "Hardware address:"
        JTextField hwAddressField = JTextFieldOperator.findJTextField(f1, new NameComponentChooser("hwAddressTextField"));
        new JTextFieldOperator(hwAddressField).typeText("777");
        JFrameOperator jfob = new JFrameOperator(f1);
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("LightAddControlButton"));
        JFrame fControl = JFrameOperator.waitJFrame(Bundle.getMessage("TitleAddLightControl"), true, true);
        JFrameOperator jfoc = new JFrameOperator(fControl);
        
        // create a new LightControl
        new JComboBoxOperator(jfoc, 0).selectItem(Bundle.getMessage("LightTwoSensorControl"));
        new JComboBoxOperator(jfoc, 1).selectItem(("My Sensor Two")); // select Sensor S2
        new JComboBoxOperator(jfoc, 2).selectItem(("My Sensor One")); // select Sensor S1
        new JComboBoxOperator(jfoc, 3).selectItem(Bundle.getMessage("SensorStateActive"));
        
        jmri.util.swing.JemmyUtil.pressButton(jfoc,Bundle.getMessage("ButtonCreate"));
        // light control frame closes
        
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonCreate"));
        // new / edit light frame stays open
        
        // so we close it
        jmri.util.swing.JemmyUtil.pressButton(jfob,Bundle.getMessage("ButtonClose"));
        
        // confirm light has been created with correct control
        Light created = InstanceManager.getDefault(jmri.LightManager.class).provideLight("IL777");
        
        Assert.assertEquals("Correct Light Control Type", "ON when either My Sensor Two or My Sensor One is Active.", 
            LightTableAction.getDescriptionText(created.getLightControlList().get(0),
            created.getLightControlList().get(0).getControlType() ) );
        
        JUnitUtil.dispose(f); // close Light Table window
        
        // jmri.util.swing.JemmyUtil.pressButton(new JFrameOperator(f),("Pause Test"));
        
    }

    // The minimal setup for log4J
    @Before
    @Override
    public void setUp() {
        jmri.util.JUnitUtil.setUp();

        jmri.util.JUnitUtil.resetProfileManager();
        jmri.util.JUnitUtil.initInternalLightManager();
        jmri.util.JUnitUtil.initInternalSensorManager();
        jmri.util.JUnitUtil.initInternalTurnoutManager();
        jmri.util.JUnitUtil.resetInstanceManager();
        jmri.util.JUnitUtil.initDefaultUserMessagePreferences();
        helpTarget = "package.jmri.jmrit.beantable.LightTable"; 
        a = new LightTableAction();
    }

    @After
    @Override
    public void tearDown() {
        a = null;
        jmri.util.JUnitUtil.resetInstanceManager();
        jmri.util.JUnitUtil.initDefaultUserMessagePreferences();
        jmri.util.JUnitUtil.tearDown();

    }

    // private final static Logger log = LoggerFactory.getLogger(LightTableActionTest.class);

}
