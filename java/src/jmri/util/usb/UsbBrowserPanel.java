/*============================================================================*
 * WARNING      This class contains automatically modified code.      WARNING *
 *                                                                            *
 * The method initComponents() and the variable declarations between the      *
 * "// Variables declaration - do not modify" and                             *
 * "// End of variables declaration" comments will be overwritten if modified *
 * by hand. Using the NetBeans IDE to edit this file is strongly recommended. *
 *                                                                            *
 * See http://jmri.org/help/en/html/doc/Technical/NetBeansGUIEditor.shtml for *
 * more information.                                                          *
 *============================================================================*/
package jmri.util.usb;

import java.io.UnsupportedEncodingException;
import java.util.List;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.usb.UsbDevice;
import javax.usb.UsbDisconnectedException;
import javax.usb.UsbException;
import javax.usb.UsbHostManager;
import javax.usb.UsbHub;
import javax.usb.event.UsbServicesEvent;
import javax.usb.event.UsbServicesListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Randall Wood (C) 2017
 */
public class UsbBrowserPanel extends javax.swing.JPanel {

    private final UsbTreeNode root;
    private final UsbDeviceTableModel deviceModel = new UsbDeviceTableModel();
    private final static Logger log = LoggerFactory.getLogger(UsbBrowserPanel.class);
    private final UsbServicesListener usbServicesListener = new UsbServicesListener() {
        @Override
        public void usbDeviceAttached(UsbServicesEvent use) {
            // TODO: use sublter method to add device to tree
            UsbTreeNode root = UsbBrowserPanel.this.root;
            root.removeAllChildren();
            UsbBrowserPanel.this.buildTree(root);
        }

        @Override
        public void usbDeviceDetached(UsbServicesEvent use) {
            // TODO: use sublter method to remove device from tree
            UsbTreeNode root = UsbBrowserPanel.this.root;
            root.removeAllChildren();
            UsbBrowserPanel.this.buildTree(root);
        }
    };
    private final TreeSelectionListener treeSelectionListener = (TreeSelectionEvent e) -> {
        UsbTreeNode node = (UsbTreeNode) this.usbTree.getLastSelectedPathComponent();
        if (node != null) {
            UsbDevice device = (UsbDevice) node.getUserObject();
            this.deviceModel.setUsbDevice(device);
        } else {
            this.usbTree.setSelectionPath(e.getNewLeadSelectionPath());
        }
    };

    /**
     * Create new UsbBrowserPanel.
     *
     */
    public UsbBrowserPanel() {
        this.root = new UsbTreeNode();
        this.buildTree(this.root);
        if (this.root.getUserObject() != null) {
            try {
                UsbHostManager.getUsbServices().addUsbServicesListener(this.usbServicesListener);
            } catch (UsbException | SecurityException ex) {
                log.error("Unable to get root USB hub.", ex);
            }
        }
        initComponents();
    }

    private void buildTree(UsbTreeNode root) {
        if (root.getUserObject() != null && ((UsbDevice) root.getUserObject()).isUsbHub()) {
            ((List<UsbDevice>) ((UsbHub) root.getUserObject()).getAttachedUsbDevices()).forEach((device) -> {
                UsbTreeNode node = new UsbTreeNode(device);
                this.buildTree(node);
                log.debug("Adding {} to {}", node, root);
                root.add(new UsbTreeNode(device));
            });
        }
        // prevent NPE if called in constructor
        if (this.usbTree != null) {
            TreePath selection = this.usbTree.getSelectionPath();
            ((DefaultTreeModel) this.usbTree.getModel()).reload(root);
            this.usbTree.setSelectionPath(selection);
        }
    }

    public void dispose() {
        try {
            UsbHostManager.getUsbServices().removeUsbServicesListener(this.usbServicesListener);
        } catch (UsbException | SecurityException ex) {
            // silently ignore, since it was logged when this panel was constructed
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane(this.usbTree);
        usbTree = new javax.swing.JTree(this.root);
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jSplitPane1.setBorder(null);
        jSplitPane1.setResizeWeight(0.5);

        jScrollPane1.setBorder(null);

        usbTree.setRootVisible(false);
        usbTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        usbTree.addTreeSelectionListener(this.treeSelectionListener);
        jScrollPane1.setViewportView(usbTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jTable1.setModel(this.deviceModel);
        jScrollPane2.setViewportView(jTable1);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTree usbTree;
    // End of variables declaration//GEN-END:variables

    private static class UsbTreeNode extends DefaultMutableTreeNode {

        public UsbTreeNode() {
            this(null);
        }

        public UsbTreeNode(UsbDevice node) {
            super();
            if (node == null) {
                try {
                    node = javax.usb.UsbHostManager.getUsbServices().getRootUsbHub();
                    log.debug("Using root node {}", node);
                } catch (UsbException | SecurityException ex) {
                    log.error("Unable to get root USB hub.", ex);
                }
            } else {
                log.error("Description of {} is\n{}", node, node.getUsbDeviceDescriptor());
            }
            this.userObject = node;
        }

        @Override
        public String toString() {
            if (this.userObject == null) {
                return Bundle.getMessage("UnableToGetUsbRootHub");
            } else if (this.userObject instanceof UsbDevice) {
                try {
                    UsbDevice device = ((UsbDevice) this.userObject);
                    if (device.getProductString() != null) {
                        return device.getProductString();
                    }
                } catch (UsbException | UnsupportedEncodingException | UsbDisconnectedException ex) {
                    log.error("Unable to get USB device properties for {}", this.userObject);
                }
            }
            return super.toString();
        }
    }

    private static class UsbDeviceTableModel extends AbstractTableModel {

        private UsbDevice device = null;

        @Override
        public int getRowCount() {
            return (device != null) ? 5 : 1;
        }

        @Override
        public int getColumnCount() {
            return (device != null) ? 2 : 1;
        }

        @Override
        public String getColumnName(int columnIndex) {
            return ""; // NOI18N
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (device == null) {
                return Bundle.getMessage("EmptySelection");
            }
            switch (columnIndex) {
                case 0:
                    switch (rowIndex) {
                        case 0:
                            return Bundle.getMessage("UsbDeviceManufacturer");
                        case 1:
                            return Bundle.getMessage("UsbDeviceProduct");
                        case 2:
                            return Bundle.getMessage("UsbDeviceSerial");
                        case 3:
                            return Bundle.getMessage("UsbDeviceVendorId");
                        case 4:
                            return Bundle.getMessage("UsbDeviceProductId");
                        default:
                            break;
                    }
                    break;
                case -1:
                case 1:
                    try {
                        switch (rowIndex) {
                            case 0:
                                return this.device.getManufacturerString();
                            case 1:
                                return this.device.getProductString();
                            case 2:
                                return this.device.getSerialNumberString();
                            case 3:
                                return String.format("%04x", this.device.getUsbDeviceDescriptor().idVendor());
                            case 4:
                                return String.format("%04x", this.device.getUsbDeviceDescriptor().idProduct());
                            default:
                                return null;
                        }
                    }catch (UsbDisconnectedException ex) {
                        this.setUsbDevice(null);
                    } catch (UnsupportedEncodingException | UsbException ex) {
                        log.error("Unable to get USB device property.", ex);
                    }
                    break;
                default:
                    return null;
            }
            return null;
        }

        public void setUsbDevice(UsbDevice device) {
            UsbDevice old = this.device;
            this.device = device;
            if ((old == null && device != null) || (old != null && device == null)) {
                this.fireTableStructureChanged();
            }
            this.fireTableDataChanged();
        }
    }
}
