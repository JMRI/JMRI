/*============================================================================*
 * WARNING      This class contains automatically modified code.      WARNING *
 *                                                                            *
 * The method initComponents() and the variable declarations between the      *
 * "// Variables declaration - do not modify" and                             *
 * "// End of variables declaration" comments will be overwritten if modified *
 * by hand. Using the NetBeans IDE to edit this file is strongly recommended. *
 *                                                                            *
 * See http://jmri.org/help/en/html/doc/Technical/NetBeansGUIEditor.shtml for *
 * more information.                                                          *
 *============================================================================*/
package jmri.profile;

import java.awt.Cursor;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import jmri.jmrit.roster.Roster;
import jmri.swing.PreferencesPanel;
import jmri.util.FileUtil;
import org.jdom2.JDOMException;
import org.openide.util.lookup.ServiceProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A JPanel suitable for managing {@link jmri.profile.Profile}s within a
 * preferences window.
 *
 * @author Randall Wood
 */
@ServiceProvider(service = PreferencesPanel.class)
public final class ProfilePreferencesPanel extends JPanel implements PreferencesPanel {

    private static final Logger log = LoggerFactory.getLogger(ProfilePreferencesPanel.class);

    /**
     * Creates new form ProfilePreferencesPanel
     */
    public ProfilePreferencesPanel() {
        initComponents();
        this.spinnerTimeout.setValue(ProfileManager.getDefault().getAutoStartActiveProfileTimeout());
        this.profilesTblValueChanged(null);
        this.searchPathsTblValueChanged(null);
        int index = ProfileManager.getDefault().getAllProfiles().indexOf(ProfileManager.getDefault().getActiveProfile());
        if (index != -1) {
            this.profilesTbl.setRowSelectionInterval(index, index);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        profilesPopupMenu = new JPopupMenu();
        renameMI = new JMenuItem();
        jSeparator1 = new JPopupMenu.Separator();
        copyMI = new JMenuItem();
        deleteMI = new JMenuItem();
        grpStartWithSelectors = new ButtonGroup();
        jTabbedPane1 = new JTabbedPane();
        enabledPanel = new JPanel();
        jScrollPane1 = new JScrollPane();
        profilesTbl = new JTable() {
            //Implement table cell tool tips.
            public String getToolTipText(MouseEvent e) {
                try {
                    return getValueAt(rowAtPoint(e.getPoint()), -1).toString();
                } catch (RuntimeException e1) {
                    //catch null pointer exception if mouse is over an empty line
                }
                return null;
            }};
            btnOpenExistingProfile = new JButton();
            btnDeleteProfile = new JButton();
            btnCreateNewProfile = new JButton();
            btnActivateProfile = new JButton();
            btnExportProfile = new JButton();
            btnCopyProfile = new JButton();
            spinnerTimeout = new JSpinner();
            jLabel1 = new JLabel();
            rdoStartWithActiveProfile = new JRadioButton();
            rdoStartWithProfileSelector = new JRadioButton();
            searchPathsPanel = new JPanel();
            btnRemoveSearchPath = new JButton();
            btnAddSearchPath = new JButton();
            jScrollPane3 = new JScrollPane();
            searchPathsTbl = new JTable() {
                //Implement table cell tool tips.
                public String getToolTipText(MouseEvent e) {
                    try {
                        return getValueAt(rowAtPoint(e.getPoint()), -1).toString();
                    } catch (RuntimeException e1) {
                        //catch null pointer exception if mouse is over an empty line
                    }
                    return null;
                }};

                profilesPopupMenu.addPopupMenuListener(new PopupMenuListener() {
                    public void popupMenuWillBecomeVisible(PopupMenuEvent evt) {
                        profilesPopupMenuPopupMenuWillBecomeVisible(evt);
                    }
                    public void popupMenuWillBecomeInvisible(PopupMenuEvent evt) {
                    }
                    public void popupMenuCanceled(PopupMenuEvent evt) {
                    }
                });

                ResourceBundle bundle = ResourceBundle.getBundle("jmri/profile/Bundle"); // NOI18N
                renameMI.setText(bundle.getString("ProfilePreferencesPanel.renameMI.text")); // NOI18N
                renameMI.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        renameMIActionPerformed(evt);
                    }
                });
                profilesPopupMenu.add(renameMI);
                profilesPopupMenu.add(jSeparator1);

                copyMI.setText(bundle.getString("ProfilePreferencesPanel.copyMI.text")); // NOI18N
                profilesPopupMenu.add(copyMI);

                deleteMI.setText(bundle.getString("ProfilePreferencesPanel.deleteMI.text")); // NOI18N
                profilesPopupMenu.add(deleteMI);

                if (ProfileManager.getDefault().isAutoStartActiveProfile()) {
                    this.rdoStartWithActiveProfile.setSelected(true);
                } else {
                    this.rdoStartWithProfileSelector.setSelected(true);
                }

                profilesTbl.setModel(new ProfileTableModel());
                profilesTbl.getSelectionModel().addListSelectionListener(new ProfilesSelectionListener());
                profilesTbl.getTableHeader().setReorderingAllowed(false);
                jScrollPane1.setViewportView(profilesTbl);

                btnOpenExistingProfile.setText(bundle.getString("ProfilePreferencesPanel.btnOpenExistingProfile.text")); // NOI18N
                btnOpenExistingProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnOpenExistingProfile.toolTipText")); // NOI18N
                btnOpenExistingProfile.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        btnOpenExistingProfileActionPerformed(evt);
                    }
                });

                btnDeleteProfile.setText(bundle.getString("ProfilePreferencesPanel.btnDeleteProfile.text")); // NOI18N
                btnDeleteProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnDeleteProfile.toolTipText")); // NOI18N
                btnDeleteProfile.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        btnDeleteProfileActionPerformed(evt);
                    }
                });

                btnCreateNewProfile.setText(bundle.getString("ProfilePreferencesPanel.btnCreateNewProfile.text")); // NOI18N
                btnCreateNewProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnCreateNewProfile.toolTipText")); // NOI18N
                btnCreateNewProfile.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        btnCreateNewProfileActionPerformed(evt);
                    }
                });

                btnActivateProfile.setText(bundle.getString("ProfilePreferencesPanel.btnActivateProfile.text")); // NOI18N
                btnActivateProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnActivateProfile.toolTipText")); // NOI18N
                btnActivateProfile.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        btnActivateProfileActionPerformed(evt);
                    }
                });

                btnExportProfile.setText(bundle.getString("ProfilePreferencesPanel.btnExportProfile.text")); // NOI18N
                btnExportProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnExportProfile.toolTipText")); // NOI18N
                btnExportProfile.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        btnExportProfileActionPerformed(evt);
                    }
                });

                btnCopyProfile.setText(bundle.getString("ProfilePreferencesPanel.btnCopyProfile.text")); // NOI18N
                btnCopyProfile.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        btnCopyProfileActionPerformed(evt);
                    }
                });

                spinnerTimeout.setModel(new SpinnerNumberModel(10, 0, 500, 1));
                spinnerTimeout.addChangeListener(new ChangeListener() {
                    public void stateChanged(ChangeEvent evt) {
                        spinnerTimeoutStateChanged(evt);
                    }
                });

                jLabel1.setText(bundle.getString("ProfilePreferencesPanel.jLabel1.text")); // NOI18N

                grpStartWithSelectors.add(rdoStartWithActiveProfile);
                rdoStartWithActiveProfile.setText(bundle.getString("ProfilePreferencesPanel.rdoStartWithActiveProfile.text")); // NOI18N
                rdoStartWithActiveProfile.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        rdoStartWithActiveProfileActionPerformed(evt);
                    }
                });

                grpStartWithSelectors.add(rdoStartWithProfileSelector);
                rdoStartWithProfileSelector.setText(bundle.getString("ProfilePreferencesPanel.rdoStartWithProfileSelector.text")); // NOI18N
                rdoStartWithProfileSelector.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        rdoStartWithProfileSelectorActionPerformed(evt);
                    }
                });

                GroupLayout enabledPanelLayout = new GroupLayout(enabledPanel);
                enabledPanel.setLayout(enabledPanelLayout);
                enabledPanelLayout.setHorizontalGroup(enabledPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(enabledPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(enabledPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(enabledPanelLayout.createSequentialGroup()
                                .addComponent(btnActivateProfile)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnOpenExistingProfile)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCreateNewProfile)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCopyProfile)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExportProfile)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                                .addComponent(btnDeleteProfile))
                            .addGroup(enabledPanelLayout.createSequentialGroup()
                                .addGroup(enabledPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(rdoStartWithActiveProfile)
                                    .addGroup(enabledPanelLayout.createSequentialGroup()
                                        .addComponent(rdoStartWithProfileSelector)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spinnerTimeout, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                );
                enabledPanelLayout.setVerticalGroup(enabledPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(enabledPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(enabledPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOpenExistingProfile)
                            .addComponent(btnCreateNewProfile)
                            .addComponent(btnActivateProfile)
                            .addComponent(btnExportProfile)
                            .addComponent(btnDeleteProfile)
                            .addComponent(btnCopyProfile))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdoStartWithActiveProfile)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(enabledPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoStartWithProfileSelector)
                            .addComponent(spinnerTimeout, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                );

                jTabbedPane1.addTab(bundle.getString("ProfilePreferencesPanel.enabledPanel.TabConstraints.tabTitle"), enabledPanel); // NOI18N

                btnRemoveSearchPath.setText(bundle.getString("ProfilePreferencesPanel.btnRemoveSearchPath.text")); // NOI18N
                btnRemoveSearchPath.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnRemoveSearchPath.toolTipText")); // NOI18N
                btnRemoveSearchPath.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        btnRemoveSearchPathActionPerformed(evt);
                    }
                });

                btnAddSearchPath.setText(bundle.getString("ProfilePreferencesPanel.btnAddSearchPath.text")); // NOI18N
                btnAddSearchPath.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnAddSearchPath.toolTipText")); // NOI18N
                btnAddSearchPath.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        btnAddSearchPathActionPerformed(evt);
                    }
                });

                searchPathsTbl.setModel(new SearchPathTableModel());
                searchPathsTbl.getSelectionModel().addListSelectionListener(new SearchPathSelectionListener());
                searchPathsTbl.getTableHeader().setReorderingAllowed(false);
                jScrollPane3.setViewportView(searchPathsTbl);

                GroupLayout searchPathsPanelLayout = new GroupLayout(searchPathsPanel);
                searchPathsPanel.setLayout(searchPathsPanelLayout);
                searchPathsPanelLayout.setHorizontalGroup(searchPathsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(searchPathsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(searchPathsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                            .addGroup(searchPathsPanelLayout.createSequentialGroup()
                                .addComponent(btnAddSearchPath)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemoveSearchPath)))
                        .addContainerGap())
                );
                searchPathsPanelLayout.setVerticalGroup(searchPathsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(searchPathsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPathsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddSearchPath)
                            .addComponent(btnRemoveSearchPath))
                        .addContainerGap())
                );

                jTabbedPane1.addTab(bundle.getString("ProfilePreferencesPanel.searchPathsPanel.TabConstraints.tabTitle_1"), searchPathsPanel); // NOI18N

                GroupLayout layout = new GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, GroupLayout.Alignment.TRAILING)
                );
                layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                );

                jTabbedPane1.getAccessibleContext().setAccessibleName(bundle.getString("ProfilePreferencesPanel.enabledPanel.TabConstraints.tabTitle")); // NOI18N
            }// </editor-fold>//GEN-END:initComponents

    private void renameMIActionPerformed(ActionEvent evt) {//GEN-FIRST:event_renameMIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_renameMIActionPerformed

    private void profilesPopupMenuPopupMenuWillBecomeVisible(PopupMenuEvent evt) {//GEN-FIRST:event_profilesPopupMenuPopupMenuWillBecomeVisible
        if (profilesTbl.getSelectedRowCount() == 1) {
            this.renameMI.setEnabled(true);
        }
    }//GEN-LAST:event_profilesPopupMenuPopupMenuWillBecomeVisible

    private void btnAddSearchPathActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddSearchPathActionPerformed
        JFileChooser chooser = new JFileChooser(FileUtil.getHomePath());
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setFileFilter(new ProfileFileFilter());
        chooser.setFileView(new ProfileFileView());
        // TODO: Use NetBeans OpenDialog if its availble
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ProfileManager.getDefault().addSearchPath(chooser.getSelectedFile());
                int index = ProfileManager.getDefault().getAllSearchPaths().indexOf(chooser.getSelectedFile());
                this.searchPathsTbl.setRowSelectionInterval(index, index);
            } catch (IOException ex) {
                log.warn("Unable to write profiles while adding search path {}", chooser.getSelectedFile().getPath(), ex);
                JOptionPane.showMessageDialog(this,
                        Bundle.getMessage("ProfilePreferencesPanel.btnAddSearchPath.errorMessage",
                                chooser.getSelectedFile().getPath(),
                                ex.getLocalizedMessage()),
                        Bundle.getMessage("ProfilePreferencesPanel.btnAddSearchPath.errorTitle"),
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddSearchPathActionPerformed

    private void btnRemoveSearchPathActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnRemoveSearchPathActionPerformed
        ArrayList<File> paths = new ArrayList<>(this.searchPathsTbl.getSelectedRowCount());
        for (int row : this.searchPathsTbl.getSelectedRows()) {
            paths.add(ProfileManager.getDefault().getSearchPaths(row));
        }
        for (File path : paths) {
            try {
                ProfileManager.getDefault().removeSearchPath(path);
            } catch (IOException ex) {
                log.warn("Unable to write profiles while removing search path {}", path.getPath(), ex);
                JOptionPane.showMessageDialog(this,
                        Bundle.getMessage("ProfilePreferencesPanel.btnRemoveSearchPath.errorMessage", path.getPath(), ex.getLocalizedMessage()),
                        Bundle.getMessage("ProfilePreferencesPanel.btnRemoveSearchPath.errorTitle"),
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRemoveSearchPathActionPerformed

    private void btnExportProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnExportProfileActionPerformed
        Profile p = ProfileManager.getDefault().getProfiles(profilesTbl.getSelectedRow());
        if (p == null) {
            // abort if selection does not match an existing profile
            return;
        }
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileNameExtensionFilter("ZIP Archives", "zip"));
        chooser.setFileView(new ProfileFileView());
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setSelectedFile(new File(p.getName() + ".zip"));
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                if (chooser.getSelectedFile().exists()) {
                    int result = JOptionPane.showConfirmDialog(this,
                            Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.overwriteMessage",
                                    chooser.getSelectedFile().getName(),
                                    chooser.getSelectedFile().getParentFile().getName()),
                            Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.overwriteTitle"),
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.WARNING_MESSAGE);
                    if (result == JOptionPane.YES_OPTION) {
                        if (!chooser.getSelectedFile().delete()) {
                            JOptionPane.showMessageDialog(this,
                                    Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.failureToDeleteMessage",
                                            chooser.getSelectedFile().getName(),
                                            chooser.getSelectedFile().getParentFile().getName()),
                                    Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.failureToDeleteTitle"),
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        this.btnExportProfileActionPerformed(evt);
                        return;
                    }
                }
                boolean exportExternalUserFiles = false;
                boolean exportExternalRoster = false;
                if (!(new File(FileUtil.getUserFilesPath())).getCanonicalPath().startsWith(p.getPath().getCanonicalPath())) {
                    int result = JOptionPane.showConfirmDialog(this,
                            Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.externalUserFilesMessage"),
                            Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.externalUserFilesTitle"),
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE);
                    if (result == JOptionPane.YES_OPTION) {
                        exportExternalUserFiles = true;
                    }
                }
                if (!(new File(Roster.getDefault().getRosterLocation())).getCanonicalPath().startsWith(p.getPath().getCanonicalPath())
                        && !Roster.getDefault().getRosterLocation().startsWith(FileUtil.getUserFilesPath())) {
                    int result = JOptionPane.showConfirmDialog(this,
                            Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.externalRosterMessage"),
                            Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.externalRosterTitle"),
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE);
                    if (result == JOptionPane.YES_OPTION) {
                        exportExternalRoster = true;
                    }
                }
                //if (ProfileManager.getDefault().getActiveProfile() == p) {
                //    // TODO: save roster, panels, operations if needed and safe to do so
                //}
                ProfileManager.getDefault().export(p, chooser.getSelectedFile(), exportExternalUserFiles, exportExternalRoster);
                log.info("Profile \"{}\" exported to \"{}\"", p.getName(), chooser.getSelectedFile().getName());
                JOptionPane.showMessageDialog(this,
                        Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.successMessage",
                                p.getName(), chooser.getSelectedFile().getName()),
                        Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.successTitle"),
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException | JDOMException ex) {
                log.warn("Unable to export profile \"{}\" to {}", p.getName(), chooser.getSelectedFile().getPath(), ex);
                JOptionPane.showMessageDialog(this,
                        Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.errorMessage",
                                p.getName(),
                                chooser.getSelectedFile().getPath(),
                                ex.getLocalizedMessage()),
                        Bundle.getMessage("ProfilePreferencesPanel.btnExportProfile.errorTitle"),
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnExportProfileActionPerformed

    private void btnActivateProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnActivateProfileActionPerformed
        try {
            Profile p = ProfileManager.getDefault().getProfiles(profilesTbl.getSelectedRow());
            ProfileManager.getDefault().setNextActiveProfile(p);
            ProfileManager.getDefault().saveActiveProfile(p, ProfileManager.getDefault().isAutoStartActiveProfile());
        } catch (IOException ex) {
            log.error("Unable to save profile preferences", ex);
            JOptionPane.showMessageDialog(this, "Usable to save profile preferences.\n" + ex.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnActivateProfileActionPerformed

    private void btnCreateNewProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCreateNewProfileActionPerformed
        AddProfileDialog apd = new AddProfileDialog((Frame) SwingUtilities.getWindowAncestor(this), true, true);
        apd.setLocationRelativeTo(this);
        apd.setVisible(true);
    }//GEN-LAST:event_btnCreateNewProfileActionPerformed

    private void btnDeleteProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDeleteProfileActionPerformed
        ArrayList<Profile> profiles = new ArrayList<>(this.profilesTbl.getSelectedRowCount());
        for (int row : this.profilesTbl.getSelectedRows()) {
            profiles.add(ProfileManager.getDefault().getAllProfiles().get(row));
        }
        for (Profile deletedProfile : profiles) {
            int result = JOptionPane.showOptionDialog(this,
                    Bundle.getMessage("ProfilePreferencesPanel.btnDeleteProfile.dlgMessage", deletedProfile.getName()), // NOI18N
                    Bundle.getMessage("ProfilePreferencesPanel.btnDeleteProfile.dlgTitle", deletedProfile.getName()), // NOI18N
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, // use default icon
                    new String[]{
                        Bundle.getMessage("ProfilePreferencesPanel.btnDeleteProfile.text"), // NOI18N
                        Bundle.getMessage("AddProfileDialog.btnCancel.text") // NOI18N
                    },
                    JOptionPane.CANCEL_OPTION
            );
            if (result == JOptionPane.OK_OPTION) {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                if (!FileUtil.delete(deletedProfile.getPath())) {
                    log.warn("Unable to delete profile directory {}", deletedProfile.getPath());
                    this.setCursor(Cursor.getDefaultCursor());
                    JOptionPane.showMessageDialog(this,
                            Bundle.getMessage("ProfilePreferencesPanel.btnDeleteProfile.errorMessage", deletedProfile.getPath()),
                            Bundle.getMessage("ProfilePreferencesPanel.btnDeleteProfile.errorMessage"),
                            JOptionPane.ERROR_MESSAGE);
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                }
                ProfileManager.getDefault().removeProfile(deletedProfile);
                log.info("Removed profile \"{}\" from {}", deletedProfile.getName(), deletedProfile.getPath());
                this.setCursor(Cursor.getDefaultCursor());
                profilesTbl.repaint();
            }
        }
    }//GEN-LAST:event_btnDeleteProfileActionPerformed

    private void btnOpenExistingProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnOpenExistingProfileActionPerformed
        JFileChooser chooser = new JFileChooser(FileUtil.getHomePath());
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setFileFilter(new ProfileFileFilter());
        chooser.setFileView(new ProfileFileView());
        // TODO: Use NetBeans OpenDialog if its availble
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                Profile p = new Profile(chooser.getSelectedFile());
                ProfileManager.getDefault().addProfile(p);
                int index = ProfileManager.getDefault().getAllProfiles().indexOf(p);
                profilesTbl.setRowSelectionInterval(index, index);
            } catch (IOException ex) {
                log.warn("{} is not a profile directory", chooser.getSelectedFile());
                JOptionPane.showMessageDialog(this,
                        Bundle.getMessage("ProfilePreferencesPanel.btnOpenExistingProfile.errorMessage", chooser.getSelectedFile().getPath()),
                        Bundle.getMessage("ProfilePreferencesPanel.btnOpenExistingProfile.errorMessage"),
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnOpenExistingProfileActionPerformed

    private void btnCopyProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCopyProfileActionPerformed
        AddProfileDialog apd = new AddProfileDialog((Frame) SwingUtilities.getWindowAncestor(this), true, true);
        apd.setSourceProfile(ProfileManager.getDefault().getAllProfiles().get(profilesTbl.getSelectedRow()));
        apd.setLocationRelativeTo(this);
        apd.setVisible(true);
    }//GEN-LAST:event_btnCopyProfileActionPerformed

    private void spinnerTimeoutStateChanged(ChangeEvent evt) {//GEN-FIRST:event_spinnerTimeoutStateChanged
        ProfileManager.getDefault().setAutoStartActiveProfileTimeout((Integer) this.spinnerTimeout.getValue());
        try {
            ProfileManager.getDefault().saveActiveProfile();
        } catch (IOException ex) {
            log.error("Unable to save active profile.", ex);
        }
    }//GEN-LAST:event_spinnerTimeoutStateChanged

    private void rdoStartWithActiveProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_rdoStartWithActiveProfileActionPerformed
        this.setAutoStartActiveProfile(true);
        this.spinnerTimeout.setEnabled(false);
    }//GEN-LAST:event_rdoStartWithActiveProfileActionPerformed

    private void rdoStartWithProfileSelectorActionPerformed(ActionEvent evt) {//GEN-FIRST:event_rdoStartWithProfileSelectorActionPerformed
        this.setAutoStartActiveProfile(false);
        this.spinnerTimeout.setEnabled(true);
    }//GEN-LAST:event_rdoStartWithProfileSelectorActionPerformed

    private void setAutoStartActiveProfile(boolean automatic) {
        ProfileManager.getDefault().setAutoStartActiveProfile(automatic);
        try {
            ProfileManager.getDefault().saveActiveProfile();
        } catch (IOException ex) {
            log.error("Unable to save active profile.", ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnActivateProfile;
    private JButton btnAddSearchPath;
    private JButton btnCopyProfile;
    private JButton btnCreateNewProfile;
    private JButton btnDeleteProfile;
    private JButton btnExportProfile;
    private JButton btnOpenExistingProfile;
    private JButton btnRemoveSearchPath;
    private JMenuItem copyMI;
    private JMenuItem deleteMI;
    private JPanel enabledPanel;
    private ButtonGroup grpStartWithSelectors;
    private JLabel jLabel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane3;
    private JPopupMenu.Separator jSeparator1;
    private JTabbedPane jTabbedPane1;
    private JPopupMenu profilesPopupMenu;
    private JTable profilesTbl;
    private JRadioButton rdoStartWithActiveProfile;
    private JRadioButton rdoStartWithProfileSelector;
    private JMenuItem renameMI;
    private JPanel searchPathsPanel;
    private JTable searchPathsTbl;
    private JSpinner spinnerTimeout;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getPreferencesItem() {
        return "Profiles"; // NOI18N
    }

    @Override
    public String getPreferencesItemText() {
        return Bundle.getMessage("ProfilePreferencesPanel.enabledPanel.TabConstraints.tabTitle");
    }

    @Override
    public String getTabbedPreferencesTitle() {
        return null;
    }

    @Override
    public String getLabelKey() {
        return null;
    }

    @Override
    public JComponent getPreferencesComponent() {
        return this;
    }

    @Override
    public boolean isPersistant() {
        return false;
    }

    @Override
    public String getPreferencesTooltip() {
        return null;
    }

    @Override
    public void savePreferences() {
        // Nothing to do since ProfileManager preferences are saved immediately
    }

    @Override
    public int getSortOrder() {
        return 1000;
    }

    public void dispose() {
        ProfileManager.getDefault().removePropertyChangeListener((PropertyChangeListener) profilesTbl.getModel());
    }

    private void profilesTblValueChanged(ListSelectionEvent e) {
        if (profilesTbl.getSelectedRowCount() == 1 && profilesTbl.getSelectedRow() < ProfileManager.getDefault().getAllProfiles().size()) {
            Profile p = ProfileManager.getDefault().getAllProfiles().get(profilesTbl.getSelectedRow());
            this.btnDeleteProfile.setEnabled(!p.equals(ProfileManager.getDefault().getActiveProfile()));
            if (ProfileManager.getDefault().getNextActiveProfile() != null) {
                this.btnActivateProfile.setEnabled(!p.equals(ProfileManager.getDefault().getNextActiveProfile()));
            } else {
                this.btnActivateProfile.setEnabled(!p.equals(ProfileManager.getDefault().getActiveProfile()));
            }
            this.btnCopyProfile.setEnabled(true);
            this.btnExportProfile.setEnabled(true);
        } else if (this.profilesTbl.getSelectedRowCount() > 1) {
            this.btnDeleteProfile.setEnabled(true);
            for (int row : this.profilesTbl.getSelectedRows()) {
                Profile p = ProfileManager.getDefault().getAllProfiles().get(row);
                if (p.equals(ProfileManager.getDefault().getActiveProfile())) {
                    this.btnDeleteProfile.setEnabled(false);
                    break;
                }
            }
            this.btnCopyProfile.setEnabled(false);
            this.btnExportProfile.setEnabled(false);
            this.btnActivateProfile.setEnabled(false);
        } else {
            this.btnDeleteProfile.setEnabled(false);
            this.btnCopyProfile.setEnabled(false);
            this.btnExportProfile.setEnabled(false);
            this.btnActivateProfile.setEnabled(false);
        }
    }

    private void searchPathsTblValueChanged(ListSelectionEvent e) {
        if (this.searchPathsTbl.getSelectedRowCount() == 1 && this.searchPathsTbl.getSelectedRow() < ProfileManager.getDefault().getAllSearchPaths().size()) {
            File sp = ProfileManager.getDefault().getSearchPaths(this.searchPathsTbl.getSelectedRow());
            if (sp == null || sp.equals(new File(FileUtil.getPreferencesPath()))) {
                this.btnRemoveSearchPath.setEnabled(false);
            } else {
                this.btnRemoveSearchPath.setEnabled(true);
            }
        } else if (this.searchPathsTbl.getSelectedRowCount() > 1) {
            this.btnRemoveSearchPath.setEnabled(true);
        } else {
            this.btnRemoveSearchPath.setEnabled(false);
        }
    }

    @Override
    public boolean isDirty() {
        return false; // ProfileManager preferences are saved immediately, so this is always false
    }

    /**
     * {@inheritDoc}
     * @return if the next profile to use has changed; false otherwise
     */
    @Override
    public boolean isRestartRequired() {
        // Since next profile defaults to null when application starts, restart
        // is required only if next profile is not null and is not the same
        // profile as the current profile
        Profile ap = ProfileManager.getDefault().getActiveProfile();
        Profile np = ProfileManager.getDefault().getNextActiveProfile();
        return np != null && ap != null && !ap.equals(np);
    }

    @Override
    public boolean isPreferencesValid() {
        return true; // no validity checking performed
    }

    /* Comment out until I get around to utilizing this, so Jenkins does not throw warnings.
     private static class ZipFileFilter extends FileFilter {

     public ZipFileFilter() {
     }

     @Override
     public boolean accept(File f) {
     if (!f.isDirectory()) {
     int i = f.getName().lastIndexOf('.');
     if (i > 0 && i < f.getName().length() - 1) {
     return f.getName().substring(i + 1).toLowerCase().equalsIgnoreCase("zip"); // NOI18N
     }
     return false;
     }
     return true;
     }

     @Override
     public String getDescription() {
     return "Zip archives (.zip)";
     }
     }
     */
    private class SearchPathSelectionListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            ProfilePreferencesPanel.this.searchPathsTblValueChanged(e);
        }
    }

    private class ProfilesSelectionListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            ProfilePreferencesPanel.this.profilesTblValueChanged(e);
        }
    }
}
