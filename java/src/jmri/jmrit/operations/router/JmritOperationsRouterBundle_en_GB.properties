# JmritOperationsRouterBundle_en_GB.properties
#
# Default properties for the jmri.jmrit.operations.router

#RouterCanNotDeliverCar  = Can''t use {4} ({1}, {2}) for ({0}) due to {3}
RouterNoTracks          = Could not find a track at ({0}) able to service wagon ({1})
RouterTrainCanNotDueTo  = Train ({0}) can''t transport wagon ({1}) to ({2}, {3}) due to {4}
RouterIgnoreAlternate   = Wagon ({0}) is at final destination ({1}) alternate track and yard options are ignored
#RouterSpurFull          = Track ({0}) full, searching for a yard at destination ({1})
TrainDoesNotServiceCar  = Train ({0}) can''t transport wagon ({1}) directly to ({2}, {3})
RouterSendCarToAlternative  = Delivering wagon ({0}) to alternate track ({1}) at destination ({2})
RouterNotSendCarToAlternative = Train ({0}) can not deliver wagon ({1}) to alternate track ({2}) at destination ({3})
#RouterAlternateFailed   = Alternate track ({0}) isn''t available due to {1}
RouterAtAlternate       = Hold wagon ({0}) at alternate track ({1}) final destination ({2}, {3})
RouterSendCarToYard     = Sending wagon ({0}) to yard ({1}) at destination ({2})
#RouterCanNotUseYard     = Can''t use yard ({0}) due to {1}
RouterNoYardTracks      = Could not find a yard at ({0}) for wagon ({1})

RouterCouldNotFind      = Could not find an interim C/I or yard track that can service wagon to destination ({0})
RouterCouldNotFindStaging = Could not find an interim C/I, yard, or fiddle yard that can service wagon to destination ({0})
RouterCouldNotFindLoc   = Could not find an interim C/I or yard track that can service wagon from location ({0})
RouterCouldNotFindTrain = Could not find a train (single local move) to transport wagon directly from ({0}, {1}) to ({2}, {3})
RouterOptionToCarry     = Option to service all wagons with a final destination enabled for train ({0}), ignoring train ({1}) ability to service wagon ({2}) to ({3}, {4})
RouterNotAble           = not able to route wagon
#RouterDisabled          = router is disabled

#RouterTrain             = Train ({0})
#RouterDestination       = destination
RouterTrainCanNotStaging = Train ({0}) can''t transport wagon ({1}) out of fiddle yard ({2}) directly to ({3}, {4})
RouterAttemptStaging    = Try to find a route for wagon ({0}) through fiddle yard
#RouterNTrains        = Routing using {0} trains destination ({1}, {2}) begins

RouterRouteForCar        = Route for wagon ({0}): ({1}, {2})
#RouterRouteTrain         = ->({0})
#RouterRouteTrack         = ->({0}, {1})

# Detail level messages
RouterFindTrack         = Router find {0} track for wagon ({1}) final destination ({2}, {3})
RouterFoundTrack        = Router found {0} track ({1}, {2}) for wagon ({3})
RouterNotFindTrain      = Router could not find a train to transport wagon from {0} ({1}, {2}) to ({3}, {4})
RouterTrainCanTransport = Train ({0}) can transport wagon ({1}) from {2} ({3}, {4}) to ({5}, {6})
RouterTrainCanNot       = Train ({0}) can''t transport wagon ({1}) from ({2}, {3}) to ({4}, {5})
RouterBeginTwoTrain     = Router could not find a train able to transport wagon ({0}) directly from ({1}) to ({2}) begin two train routing
RouterTrainCanService   = Train ({0}) can service wagon ({1}) from ({2}, {3}) to {4} ({5}, {6})
RouterTrainIntoStaging	= Train ({0}) terminates into fiddle yard using track ({1}, {2})

# is wagon routeable
RouterIsCarRoutable		= Check route for wagon ({0}) at ({1}, {2}) load ({3}) final destination ({4}, {5})

