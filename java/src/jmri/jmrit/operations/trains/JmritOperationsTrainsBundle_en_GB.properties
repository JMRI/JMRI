# JmritOperationsTrainsBundle_en_GB.properties
#
# British english properties for the jmri.jmrit.operations.trains

TitleModifyTrains   = Modify Trains by Wagon Type
MenuItemShowCarTypes = Show Wagon Types Serviced

#CarMoves            = Train will work {0} wagons
TypesCar            = Select wagon types serviced by this train
TypesEngine         = Select engine types serviced by this train

TrainRequires       = Optional engine requirements

CarRoadsTrain       = Select wagon railways serviced by this train
LocoRoadsTrain      = Select locomotive railways serviced by this train
Caboose             = Brake van
AddRoad             = Add Railway
DeleteRoad          = Delete Railway
RoadCar				= Road Wagon

EngineChange        = Engine change
ChangeCaboose       = Break van change
KeepCaboose         = Keep break van
AddHelpers          = Add helper engines

# Train build options
RoutingViaYardsEnabled  = Wagon routing via yards is enabled
RoutingViaStagingEnabled  = Wagon routing through fiddle yard is enabled
SendToTerminal          = Send all wagon pick ups to terminal ({0})
AllowCarsToReturn       = Allow wagons to return to fiddle yard
AllowLocalMoves         = Allow local moves if wagon has a custom load or FD
AllowThroughCars        = Allow wagons to travel from origin to terminal
ServiceAllCars          = Service all wagons with a final destination (FD)
SendCustomToStaging     = Send wagons with custom loads to fiddle yard
BuildConsist            = Build engine consist from single engines
BuildConsistHPT         = {0} HPT (Horsepower per Ton) when adding engines to train

# messages
AutoEngines         = Auto will estimate the number of engines needed for this train

# tool tips
SaveBuildsTip       = Save Train, Wagon, Engine and Location Files
RoadEngineTip       = Optionally select engine railway name
RoadCabooseTip      = Optionally select railway name for brake van or FRED
TipTrainCarType     = Select this train if it services wagon type {0}
TipCopyCarType      = Use the "Copy Type" menu to select the wagon type you want to copy, then select Copy, then Save
TipReturnToStaging  = Option to allow all trains to return wagons to fiddle yard is enabled
TipFRED             = Last wagon on the train must have a Flashing Rear End Device (FRED)
TipCaboose          = Last wagon on the train must be a break van



ModelEngineTip      = Optionally select engine model
TipNumberOfLocos    = Select the number of engines for this train
TipNoCabooseOrFRED  = Train does not require break van or wagon with FRED

# manifest messages
TrainDepartsCars    = Train departs {0} {1}bound with {2} wagons, {3} {4}, {5} tons

# tool tip
ToolTipTrainDepartsCars = 0 = Location name. 1 = Train direction. 2 = wagons, 3 = Train length. 4 = feet or meters. 5 = Train weight. 6 = Terminal name. 7 = Train name.

# error messages
TrainModelService   = Train does not service engine model ({0}) type ({1})
NoLocosModel        = No model ({0}) in your engine roster! 
NoLocoRoad          = No railway ({0}) in your engine roster that also meets the engine types serviced by this train.

LocoChangeAt        = Engine change at {0}
CabooseChangeAt     = Break van change at {0}
LocoAndCabooseChangeAt = Engine and break van change at {0}

SendFunctionCommands = Send function commands to lead engine?

# EditManifestTextFrame

# build messages
TrainDepartingStaging = Train ({0}) Departing from Fiddle Yard ({1})
TrainTerminatingStaging = Train ({0}) Terminating into Fiddle Yard ({1})

# build failure messages
buildErrorCars      = Not enough wagons ({0}) at departure ({1}) to build train ({2})
buildErrorNumReq    = The number of requested wagons ({0}) for train ({1}) is greater than the number available ({2})
buildErrorNotAllCars    = ERROR not all wagons on fiddle yard ({0}) can be serviced by this train, {1} wagons cannot be serviced
buildErrorCarNotPartRoute = Wagon ({0}) departing fiddle yard with destination that is not part of this train''s route
buildErrorCarStageDest = BUILD FAILED wagon ({0}) departing fiddle yard without a destination
buildErrorCarStageLoad = BUILD FAILED wagon ({0}) departing fiddle yard with a load ({1}) that is restricted by track ({2})
buildErrorCarKernelLocation = Wagpn ({0}) in kernel ({1}) location ({2}, {3}) doesn''t match wagon ({4}) location ({5}, {6})
buildErrorCarKernelNoLead   = No lead wagon in kernel ({0})
buildErrorLocationUnknown   = Fiddle yard ({0}, {1}) has a wagon ({2}) with an unknown location
buildErrorLocationOutOfService  = Fiddle yard ({0}, {1}) has a wagon ({2}) that is out of service
buildStagingCouldNotFindDest  = BUILD FAILED could not find destinations for {0} wagon(s) departing from fiddle yard ({1}, {2})
buildCarsResetTrain     = {0} wagons have been assigned to train ({1}), do you want to release the wagons assigned to this train?

# Dialogue build failed button
buttonRemoveCars    = Remove Wagons

# build messages level 1

buildLocStaging     = Location ({0}) is a fiddle yard
buildRouteRequest   = Route ({0}) requests {1} wagons and {2} moves
buildTerminateStaging = Train terminates into fiddle yard at ({0}), there are {1} tracks
buildStagingAvail   = Fiddle yard ({0}) is available at destination ({1})
buildDepartStaging  = Train will depart fiddle yard ({0}), there are {1} tracks
buildStagingReturn  = Train will return to fiddle yard ({0}) reuse departure track
buildStagingHas     = Fiddle yard ({0}) has {1} engine(s) and {2} wagons

buildTrainReqFred   = Train ({0}) requires wagon with FRED, railway ({1}) departing ({2}) destination ({3})
buildTrainReqCaboose = Train ({0}) requires break van, railway ({1}) departing ({2}) destination ({3})
buildFoundCars      = Found {0} wagons for train ({1})

buildStatusMsg      = {0} {1}/{2} wagons at location ({3}) assigned to train ({4})

buildTrainReq0Engine = Train does not require any engines
buildTrainReq1Engine = Train departs ({0}) with a single engine, model ({1}) railway ({2})
buildTrainReqEngine = Train departs ({0}) with {1} consisted engines, model ({2}) railway ({3})

buildEngineAssigned = Engine ({0}) assigned to train, departs ({1}) destination ({2}, {3})

buildAutoBuildMsg   = Auto calculates that {0} engines are required for this train
buildStagingDepart  = Fiddle yard ({0}) is already assigned to train ({1})
buildStagingDepartCarType   = Fiddle yard ({0}) has a wagon ({1}) type ({2}) that is not serviced by train ({3})
buildStagingDepartCarRoad   = Fiddle yard ({0}) has a wagon ({1}) railway ({2}) that is not serviced by train ({3})
buildStagingDepartCarLoad = Fiddle yard ({0}) has a wagon ({1}) load ({2}) that is not serviced by train ({3})
buildStagingDepartCarOwner  = Fiddle yard ({0}) has a wagon ({1}) owner ({2}) that is not serviced by train ({3})
buildStagingDepartCarBuilt  = Fiddle yard ({0}) has a wagon ({1}) built ({2}) that is not serviced by train ({3})
buildStagingDepartCarDestination = Fiddle yard ({0}) has a wagon ({1}) destination ({2}) that cannot be serviced by train ({3})
buildStagingDepartCarTrain = Fiddle yard ({0}) has a wagon ({1}) that is assigned to another train ({2})
buildStagingDepartEngineType = Fiddle yard ({0}) has a engine ({1}) type ({2}) that is not serviced by train ({3})
buildStagingDepartEngineRoad = Fiddle yard ({0}) has a engine ({1}) railway ({2}) that is not serviced by train ({3})
buildStagingDepartEngineOwner = Fiddle yard ({0}) has a engine ({1}) owner ({2}) that is not serviced by train ({3})
buildStagingDepartEngineBuilt = Fiddle yard ({0}) has a engine ({1}) built ({2}) that is not serviced by train ({3})
buildStagingDepartEngineModel = Fiddle yard ({0}) has a engine ({1}) model ({2}) that doesn''t meet train ({3}) requirements
buildStagingDepartEngineTrain = Fiddle yard ({0}) has a engine ({1}) that is assigned to another train ({2})
buildTrainEngineChange  = Engine change at ({0}), departs with {1} engine(s), model ({2}) railway ({3})

buildSendToTerminal         = Sending all wagon pick ups to terminal ({0})
buildStagingCarHasFinal = Wagon ({0}) has a final destination of fiddle yard ({1}, {2}), restoring wagon''s final destination and load
buildTrainRequiresCaboose = Train must depart ({0}) with break van, railway ({1})
buildTrainRequiresFRED = Train must depart ({0}) with a wagon that has a FRED, railway ({1})
buildCabooseChange = Break van change at ({0})
buildDetermineNeeds = Determine if train requires additional engines based on {0} HP per ton and the route grades

buildCarsNotRoutable = WARNING! The program wasn't able to route the following wagons:
buildCarNotRoutable = Wagon ({0}) at ({1}, {2}) final destination ({3}, {4})
buildNoPickupsFromStaging = No pick ups from fiddle yard ({0})
buildDetermineHpNeeded = Determine if assigned engine ({0}) departing ({1}) terminating ({2}) has the appropriate HP ({3}) based on {4} HP per ton and the route grades
buildAssignedHpNotEnough = Assigned engine ({0}) with ({1}) HP doesn''t meet train requirements {2} HP, removing engine from train
buildAssignedHpTooMuch = Assigned engine ({0}) with ({1}) HP exceeds train requirements {2} HP, removing engine from train
buildWarningCarStageDest = Warning wagon ({0}) departing fiddle yard without a destination


# build messages level 3


buildStagingDeparts         = {0} Fiddle yard ({1}) {2}bound request {3} pick ups, maximum train length {4} {5}
buildStagingTerminates      = {0} Fiddle yard ({1}) {2}bound requests {3} set outs
buildStagingNotDirection    = Fiddle yard ({0}) does not service this train''s direction
buildStagingNotTrain        = Fiddle yard ({0}) does not service this train
buildTrain                  = Requested wagons ({0}) for train ({1}) the number available ({2}) building train!
buildStagingNotEngines      = Fiddle yard ({0}) has {1} engines, it does not have the required number of engines ({2})
buildStagingNoCaboose       = Fiddle yard ({0}) does not have a break van with the correct railway ({1})
buildStagingNoCarFRED       = Fiddle yard ({0}) does not have a wagon with FRED railway ({1})
buildExcludeEngineType      = Exclude loco ({0}) at ({1}, {2}) type ({3}) is not serviced by this train
buildExcludeEngineModel     = Skip engine ({0}) model ({1}) location ({2})
buildExcludeEngineRoad      = Exclude engine ({0}) at ({1}, {2}) railway ({3}) is not serviced by this train
buildExcludeEngineOwner     = Exclude loco ({0}) at ({1}, {2}) owner ({3}) is not serviced by this train
buildExcludeEngineBuilt     = Exclude loco ({0}) at ({1}, {2}) built ({3}) is not serviced by this train
buildExcludeEngineDestination = Exclude engine ({0}) it has an assigned destination ({1})
buildExcludeEngineSingle    = Skip single engine ({0}) train requires {1} engines
buildExcludeEngineBunit     = Train requires 1 engine, skip using B unit ({0}) model ({1})

#buildEnginePartConsist      = Loco ({0}) is in consist ({1}) and has {2} engines
buildEngineLeadConsist      = Loco ({0}) is lead engine for consist ({1}) and has {2} engines
buildExcludeEngConsistNumber = Exclude engine ({0}) consist ({1}) wrong number of engines ({2})
buildMaximumNumberEngines   = The maximum number of engines that can be assigned is {0}

buildExcludeCarWrongRoad    = Exclude wagon ({0}) at ({1}, {2}) type ({3}) wrong railway ({4})
buildExcludeCarWrongType    = Exclude wagon ({0}) at ({1}, {2}) train doesn''t service type ({3})
buildExcludeCarTypeAtLoc    = Exclude wagon ({0}) type ({1}) {2} at location ({3}, {4})
buildExcludeCarAtLoc        = Exclude wagon ({0}) type ({1}) from fiddle yard ({2}, {3})
buildExcludeCarWrongDest    = Exclude wagon ({0}) type ({1}) {2} wrong destination ({3})
buildExcludeCarDropByTrain  = Exclude wagon ({0}) type ({1}) previously dropped by this train''s route ({2}) at classification/interchange ({3}, {4})
buildExcludeCarByTrain      = Exclude wagon ({0}) type ({1}) by train, cannot pick up this wagon from {2} ({3}, {4})
buildExcludeCarByRoute      = Exclude wagon ({0}) type ({1}) by route, cannot pick up this wagon from {2} ({3}, {4})

buildStagingCarAtLoc        = Wagon ({0}) at fiddle yard, type ({1}) {2} ({3})
buildCarAlreadyAssigned     = Wagon ({0}) already assigned to this train
buildExcludeCarDestNotPartRoute = Exclude wagon ({0}) destination ({1}. {2}) not part of this train''s route ({3})



buildCarDoesNotHaveDest     = Wagon ({0}) does not have a valid destination track
buildCarAssignedToStaging   = Wagon ({0}) assigned to fiddle yard ({1})
buildCanNotDropCar          = Wagon ({0}) can''t be delivered to ({1}) route id ({2})
buildCarCanDropMoves        = Wagon ({0}) can drop to {1} ({2}, {3}) with {4}/{5} moves
buildCarAssignedDest        = Wagon ({0}) assigned to train, destination ({1}, {2})
buildCarKernelAssignedDest  = Wagon ({0}) kernel ({1}) assigned to train, destination ({2}, {3})

buildExcludeCarLocUnknown   = Exclude wagon ({0}) location unknown, last known location ({1}, {2})
buildExcludeCarOutOfService = Exclude wagon ({0}) out of service, wagon''s location ({1}, {2})
buildExcludeEngineOutOfService = Exclude engine ({0}) out of service, engine''s location ({1}, {2})
buildExcludeCarWait         = Exclude wagon ({0}) type ({1}) at ({2}, {3}) wait ({4})
buildExcludeCarSchedule     = Exclude wagon ({0}) type ({1}) at location ({2}, {3}) scheduled pickup on ({4})
buildCarHasSecond           = Wagon ({0}) can be picked up later from location ({1})
buildCarDestinationStaging  = Wagon ({0}) has fiddle yard destination ({1}, {2}) wrong track
buildDepartStagingAggressive = Departing the fiddle yard in aggressive mode, find destinations from ({0}) in next pass


buildWarnDepartStaging		= Warning! Option to allow wagons to return to fiddle yard enabled, program must assume that all wagons in the fiddle yard ({0}) can return to the same departure track ({1}).

# build messages level 5

buildCarLeadKernel          = Wagon ({0}) is lead in kernel ({1}) with {2} wagons, {3} {4}
buildCarPartOfKernel        = Wagon ({0}) is in kernel ({1}) with {2} wagons, {3} {4}

buildCarAtLocWithMoves      = Wagon ({0}) type ({1}){2} at ({3}, {4}) {5} moves
buildCarAtLocWithMovesPriority = Wagon ({0}) type ({1}){2} at ({3}, {4}) {5} moves, {6} ({7}) priority {8}
buildCarIsCaboose           = Wagon ({0}) is a break van, railway ({1}) at ({2}, {3})
buildCarHasFRED             = Wagon ({0}) has a FRED, railway ({1})
buildCouldNotFindDestForCar = Could not find a valid destination for wagon ({0}) at location ({1})
buildNoDestForCar           = Did not assign a destination for wagon ({0})
buildEngineRoadModelType    = Engine ({0}) railway ({1}) model ({2}) type ({3}) at location ({4}, {5}) destination ({6})
buildTrainServicesEngineTypes = Train ({0}) services engine types:
buildTrainServicesCarTypes  = Train ({0}) services wagon types:

buildCanNotDropEngineToTrack = Can''t send engine ({0}) to {3} ({1}) due to {2}
buildExcludeCarLoadAtLoc    = Exclude wagon ({0}) type ({1}) wrong load ({2})
buildExcludeCarOwnerAtLoc   = Exclude wagon ({0}) owner ({1}) at location ({2}, {3})
buildExcludeCarBuiltAtLoc   = Exclude wagon ({0}) built ({1}) at location ({2}, {3})

buildExcludeCarWithFredAtLoc = Exclude wagon with FRED ({0}) type ({1}) at location ({2})
buildCarRoutingBegins       = Wagon ({0}) type ({1}) {2} ({3}) at {4} ({5}, {6}) has final destination ({7}, {8}) routing begins


buildStagingTrackOccupied   = Fiddle yard ({0}) is occupied, found {1} engine(s) and {2} wagons
buildStagingTrackReserved   = Fiddle yard ({0}) is reserved, set out count: {1}
buildStagingTrackDepart     = Train on Fiddle yard ({0}) is scheduled to depart 
buildAddingScheduleLoad     = Found {0} custom loads, adding load ({1}) to wagon ({2})
buildSpurScheduleLoad       = Siding ({0}) has schedule requesting wagon load ({1})


buildOnlyFirstXXXCars       = ************* Only the first {0} wagons are shown *************



buildStagingTrackType       = Fiddle yard ({0}) does not accept type ({1})
buildStagingTrackAllRoads   = Fiddle yard ({0}) does not accept all railways
buildStagingTrackRoad       = Fiddle yard ({0}) does not accept railway ({1})
buildStagingTrackAllLoads   = Fiddle yard ({0}) does not accept all loads
buildStagingTrackLoad       = Fiddle yard ({0}) does not accept load ({1})








buildSetFinalDestDiv		= Try {0} ({1}, {2}) division ({3}) for wagon ({4}) with {5} ({6}) 
buildCreateNewLoadForCar    = Wagon ({0}) new load ({1}) final destination ({2}, {3})
buildCanNotDropEngToDest    = Can''t move engine ({0}) to destination ({1})
buildOptionRestrictStaging  = The option to restrict fiddle yard to the same wagon types, railways, and loads as the train being built is enabled
buildStagingTrackRestriction = Fiddle yard ({0}) cannot service train ({1})
buildRedirectFromAlternate  = Siding ({0}, {1}) now has room, redirecting wagon ({2}) from alternate ({3})


buildOnlyOneDepartureTrack  = Only one departure track ({0}) available out of fiddle yard ({1})
buildNoLocosFoundAtLocation = Requested engines not found at location ({0})
buildCarHasFinalDestNoMove  = Wagon ({0}) final destination ({1}) equal to wagon''s location ({2}), local move is not allowed for train ({3})

buildDepartingStagingCars   = Departing fiddle yard ({0}, {1}) with {2} wagons
buildTrySendCarToStaging    = Try to send wagon ({0}) custom load ({1}) to fiddle yard

buildCarNoLoadGenerated     = Wagon ({0}) departing fiddle yard with load ({1}) has destination ({2}) or final destination ({3}) no load generated for this wagon
buildOptionBuildConsist     = Option to build consist with {0} engines departing ({1}) is enabled
buildOptionSingleLocos      = There are {0} single engines at ({1}) that meet this train''s requirements




buildCustomLoadOptions      = Fiddle yard ({0}) has the following options selected:
buildLoadCarLoads           = Generate custom loads for sidings serviced by this train
buildLoadAnyCarLoads        = Generate custom loads for any siding (multiple trains)
buildLoadsStaging           = Generate custom loads for any fiddle yard
buildWarningCarNotRoutable = WARNING! Wagon ({0}) at ({1}, {2}) can''t be routed to ({3}, {4}) will attempt to move stuck wagon
BuildEngineBunit            = Engine ({0}) at ({1}, {2}) is a B unit
buildTryStagingToStaging    = Try to send wagon ({0}) to fiddle yard, found {1} tracks
buildLocoHasRequiredHp		= Engine ({0}) with ({1}) HP meets the minimum train requirement of {2} HP
buildNoCarsAtLocation		= No wagons available for pick up at location ({0})
buildStagingOptions			= Fiddle yard build options:
buildCarRoutingOptions		= Wagon routing options:


buildCarDepartHomeDivision   = Wagon ({0}) type ({1}) {2} ({3}) home division ({4}) departing home {5} ({6}, {7}) division ({8})
buildCarDepartForeignDivision = Wagon ({0}) type ({1}) {2} ({3}) home division ({4}) departing foreign {5} ({6}, {7}) division ({8})
buildCarHasDivisionStaging  = Wagon ({0}) type ({1}) {2} ({3}) home division ({4}) departing fiddle yard ({5}, {6}) division ({7})

# build messages level 7


buildNotAbleToSetDestination = Could not set destination for wagon ({0}) due to {1}
buildDoneAssignEnginesStaging = Done assigning engines from fiddle yard
buildDoneAssingEnginesTrain = Done assigning engines to train ({0})
buildBegineSearchEngines    = Search for {0} engine(s), model ({1}), railway ({2}), departing ({3}), destination ({4})

buildTrainNoCaboose         = Train does not require break van when departing ({0})
buildTrainNoFred            = Train does not require wagon with FRED
buildNoteCaboose            = NOTE! To make a wagon a break van you must select the break van check box in Edit Wagon
buildNoteCaboose2           = NOTE! The train has to also service the wagon type (Break van)
buildRemoveCars             = Remove wagons not serviced by this train:
buildRemoveCarsNotNeeded    = Remove wagons not needed by this train:
buildCanNotDropCarSameTrack = Can''t drop wagon ({0}) to same track ({1})

buildCarLocEqualDestination = Wagon ({0}) location is equal to destination ({1}), skipping this destination
buildReturnCarToStaging     = Returning wagon ({0}) to fiddle yard ({1}), no other tracks available

buildCanNotDropLocation     = Wagon ({0}) type ({1}) isn''t serviced by destination ({2})


buildScheduleNotActive      = Siding ({0}) schedule id {1} train schedule ({2}) not active for ({3})
buildScheduleRandom         = Siding ({0}, {1}) schedule ({2}) id {3} load ({4}) random value {5} is less than generated {6}, skipping this line item
buildNoDestTrackNewLoad     = {0} ({1}, {2}) can''t service wagon ({3}) with load ({4}) due to {5}
buildDestTrackNoLoad        = Fiddle yard ({0}, {1}) will not accept wagon ({2}) with load ({3})
buildCanNotRouteCar         = Can''t route wagon ({0}) with load ({1}) to ({2}, {3})
buildCarNoCustomLoad        = No custom loads available for wagon ({0}) type ({1})
buildUnableNewLoad          = Could not find a route to a siding that needs a custom load for wagon ({0})
buildUnableNewLoadStaging   = Could not generate a custom load for wagon ({0}) departing ({1}) to fiddle yard ({2}, {3})
buildNoDestTrackSpace       = Wagon ({0}) would overload track ({1}, {2}), currently {3} inbound wagons, length ({4}) {5}, {6}% loading from fiddle yard
buildNoDestSpace            = Wagon ({0}) would overload {1} ({2}, {3}), currently {4} inbound wagons, length ({5}) {6}
buildSearchForSpur          = Find siding for wagon ({0}) type ({1}) custom {2} ({3}) at {4} ({5}, {6})
buildCouldNotFindTrack       = Could not find a reachable {0} for wagon ({1}) {2} ({3})

buildSortCarsByLastDate		= Sort wagons on FIFO and LIFO tracks:
buildTrackModePriority   	= Wagon ({0}) on {1} ({2}, {3}) has service order {4} last moved {5}
buildTrackModeCarPriority   = {0} track ({1}) in mode {2}, wagon ({3}) last moved {4} has priority over wagon ({5}) last moved {6}
buildBypassCarServiceOrder  = Bypass wagon ({0}) on track ({1}) service order {2}
buildTrackFullHasAlternate  = Siding ({0}, {1}) full, has alternate track ({2})
buildUseAlternateTrack      = Sending wagon ({0}) to alternate track ({1})
buildSearchForTrack         = Found {0} tracks at destination ({1}) for wagon ({2}) load ({3})
buildStagingEmpty           = Fiddle yard ({0}) is empty
buildStagingTooManyCars     = Fiddle yard ({0}) has more wagons ({1}) than requested by train''s route ({2})
buildStagingTrainTooLong    = Train on fiddle yard ({0}) is {1} {2} long and exceeds the route''s maximum departure length {3} {2}
buildCarHasAssignedDest     = Wagon ({0}) load ({1}) has assigned destination ({2}, {3})
buildNoPickupLater          = Later pick up for wagon ({0}) from location ({1}) route id {2} not possible, no pick ups allowed
buildNoPickupLaterMoves     = Later pick up for wagon ({0}) from location ({1}) route id {2} not possible, no moves available
buildNoPickupLaterDirection = Later pick up for wagon ({0}) from location ({1}) route id {2} not possible due to train direction 
buildPickupLaterOkay        = Wagon ({0}) can be serviced from location ({1}) route id {2}

buildTrainCanDepartTrack    = Train ({0}) can depart from fiddle yard ({1})
buildTrainCanTerminateTrack = Train ({0}) can terminate to fiddle yard ({1})

buildWarnCarDepartStaging   = Warning wagon ({0}) load ({1}) not serviced by train!
buildCabooseRoadMatches     = Wagon ({0}) railway ({1}) matches engine ({2})
buildStagingTrackNotReachable = Fiddle yard ({0}, {1}) not reachable with custom load ({2})

buildMovesCompleted         = The following wagons were ignored, requested moves ({0}) for location ({1}) completed
buildCarIgnored             = Wagon ({0}) type ({1}) {2} ({3}) at ({4}, {5})
buildSpurFullNoAlternate    = Siding at ({0}, {1}) is full, no alternate track
buildStagingCanAcceptLoad   = Fiddle yard ({0}, {1}) can accept wagon''s load ({2})
buildNoStagingForCarLoad    = Couldn''t find fiddle yard that would accept wagon ({0}) and load ({1})
buildNoStagingForCarCustom	= Couldn''t find fiddle yard that would accept wagon ({0}) with a custom load


buildTrackSequentialMode    = Siding ({0}) at ({1}) is in sequential mode and {2}

buildContinueAddLocos       = Train requires {0} additional HP at ({1}) destination ({2}) {3} engines in consist, continue adding engines:
buildMaxNumberLocoAssigned  = The maximum number of engines allowed ({0}) have been assigned to this train
buildHoldCarValidRoute      = Hold wagon ({0}) at ({1}, {2}) found a route to a siding that has a schedule
buildTrackTooShort 			= Track ({0}, {1}) is too short for wagon ({2})

buildRemovingFinalDestinaton = Removing final destination ({0}, {1}) from wagon ({2})
buildHoldCarsCustom         = Track ({0}, {1}) has hold wagons with custom loads enabled

buildCarsAtLocation         = {0} wagons at location ({1}):
buildCarsInStaging          = {0} wagons available from fiddle yard ({1}):

buildReportTrainHpNeeds     = Train weight {0} tons, {1} wagons, grade {2}% departing ({3}) id {4} requires {5} HP

buildRemoveCarsStaging      = Remove wagons from the other fiddle yards:
buildSpurScheduleNotUsed    = Ignoring siding ({0}, {1}) schedule ({2}) schedule id {3} mode {4} requests type ({5}) railway ({6}) load ({7})
buildSpurNotThisType        = Siding ({0}, {1}) schedule ({2}) doesn''t service type ({3})
buildCarLoadChangedWait     = Wagon ({0}) type ({1}) wait expired, old load ({2}) new load ({3})
buildTrainCanServiceWait	= Train ({0}) can service wagon ({1}) decrementing wait count to ({2})
buildStagingLocationTrack	= Fiddle yard ({0}, {1})
buildIgnoreStagingFirstPass = Ignoring terminal fiddle yard at ({0}) until all others are tried
buildNoReturnStaging		= Option to allow wagon ({0}) to return to fiddle yard at ({1}) is disabled
buildNoDivisionTrack        = Ignoring {0} ({1}, {2}) wrong division ({3}) for wagon ({4}) {5} ({6})

trainExceedsMaximumLength   = Train ({0}) would exceed route ({1}) id {2} maximum train length ({3}) {4} by {7} {4} when departing ({5}) with wagon ({6})
trainCanNotDeliverToDestination = Train ({0}) can''t deliver wagon ({1}) to ({2}, {3})

# blocking messages
blockUnable                 = Unable to block wagons from fiddle yard only 1 block found
blockDepartureHasBlocks     = Departure fiddle yard track ({0}) has {1} blocks of wagons
blockFromHasCars            = Block ({0}) originally from ({1}) has {2} wagons
blockLocationHasMoves       = Location ({0}) has {1} possible moves
blockNotAbleDest            = Unable to block wagon ({0}), it has destination ({1})
blockNotAbleFinalDest       = Unable to block wagon ({0}), it has final destination ({1})
blockNotAbleCustomLoad      = Unable to block wagon ({0}), it has custom load ({1})
blockNotAbleCarType         = Unable to block wagon ({0}) destination ({1}) doesn''t accept type ({2})
blockingCar                 = Blocking wagon ({0}) originally from ({1}) to destination ({2})

NoCarPickUps                = No wagon pick ups for this train at this location
NoCarDrops                  = No wagon set outs for this train at this location
