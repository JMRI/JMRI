# JmritOperationsTrainsBundle_en_GB.properties
#
# British english properties for the jmri.jmrit.operations.trains

TitleModifyTrains   = Modify Trains by Wagon Type
MenuItemShowCarTypes = Show Wagon Types Serviced

#CarMoves            = Train will work {0} wagons
TypesCar            = Select wagon types serviced by this train
RoadsTrain          = Select railways serviced by this train
Caboose             = Brake van
AddRoad             = Add Railway
DeleteRoad          = Delete Railway

ChangeCaboose       = Break van change
KeepCaboose         = Keep break van

# Train build options
RoutingViaYardsEnabled  = Wagon routing via yards is enabled
RoutingViaStagingEnabled  = Wagon routing through staging is enabled
SendToTerminal          = Send all wagon pick ups to terminal ({0})
AllowCarsToReturn       = Allow wagons to return to staging
AllowLocalMoves         = Allow local moves if wagon has a custom load or FD
AllowThroughCars        = Allow wagons to travel from origin to terminal
ServiceAllCars          = Service all wagons with a final destination (FD)
SendCustomToStaging     = Send wagons with custom loads to staging

# tool tips
SaveBuildsTip       = Save Train, Wagon, Locomotive and Location Files
RoadEngineTip       = Optionally select locomotive railway name
RoadCabooseTip      = Optionally select railway name for brake van or FRED
TipTrainCarType     = Select this train if it services wagon type {0}
TipCopyCarType      = First select the wagon type you want to copy, then select Copy, then the wagon type you want to copy to, then Save
TipReturnToStaging  = Option to allow all trains to return wagons to staging is enabled
TipFRED             = Last wagon on the train must have a Flashing Rear End Device (FRED)
TipCaboose          = Last wagon on the train must be a break van

# manifest messages
TrainDepartsCars    = Train departs {0} {1}bound with {2} wagons, {3} {4}, {5} tons

# EditManifestTextFrame

# build failure messages
buildErrorCars      = Not enough wagons ({0}) at departure ({1}) to build train ({2})
buildErrorNumReq    = The number of requested wagons ({0}) for train ({1}) is greater than the number available ({2})
buildErrorNotAllCars    = ERROR not all wagons on staging track ({0}) can be serviced by this train, {1} wagons cannot be serviced
buildErrorCarNotPartRoute = Wagon ({0}) departing staging with destination that is not part of this train''s route
buildErrorCarStageDest = BUILD FAILED wagon ({0}) departing staging with a destination that cannot be serviced
buildErrorCarStageLoad = BUILD FAILED wagon ({0}) departing staging with a load ({1}) that is restricted by track ({2})
buildErrorCarKernelLocation = Wagon ({0}) in kernel ({1}) doesn''t match wagon ({2}) location
buildErrorCarKernelNoLead   = No lead wagon in kernel ({0})
buildErrorLocationUnknown   = Staging ({0}, {1}) has a wagon ({2}) with an unknown location
buildErrorLocationOutOfService  = Staging ({0}, {1}) has a wagon ({2}) that is out of service
buildStagingCouldNotFindDest  = BUILD FAILED could not find destinations for {0} wagon(s) departing from staging track ({1}, {2})
buildCarsResetTrain     = {0} wagons have been assigned to train ({1}), do you want to release the wagons by reset?

# Dialogue build failed button
buttonRemoveCars    = Remove Wagons

# build messages level 1
buildRouteRequest   = Route ({0}) requests {1} wagons and {2} moves
buildStagingHas     = Staging track ({0}) has {1} locomotive(s) and {2} wagons
buildFoundCars      = Found {0} wagons for train ({1})
buildWarningCarStageDest = Warning wagon ({0}) departing staging without a destination

buildTrainReqFred   = Train ({0}) requires wagon with FRED, railway ({1}) departing ({2}) destination ({3})
buildTrainReqCaboose = Train ({0}) requires break van, railway ({1}) departing ({2}) destination ({3})

buildStatusMsg      = {0} {1}/{2} wagons at location ({3}) assigned to train ({4})

buildStagingDepartCarType   = Staging track ({0}) has a wagon ({1}) type ({2}) that is not serviced by train ({3})
buildStagingDepartCarRoad   = Staging track ({0}) has a wagon ({1}) railway ({2}) that is not serviced by train ({3})
buildStagingDepartCarLoad = Staging track ({0}) has a wagon ({1}) load ({2}) that is not serviced by train ({3})
buildStagingDepartCarOwner  = Staging track ({0}) has a wagon ({1}) owner ({2}) that is not serviced by train ({3})
buildStagingDepartCarBuilt  = Staging track ({0}) has a wagon ({1}) built ({2}) that is not serviced by train ({3})
buildStagingDepartCarDestination = Staging track ({0}) has a wagon ({1}) destination ({2}) that cannot be serviced by train ({3})
buildStagingDepartCarTrain = Staging track ({0}) has a wagon ({1}) that is assigned to another train ({2})

buildSendToTerminal         = Sending all wagon pick ups to terminal ({0})
buildStagingCarHasFinal = Wagon ({0}) has a final destination of staging ({1}, {2}), restoring wagon''s final destination and load
buildTrainRequiresCaboose = Train must depart ({0}) with break van, railway ({1})
buildTrainRequiresFRED = Train must depart ({0}) with a wagon that has a FRED, railway ({1})
buildCabooseChange = Break van change at ({0})

buildCarsNotRoutable = WARNING! The program wasn't able to route the following wagons:
buildCarNotRoutable = Wagon ({0}) at ({1}, {2}) final destination ({3}, {4})

# build messages level 3
buildTrain                  = Requested wagons ({0}) for train ({1}) the number available ({2}) building train!
buildStagingNoCaboose       = Staging track ({0}) does not have a break van with the correct railway ({1})
buildStagingNoCarFRED       = Staging track ({0}) does not have a wagon with FRED railway ({1})

buildExcludeCarWrongRoad    = Exclude wagon ({0}) type ({1}) wrong railway ({2})
buildExcludeCarWrongType    = Exclude wagon ({0}) type ({1}) train doesn''t service type ({2})
buildExcludeCarTypeAtLoc    = Exclude wagon ({0}) type ({1}) at location ({2})
buildExcludeCarAtLoc        = Exclude wagon ({0}) from staging ({1})
buildExcludeCarWrongDest    = Exclude wagon ({0}) type ({1}) wrong destination ({2})
buildExcludeCarDropByTrain  = Exclude wagon ({0}) previously dropped by this train''s route ({1}) at classification/interchange ({2}, {3})
buildExcludeCarByTrain      = Exclude wagon ({0}) by train, cannot pick up this wagon from {1} ({2}, {3})
buildExcludeCarByRoute      = Exclude wagon ({0}) by route, cannot pick up this wagon from {1} ({2}, {3})
buildStagingCarAtLoc        = Staging wagon ({0}) at location ({1})
buildCarAlreadyAssigned     = Wagon ({0}) already assigned to this train
buildCarHasAssignedDest     = Wagon ({0}) has assigned destination ({1})
buildExcludeCarDestNotPartRoute = Exclude wagon ({0}) destination ({1}) not part of this train''s route ({2})
buildCarDoesNotHaveDest     = Wagon ({0}) does not have a valid destination track
buildCarAssignedToStaging   = Wagon ({0}) assigned to staging track ({1})
buildCanNotDropCar          = Wagon ({0}) can''t be delivered to ({1}) id ({2}) stop {3}
buildCarCanDropMoves        = Wagon ({0}) can drop to {1} ({2}, {3}) with {4}/{5} moves
buildCarAssignedDest        = Wagon ({0}) assigned to train, destination ({1}, {2})
buildCarKernelAssignedDest  = Wagon ({0}) kernel ({1}) assigned to train, destination ({2}, {3})

# build messages level 5
buildCarAtLocWithMoves      = Wagon ({0}) location ({1}) {2} moves
buildCarAtLocWithMovesPriority = Wagon ({0}) type ({1}) at ({2}) {3} moves, priority {4}
buildCarPartOfKernel        = Wagon ({0}) is part of kernel ({1}) with {2} wagons, {3} {4}
buildCarIsCaboose           = Wagon ({0}) is a break van, railway ({1}) at ({2}, {3})
buildCarHasFRED             = Wagon ({0}) has a FRED, railway ({1})
buildCouldNotFindDestForCar = Could not find a valid destination for wagon ({0}) at location ({1})
buildNoDestForCar           = Did not assign a destination for wagon ({0})
buildTrainServicesCarTypes  = Train ({0}) services wagon types:
#buildNoAvailableDestinations = No available destinations for any wagon
buildExcludeCarLoadAtLoc    = Exclude wagon ({0}) type ({1}) wrong load ({2})
buildExcludeCarOwnerAtLoc   = Exclude wagon ({0}) owner ({1}) at location ({2})
buildExcludeCarBuiltAtLoc   = Exclude wagon ({0}) built ({1}) at location ({2})
buildCarRoutingBegins       = Wagon ({0}) type ({1}) load ({2}) at ({3}, {4}) has final destination ({5}, {6}) routing begins
buildStagingTrackOccupied   = Staging track ({0}) is occupied, found {1} locomotive(s) and {2} wagons
buildAddingScheduleLoad     = Adding custom load ({0}) to wagon ({1})
buildOnlyFirstXXXCars       = ************* Only the first {0} wagons are shown *************

buildSetFinalDestination    = Try destination ({2}, {3}) for wagon ({0}) with load ({1}) 
buildCreateNewLoadForCar    = Wagon ({0}) new load ({1}) final destination ({2}, {3})
buildOptionRestrictStaging  = Option to restrict staging to the same wagon type, railway, and load as train is enabled
buildNoCarsAtLocation		= No wagons available for pick up at location ({0})

# build messages level 7
buildTrainNoCaboose         = Train does not require break van
buildTrainNoFred            = Train does not require wagon with FRED

buildNotAbleToSetDestination = Not able to set destination for wagon ({0}) due to {1}
TipNoCabooseOrFRED          = Train does not require break van or wagon with FRED
buildNoteCaboose            = NOTE! To make a wagon a break van you must select the break van check box in Edit Wagon
buildNoteCaboose2           = NOTE! The train has to also service the wagon type (Break van)
buildRemoveCars             = Remove wagons not serviced by this train:
buildRemoveCarsNotNeeded    = Remove wagons not needed by this train:
buildCanNotDropCarSameTrack = Can''t drop wagon ({0}) to same track ({1})
buildCarLocEqualDestination = Wagon ({0}) location is equal to destination ({1}), skipping this destination
#buildCanNotDropCarLoad      = Can''t set out wagon ({0}) load ({1}) to track ({2}) due to {3}
buildCanNotDropLocation     = Can''t set out wagon ({0}) type ({1}) to destination ({2})
buildReturnCarToStaging     = Returning wagon ({0}) to staging ({1}), no other tracks available

buildCarsAtLocation         = Wagons at location ({0}):
buildCarsInStaging          = Wagons available from staging ({0}):

# blocking messages
blockUnable                 = Unable to block wagons from staging only 1 block found
blockDepartureHasBlocks     = Departure staging track ({0}) has {1} blocks of wagons
blockFromHasCars            = Block ({0}) originally from ({1}) has {2} wagons
blockLocationHasMoves       = Location ({0}) has {1} possible moves
blockNotAbleDest            = Not able to block wagon ({0}), it has destination ({1})
blockNotAbleFinalDest       = Not able to block wagon ({0}), it has final destination ({1})
blockNotAbleCustomLoad      = Not able to block wagon ({0}), it has custom load ({1})
blockNotAbleCarType         = Not able to block wagon ({0}) destination ({1}) doesn''t accept type ({2})
blockingCar                 = Blocking wagon ({0}) originally from ({1}) to destination ({2})

NoCarPickUps                = No wagon pick ups for this train at this location
NoCarDrops                  = No wagon set outs for this train at this location
