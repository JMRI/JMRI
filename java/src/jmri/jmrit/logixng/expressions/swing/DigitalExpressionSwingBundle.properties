# jmri.jmrit.logixng.digital.expressions.swing.DigitalExpressionSwingBundle.properties
#
# Default properties for the jmri.jmrit.logixng.digital.expressions.swing.DigitalExpressionSwingBundle

FileButtonHint      = Click to select a file from disk

MenuText_ExecuteEvaluate                = Evaluate
ExecuteEvaluate_Title                   = The expression has been evaluated
ExecuteEvaluate_EvaluationCompleted     = The result of the expression is: {0}


AnalogExpressionConstant_Constant       = Constant
AnalogExpressionConstant_NotANumber     = The value "{0}" is not a number

AnalogFormula_Formula                   = Formula
AnalogFormula_InvalidFormula            = Formula is invalid:  "{0}"

AnalogExpressionLocalVariable_LocalVariable = Local variable

And_Info                                = <html>                    \
Evaluate All<br>                                                    \
All the connected sockets are evaluated.                            \
<p>&nbsp;<p>                                                        \
Evaluate Needed<br>                                                 \
Evaluation starts with the first socket and continues until<br>     \
all sockets are evaluated or the result is known.<br>               \
For the And expression, it means that the evaluation stops<br>      \
as soon as a connected socket evaluates to false.                   \
</html>

Antecedent_Antecedent                   = Antecedent
Antecedent_InvalidAntecedent            = Antecedent is invalid: "{0}"
Antecedent_Description                  = <html><table width=600>                               \
Important note about Antecedent.                                                                \
<p>&nbsp;<p>                                                                                    \
This expression is included for backward compability with Logix. For that reason, Antecedent    \
uses R1, R2, R3, and so on, in its expression. R1 is the first child expression. R2 is the      \
second child expression. R3 is the third child expression. And so on. The children may have     \
whatever name you want.                                                                         \
<p>&nbsp;<p>                                                                                    \
R stands for Row, which makes sense in Conditional but not so much here. But Antecedent is      \
included for backward compability.                                                              \
<p>&nbsp;<p>                                                                                    \
It's recommended to use Formula instead of Antecedent. Formula is much more powerful than       \
Antecedent. And Formula uses the name of the children in the formula, instead of R1, R2, ...    \
</table></html>

ExpressionAudio_Components              = Audio {0} {1} {2}

ExpressionConditional_Components        = Conditional {0} {1} {2}

DigitalFormula_Formula                  = Formula
DigitalFormula_InvalidFormula           = Formula is invalid: "{0}"

ExpressionBlock_Components              = Block {0} {1} {2} {3}

ExpressionClock_Components              = {0} time {1} between {2} and {3}

ExpressionConnection_Manufacturer       = System manufacturer
ExpressionConnection_Connection         = System connection

ExpressionDispatcher_Components         = Train {0} {1} {2}

ExpressionEntryExit_Components          = Entry exit {0} {1} {2}

ExpressionLight_Components              = Light {0} {1} {2}

ExpressionLinuxLinePower_Components     = Linux Line Power {0} connected
ExpressionLinuxLinePower_NoPowerSuppliesFound   =                           \
<html>                                                                      \
<b>Warning</b><br>                                                          \
No power supplies are found.<br>                                            \
The Linux command line tool <i>upower</> needs<br>                          \
to be installed for this expression to work.                                \
</html>
ExpressionLinuxLinePower_Error          =                                   \
<html>                                                                      \
<b>Warning</b><br>                                                          \
This expression failed to try to read if power is connected.<br>            \
The Linux command line tool <i>upower</> needs to be installed<br>          \
for this expression to work.                                                \
</html>

ExpressionLocalVariable_Components      = Local variable{0} {1} {2}
ExpressionLocalVariable_CompareType     = Type
ExpressionLocalVariable_CaseInsensitive = Case insensitive

ExpressionMemory_Components             = Memory {0} {1} {2}
ExpressionMemory_CompareType            = Type
ExpressionMemory_CaseInsensitive        = Case insensitive
ExpressionMemory_Table                  = Table {0}
ExpressionMemory_RowName                = Row {0}
ExpressionMemory_ColumnName             = Column {0}
ExpressionMemory_Select                 = Select
ExpressionMemory_SelectTable            = Select table name
ExpressionMemory_SelectRow              = Select row name
ExpressionMemory_SelectColumn           = Select column name

ExpressionOBlock_Components             = OBlock {0} {1} {2}

ExpressionPower_Components              = Power {0} {1}
ExpressionPower_IgnoreUnknownStateExplanation1  = When JMRI sets the power, most power managers in JMRI first sets
ExpressionPower_IgnoreUnknownStateExplanation2  = the power to Unknown and then sets the power to the desired state.
ExpressionPower_IgnoreUnknownStateExplanation3  = For example, if the current state is On, and the user sets the
ExpressionPower_IgnoreUnknownStateExplanation4  = power to On, the state is first changed to Unknown and then changed
ExpressionPower_IgnoreUnknownStateExplanation5  = back to On. That causes the LogixNG Power expression to think that
ExpressionPower_IgnoreUnknownStateExplanation6  = the power state has changed, when it in the reality hasn't.
ExpressionPower_IgnoreUnknownStateExplanation7  = If the "Ignore Unknown state" checkbox is selected, the
ExpressionPower_IgnoreUnknownStateExplanation8  = Unknown state will be ignored.

ExpressionReference_Components          = Reference {0} {1} {2}

ExpressionReporter_Components           = Reporter {0} {1} {2} {3}
ExpressionReporter_CaseInsensitive      = Case insensitive

ExpressionSection_Components            = Section {0} {1} {2}

ExpressionSensor_Components             = Sensor {0} {1} {2}

ExpressionSensorEdge_Components         = Sensor {0} goes from {1} to {2}
ExpressionSensorEdge_OnlyTrueOnce       = Only true on the first occurrence

ExpressionSignalHead_Components         = Signal head {0} {1} {2}
ExpressionSignalHead_Query              = Query
ExpressionSignalHead_Appearance         = Appearance
ExpressionSignalHead_ExampleBean        = Example signal head

ExpressionSignalMast_Components         = Signal mast {0} {1} {2}
ExpressionSignalMast_Query              = Query
ExpressionSignalMast_Aspect             = Aspect
ExpressionSignalMast_ExampleBean        = Example signal mast

ExpressionTransit_Components            = Transit {0} {1} {2}

ExpressionTurnout_Components            = Turnout {0} {1} {2}

ExpressionWarrant_Components            = Warrant {0} {1} {2}

ExpressionScript_Components             = Evaluate script {0} {1}
ExpressionScript_Operation              = Operation
ExpressionScript_Script                 = Script
ExpressionScript_RegisterListener       = Register listener
ExpressionScript_UnregisterListener     = Unregister listener
ExpressionScript_ScriptSelector         = Type of script

FileAsFlag_Components                   = File name: {0} When found: {1}

StringExpressionConstant_Constant       = Constant

StringFormula_Formula               = Formula
StringFormula_InvalidFormula        = Formula is invalid:  "{0}"

LogData_ResultType                  = Return
LogData_LogToLog                    = Log to the log
LogData_LogToScriptOutput           = Log to the Script Output
LogData_FormatType                  = Format type
LogData_Format                      = Format
LogData_TableAdd                    = Add
LogData_ColumnType                  = Type
LogData_ColumnData                  = Data

LogData_ReturnType_True             = True
LogData_ReturnType_False            = False

Or_Info                             = <html>                        \
Evaluate All<br>                                                    \
All the connected sockets are evaluated.                            \
<p>&nbsp;<p>                                                        \
Evaluate Needed<br>                                                 \
Evaluation starts with the first socket and continues until<br>     \
all sockets are evaluated or the result is known.<br>               \
For the Or expression, it means that the evaluation stops<br>       \
as soon as a connected socket evaluates to true.                    \
</html>

TimeSinceMidnight_Components        = Minutes since midnight by {0}

Timer_Components                   = Timer {0}
TimerSwing_Unit                    = Unit
TimerSwing_TimerDelay              = Delay
