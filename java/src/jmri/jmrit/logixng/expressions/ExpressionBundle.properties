# jmri.jmrit.newlogix.digitalexpressions.DigitalExpressionBundle.properties
#
# Default properties for the jmri.jmrit.newlogix.digitalexpressions.DigitalExpressionBundle

AnalogExpressionConstant_Short  = Analog constant
AnalogExpressionConstant_Long   = Get analog constant {0}

AnalogExpressionAnalogIO_Short  = AnalogIO
AnalogExpressionAnalogIO_Long   = Get AnalogIO {0}
AnalogIO_AnalogIOInUseAnalogIOExpressionVeto  = AnalogIO is in use by AnalogIO expression "{0}"

AnalogExpressionMemory_Short    = Memory as analog value
AnalogExpressionMemory_Long     = Get memory {0} as analog value
# Memory_MemoryInUseMemoryExpressionVeto  = Memory is in use by Memory expression "{0}"

AnalogFormula_Short         = Analog Formula
AnalogFormula_Long          = Analog Formula: {0}
AnalogFormula_Long_Empty    = Analog Formula: empty

And_Short             = And
And_Long              = And

Antecedent_Short      = Antecedent
Antecedent_Long       = Antecedent: {0}
Antecedent_Long_Empty = Antecedent: empty

Block_Short            = Block
Block_Long             = Block "{0}" {1} {2}
Block_Long_Value       = Block "{0}" value {1} to "{2}"
Block_Equal            = is equal
Block_NotEqual         = is not equal
Block_StateOccupied    = Occupied
Block_StateNotOccupied = not Occupied
Block_StateOther       = some other state
Block_Allocated        = Allocated
Block_ValueMatches     = equal to
Block_ErrorBlock       = A block was not selected
Block_ErrorValue       = A value was not entered
Block_BlockInUseVeto   = Block is in use by Block expression "{0}"

Clock_Short             = Clock
Clock_Long_FastClock    = Fast clock {0} between {1} and {2}
Clock_Long_SystemClock  = System clock {0} between {1} and {2}
ClockTypeSystemClock    = System clock
ClockTypeFastClock      = Fast clock
Clock_ParseError        = The entered time, "{0}", is not valid
Clock_RangeError        = The entered time is not between 00:00 and 23:59

Conditional_Short       = Conditional
Conditional_Long        = Conditional {0} {1} {2}
ConditionalStateFalse   = False
ConditionalStateTrue    = True
ConditionalOtherStatus  = Other
Conditional_ConditionalInUseConditionalExpressionVeto   = Conditional is in use by Conditional expression "{0}"

DigitalCallModule_Short = Call module
DigitalCallModule_Long  = Call module: {0}
DigitalCallModule_ModuleInUseVeto  = Module is in use by CallModule action "{0}"

DigitalFormula_Short        = Digital Formula
DigitalFormula_Long         = Digital Formula: {0}
DigitalFormula_Long_Empty   = Digital Formula: empty


Dispatcher_Short             = Dispatcher
Dispatcher_Long              = Train "{0}" {1} {2}

DispatcherMode_Automatic    = Automatic mode
DispatcherMode_Dispatched   = Dispatched mode
DispatcherMode_Manual       = Manual mode
DispatcherStatus_Running    = Running
DispatcherStatus_Paused     = Paused
DispatcherStatus_Waiting    = Waiting
DispatcherStatus_Working    = Working
DispatcherStatus_Ready      = Ready
DispatcherStatus_Stopped    = Stopped
DispatcherStatus_Done       = Done
DispatcherPriority_Priority = Priority

DispatcherSeparatorMode     = -  Train Mode  -
DispatcherSeparatorStatus   = -  Train Status  -

Dispatcher_No_Status_Selected = A mode/status entry was not selected


EntryExit_Short         = Entry/exit
EntryExit_Long          = Entry/exit
EntryExitStateInactive  = Inactive
EntryExitStateActive    = Active
EntryExitOtherStatus    = Other
EntryExit_DestinationPointsInUseEntryExitExpressionVeto = DestinationPoints is in use by EntryExit expression "{0}"

False_Short           = Always false
False_Long            = Always false

Hold_Short            = Hold
Hold_Long             = Trigger on expression {0}. Hold while expression {1}
# Important! These strings MUST be valid female socket names!!
Hold_SocketName_Trigger     = Trigger
Hold_SocketName_Hold        = Hold

LastResultOfDigitalExpression_Short     = Last result of digital expression
LastResultOfDigitalExpression_Long      = Last result of digital expression "{0}"
LastResultOfDigitalExpression_BeanInUseVeto     = Expression is in use by "{0}"

Light_Short           = Light
Light_Long            = Light {0} {1} {2}
LightOtherStatus      = Other
Light_LightInUseLightExpressionVeto = Light is in use by Light expression "{0}"


LocalVariable_Short                         = Local variable
LocalVariable_Long_CompareNull              = Local variable {0} {1}
LocalVariable_Long_CompareConstant          = Local variable {0} {1} "{2}"
LocalVariable_Long_CompareMemory            = Local variable {0} {1} memory {2}
LocalVariable_Long_CompareTable             = Local variable {0} {1} table "{2}" row "{3}" and column "{4}"
LocalVariable_Long_CompareLocalVariable     = Local variable {0} {1} local variable {2}
LocalVariable_Long_CompareRegEx             = Local variable {0} {1} /{2}/
LocalVariableOperation_LessThan             = is less than
LocalVariableOperation_LessThanOrEqual      = is less than or equal
LocalVariableOperation_Equal                = is equal to
LocalVariableOperation_GreaterThanOrEqual   = is greater than or equal to
LocalVariableOperation_GreaterThan          = is greater than
LocalVariableOperation_NotEqual             = is not equal to
LocalVariableOperation_IsNull               = is null
LocalVariableOperation_IsNotNull            = is not null
LocalVariableOperation_MatchRegEx           = does match regular expression
LocalVariableOperation_NotMatchRegEx        = does not match regular expression

LocalVariable_MemoryInUseVariableExpressionVeto = Memory is in use by Local variable expression "{0}"

LocalVariable_CompareTo_Value               = Value
LocalVariable_CompareTo_Memory              = Memory
LocalVariable_CompareTo_LocalVariable       = Local variable
LocalVariable_CompareTo_Table               = Table
LocalVariable_CompareTo_RegularExpression   = Regular expression


LogData_Short                           = Log data
LogData_Long                            = Log data

LogData_FormatType_TextOnly             = Only text
LogData_FormatType_CommaSeparatedList   = Comma separated list
LogData_FormatType_StringFormat         = String.format

LogData_Operation_LocalVariable         = Local variable
LogData_Operation_Memory                = Memory
LogData_Operation_Reference             = Reference
LogData_Operation_Formula               = Formula


Memory_Short                    = Memory
Memory_Long_CompareNull         = Memory {0} {1}
Memory_Long_CompareConstant     = Memory {0} {1} "{2}"
Memory_Long_CompareMemory       = Memory {0} {1} memory {2}
Memory_Long_CompareTable        = Memory {0} {1} table "{2}" row "{3}" and column "{4}"
Memory_Long_CompareLocalVariable = Memory {0} {1} local variable {2}
Memory_Long_CompareRegEx        = Memory {0} {1} regular expression /{2}/

MemoryOperation_LessThan            = is less than
MemoryOperation_LessThanOrEqual     = is less than or equal
MemoryOperation_Equal               = is equal to
MemoryOperation_GreaterThanOrEqual  = is greater than or equal to
MemoryOperation_GreaterThan         = is greater than
MemoryOperation_NotEqual            = is not equal to
MemoryOperation_IsNull              = is null
MemoryOperation_IsNotNull           = is not null
MemoryOperation_MatchRegEx          = does match regular expression
MemoryOperation_NotMatchRegEx       = does not match regular expression

Memory_CompareTo_Value              = Value
Memory_CompareTo_Memory             = Memory
Memory_CompareTo_LocalVariable      = Local variable
Memory_CompareTo_Table              = Table
Memory_CompareTo_RegularExpression  = Regular expression

Memory_MemoryInUseMemoryExpressionVeto  = Memory is in use by Memory expression "{0}"


Not_Short               = Not
Not_Long                = Not
# Important! These strings MUST be valid female socket names!!
Not_SocketName          = E


OBlock_Short            = OBlock
OBlock_Long             = OBlock {0} {1} {2}
OBlock_OBlockInUseOBlockExpressionVeto  = OBlock is in use by OBlock expression "{0}"

Or_Short                = Or
Or_Long                 = Or

Power_Short                 = Power
Power_Long                  = Power {0} {1}
PowerStateOn                = On
PowerStateOff               = Off
PowerStateOther             = Other

Reference_Short                 =   Reference
Reference_Long                  = Reference {0} {1} {2}
ReferenceNotSelected            = ''
ReferencePointsTo_Nothing       = Nothing
ReferencePointsTo_Audio         = Audio
ReferencePointsTo_Light         = Light
ReferencePointsTo_Memory        = Memory
ReferencePointsTo_Sensor        = Sensor
ReferencePointsTo_SignalHead    = SignalHead
ReferencePointsTo_SignalMast    = SignalMast
ReferencePointsTo_Turnout       = Turnout
ReferencePointsTo_LogixNGTable  = LogixNG Table


Reporter_Short                    = Reporter
Reporter_Long_CompareNull         = Reporter {0} {1} {2}
Reporter_Long_CompareConstant     = Reporter {0} {1} {2} "{3}"
Reporter_Long_CompareMemory       = Reporter {0} {1} {2} memory {3}
Reporter_Long_CompareLocalVariable = Reporter {0} {1} {2} local variable {3}
Reporter_Long_CompareRegEx        = Reporter {0} {1} {2} regular expression /{3}/

Reporter_No_Reporter              = A reporter was not selected

Reporter_Value_CurrentReport      = Current Report
Reporter_Value_LastReport         = Last Report
Reporter_Value_State              = State

ReporterOperation_LessThan            = is less than
ReporterOperation_LessThanOrEqual     = is less than or equal
ReporterOperation_Equal               = is equal to
ReporterOperation_GreaterThanOrEqual  = is greater than or equal to
ReporterOperation_GreaterThan         = is greater than
ReporterOperation_NotEqual            = is not equal to
ReporterOperation_IsNull              = is null
ReporterOperation_IsNotNull           = is not null
ReporterOperation_MatchRegEx          = does match regular expression
ReporterOperation_NotMatchRegEx       = does not match regular expression

Reporter_CompareTo_Value              = Value
Reporter_CompareTo_Memory             = Memory
Reporter_CompareTo_LocalVariable      = Local variable
Reporter_CompareTo_RegularExpression  = Regular expression

Reporter_ReporterInUseVeto            = Reporter is in use by Reporter expression "{0}"
Reporter_MemoryInUseVeto              = Memory is in use by Reporter expression "{0}"


Script_Short                    = Script
Script_Long                     = Script

Sensor_Short                    = Sensor
Sensor_Long                     = Sensor {0} {1} {2}
SensorOtherStatus               = Other
Sensor_SensorInUseSensorExpressionVeto   = Sensor is in use by Sensor expression "{0}"

SignalHead_Short                    = Signal head
SignalHead_Long                     = Signal head {0} {1}
SignalHead_LongAppearance           = Signal head {0} has appearance {1}
SignalHead_LongNotAppearance        = Signal head {0} has not appearance {1}
SignalHead_LongUnknownOper          = Signal head {0} {1} with appearance {2}
SignalHeadQueryType_Appearance      = has appearence
SignalHeadQueryType_NotAppearance   = has not appearence
SignalHeadQueryType_Lit             = is lit
SignalHeadQueryType_NotLit          = is not lit
SignalHeadQueryType_Held            = is held
SignalHeadQueryType_NotHeld         = is not held
SignalHead_SignalHeadInUseSignalHeadExpressionVeto   = SignalHead is in use by SignalHead expression "{0}"

SignalExampleHead                   = head
SignalExampleMast                   = mast
SignalExampleAppearances            = appearances
SignalExampleAspects                = aspects
SignalExampleText = <html> \
If you do not use Direct addressing of the signal {0} but are using Direct addressing<br> \
of the {1}, you need to select an example signal {0}. The example signal {0} is<br> \
used to tell JMRI which {1} the indirect addressed signal {0} may show.</html>

SignalMast_Short                    = Signal mast
SignalMast_Long                     = Signal mast {0} {1}
SignalMast_LongAspect               = Signal mast {0} has aspect {1}
SignalMast_LongNotAspect            = Signal mast {0} has not aspect {1}
SignalMast_LongUnknownOper          = Signal mast {0} {1} with aspect {2}
SignalMastQueryType_Aspect          = has aspect
SignalMastQueryType_NotAspect       = has not aspect
SignalMastQueryType_Lit             = is lit
SignalMastQueryType_NotLit          = is not lit
SignalMastQueryType_Held            = is held
SignalMastQueryType_NotHeld         = is not held
SignalMastQueryType_IsPermissiveSmlDisabled     = is permissive sml disabled
SignalMastQueryType_IsPermissiveSmlNotDisabled  = is permissive sml not disabled
SignalMast_SignalMastInUseSignalMastExpressionVeto  = SignalMast is in use by SignalMast expression "{0}"


ExpressionScript_Short              = Script
ExpressionScript_Long               = Evaluate script: {0}. Script {1}
ExpressionScript_RunScript          = Run script
ExpressionScript_SingleLineCommand  = Single line command
ExpressionScript_LongUnknownOper    = Evaluate script: Operation {0}. Script: {1}

StringFormula_Short                 = String Formula
StringFormula_Long                  = String Formula: {0}
StringFormula_Long_Empty            = String Formula: empty

StringExpressionConstant_Short      = String constant
StringExpressionConstant_LongNull   = Get string constant null
StringExpressionConstant_LongValue  = Get string constant "{0}"

StringExpressionMemory_Short        = Memory as string value
StringExpressionMemory_Long         = Get memory {0} as string value
# Memory_MemoryInUseMemoryExpressionVeto  = Memory is in use by Memory expression "{0}"

TimeSinceMidnight_Short             = Minutes since midnight
TimeSinceMidnight_Long_SystemClock  = Minutes since midnight system clock
TimeSinceMidnight_Long_FastClock    = Minutes since midnight by fast clock

TriggerOnce_Short       = Trigger once
TriggerOnce_Long        = Trigger once

True_Short              = Always true
True_Long               = Always true

Turnout_Short           = Turnout
Turnout_Long            = Turnout {0} {1} {2}
TurnoutOtherStatus      = Other
Turnout_TurnoutInUseTurnoutExpressionVeto   = Turnout is in use by Turnout expression "{0}"

Warrant_Short           = Warrant
Warrant_Long            = Warrant
WarrantTypeRouteFree    = Route free
WarrantTypeOccupied     = Route occupied
WarrantTypeAllocated    = Route allocated
WarrantTypeRouteSet     = Route set
WarrantTypeTrainRunning = Train is running
Warrant_WarrantInUseWarrantExpressionVeto   = Warrant is in use by Warrant expression "{0}"
