# FunctionsBundle.properties
#
# Default properties for the jmri.jmrit.logixng.util.parser.functions.FunctionsBundle

WrongNumberOfParameters1        = Function \"{0}\" has wrong number of parameters
WrongNumberOfParameters2        = Function \"{0}\" has wrong number of parameters. \"{1}\" parameters expected
IllegalParameter                = Parameter \"{0}\" with value \"{1}\" for function \"{2}\" is invalid


Clock.fastClock_Descr           = <html>                                                    \
<h1>fastClock()</h1>                                                                        \
<h2>fastClock()</h2>                                                                        \
Returns the number of minutes since midnight                                                \
<h2>fastClock("hour")</h2>                                                                  \
Returns the hour                                                                            \
<h2>fastClock("min")</h2>                                                                   \
Returns the minute                                                                          \
<h2>fastClock("minOfDay")</h2>                                                              \
Returns the number of minutes since midnight                                                \
</html>


Clock.fastClockRate_Descr      = <html>                                                     \
<h1>fastClockRate()</h1>                                                                    \
<h2>fastClockRate()</h2>                                                                    \
Returns the rate of the fast clock                                                          \
</html>


Clock.isFastClockRunning_Descr = <html>                                                     \
<h1>isFastClockRunning()</h1>                                                               \
<h2>isFastClockRunning()</h2>                                                               \
Returns true if the fast clock is running, false otherwise                                  \
</html>


Clock.systemClock_Descr         = <html>                                                    \
<h1>systemClock()</h1>                                                                      \
<h2>systemClock()</h2>                                                                      \
Returns the number of minutes since midnight                                                \
<h2>systemClock("hour")</h2>                                                                \
Returns the hour                                                                            \
<h2>systemClock("min")</h2>                                                                 \
Returns the minute                                                                          \
<h2>systemClock("sec")</h2>                                                                 \
Returns the second                                                                          \
<h2>systemClock("minOfDay")</h2>                                                            \
Returns the number of minutes since midnight                                                \
<h2>systemClock("secOfDay")</h2>                                                            \
Returns the number of seconds since midnight                                                \
</html>


Common.length_Descr                 = <html>                                                \
<h1>length()</h1>                                                                           \
<h2>length(parameter)</h2>                                                                  \
Returns the length of <i>parameter</i> if it's a String.<br>                                \
Returns the number of items in <i>parameter</i> if it's an array, list or set.<br>          \
Returns the number of keys in <i>parameter</i> if it's a map.                               \
</html>


Convert.isInt                   = <html>                                                    \
<h1>isInt()</h1>                                                                            \
<h2>isInt(value)</h2>                                                                       \
Returns <i>true</i> if <i>value</i> is an integer or a string that can be                   \
converted to an integer.                                                                    \
<p>                                                                                         \
12 will return true<br>                                                                     \
"12" will return true<br>                                                                   \
"12abc" will return false since only a part of the string is an integer<br>                 \
12.32 will return false since it's a float, not an integer<br>                              \
"12.32" will return false since it's a string of a float, not an integer                    \
</html>


Convert.isFloat                 = <html>                                                    \
<h1>isFloat()</h1>                                                                          \
<h2>isFloat(value)</h2>                                                                     \
Returns <i>true</i> if <i>value</i> is a float or a string that can be                      \
converted to a float.                                                                       \
<p>                                                                                         \
12 will return true<br>                                                                     \
"12" will return true<br>                                                                   \
12.32 will return true. All integer numbers are also treated as floats<br>                  \
"12.32" will return true<br>                                                                \
"12abc" will return false since only a part of the string is a float                        \
</html>


Convert.bool                    = <html>                                                    \
<h1>bool()</h1>                                                                             \
<h2>bool(value)</h2>                                                                        \
Converts <i>value</i> to a boolean and returns it.<br>                                      \
A boolean value is either true or false.<br>                                                \
&nbsp;<br>                                                                                  \
Convertion rules:<br>                                                                       \
<ul>                                                                                        \
<li>If the value is already a boolean, it's returned as is.</li>                            \
<li>A number is false if it's between -0.5 and 0.5, or -0.5 < x < 0.5, true otherwise.</li> \
<li>A string that has the value <i>false</i> (case insensitive) is false.</li>              \
<li>A string that has the value <i>true</i> (case insensitive) is true.</li>                \
</html>


Convert.boolJython              = <html>                                                    \
<h1>boolJython()</h1>                                                                       \
<h2>boolJython(value)</h2>                                                                  \
Converts <i>value</i> to a boolean and returns it.<br>                                      \
A boolean value is either true or false.<br>                                                \
&nbsp;<br>                                                                                  \
Convertion rules, according to Jython:<br>                                                  \
<ul>                                                                                        \
<li>A null or None value is false.</li>                                                     \
<li>A list or map is true if it's not empty. If it's empty, it's false.                     \
<li>A number is false if it's between -0.5 and 0.5, or -0.5 < x < 0.5, true otherwise.</li> \
<li>A string is true if it's not empty. An empty string is false.                           \
</html>


Convert.int                     = <html>                                                    \
<h1>int()</h1>                                                                              \
<h2>int(value)</h2>                                                                         \
Converts <i>value</i> to an integer and returns it.                                         \
</html>


Convert.float                   = <html>                                                    \
<h1>float()</h1>                                                                            \
<h2>float(value)</h2>                                                                       \
Converts <i>value</i> to a floating point number and returns it.                            \
<h2>float(value, do_i18n)</h2>                                                              \
Converts <i>value</i> to a floating point number and returns it. <i>do_i18n</i>             \
is a boolean value (true or false) that tells if internationalization should be             \
done.                                                                                       \
</html>


Convert.str_Descr               = <html>                                                    \
<h1>str()</h1>                                                                              \
<h2>str(value)</h2>                                                                         \
Converts <i>value</i> to a string and returns it.                                           \
<h2>str(value, do_i18n)</h2>                                                                \
Converts <i>value</i> to a string and returns it. <i>do_i18n</i> is a boolean value         \
(true or false) that tells if internationalization should be done.                          \
</html>


Convert.hex2dec                 = <html>                                                    \
<h1>hex2dec()</h1>                                                                          \
<h2>hex2dec(value)</h2>                                                                     \
Converts <i>value</i> from a hexadecimal number to a decimal numner and returns it.         \
</html>


Java.ConstantDescriptions           = <html>                                                \
<h1>Constants</h1>                                                                          \
<table>                                                                                     \
  <tr><td>null</td><td>The 'null' value in Java and the 'None' value in Jython</td></tr>    \
  <tr><td>None</td><td>The 'null' value in Java and the 'None' value in Jython</td></tr>    \
</table>                                                                                    \
</html>


Java.new_Descr                      = <html>                                                \
<h1>new()</h1>                                                                              \
<h2>new(className, parameters...)</h2>                                                      \
Creates a new instance of the class <i>className</i> with <i>parameters...</i>              \
for the constructor.                                                                        \
<p>                                                                                         \
<i>parameters...</i> is zero or more parameters of any type.                                \
<p>                                                                                         \
<h2>Examples</h2>                                                                           \
map = new("java.util.HashMap")<br>                                                          \
file = new("java.io.File", "filename.txt")<br>                                              \
</html>


Math.ConstantDescriptions                 = <html>                          \
<h1>Constants</h1>                                                          \
<table>                                                                     \
  <tr><td>MathPI</td><td>The value of PI, 3.14159...</td></tr>              \
  <tr><td>MathE</td><td>The value of e, 2.71828...</td></tr>                \
</table>                                                                    \
</html>


Math.abs_Descr                  = <html>                                                    \
<h1>abs()</h1>                                                                              \
<h2>abs(value)</h2>                                                                         \
Returns the absolute value. If the parameter is an integer, it returns an integer.          \
Otherwise it returns a double.                                                              \
</html>


Math.random_Descr               = <html>                                                    \
<h1>random()</h1>                                                                           \
<h2>random()</h2>                                                                           \
Returns a random value 0.0 &lt;= x &lt; 1.0                                                 \
<h2>random(max)</h2>                                                                        \
Returns a random value 0.0 &lt;= x &lt; <i>max</i>                                          \
<h2>random(min, max)</h2>                                                                   \
Returns a random value <i>min</i> &lt;= x &lt; <i>max</i>                                   \
</html>


Math.round_Descr                = <html>                                                    \
<h1>round()</h1>                                                                            \
<h2>round(value)</h2>                                                                       \
Rounds the <i>value</i> to no decimals.                                                     \
<h2>round(value, numDecimals)</h2>                                                          \
Rounds the <i>value</i> to <i>numDecimals</i> decimals.<br>                                 \
<i>numDecimals</i> can be negative. For example, if numDecimals is -2,<br>                  \
the value 12345.6789 is rounded to 12300.0 .                                                \
</html>


Math.ceil_Descr                 = <html>                                                    \
<h1>ceil()</h1>                                                                             \
<h2>ceil(value)</h2>                                                                        \
Rounds the <i>value</i> up to no decimals.                                                  \
<h2>ceil(value, numDecimals)</h2>                                                           \
Rounds the <i>value</i> up to <i>numDecimals</i> decimals.<br>                              \
<i>numDecimals</i> can be negative. For example, if numDecimals is -2,<br>                  \
the value 12345.6789 is rounded to 12400.0 .                                                \
</html>


Math.floor_Descr                = <html>                                                    \
<h1>floor()</h1>                                                                            \
<h2>floor(value)</h2>                                                                       \
Rounds the <i>value</i> down to no decimals.                                                \
<h2>floor(value, numDecimals)</h2>                                                          \
Rounds the <i>value</i> down to <i>numDecimals</i> decimals.<br>                            \
<i>numDecimals</i> can be negative. For example, if numDecimals is -2,<br>                  \
the value 12345.6789 is rounded to 12300.0 .                                                \
</html>


Math.sin_Descr                  = <html>                                                    \
<h1>sin()</h1>                                                                              \
<h2>sin(angle)</h2>                                                                         \
Returns the sine value of <i>angle</i>, where <i>angle</i> is measured in radians.          \
<hr>                                                                                        \
<h2>sin(angle, unit)</h2>                                                                   \
Returns the sine value of <i>angle</i>, there <i>angle</i> is measured in <i>unit</i>.      \
<p>                                                                                         \
The <i>unit</i> may be given by a string or by the number of units per full                 \
rotation of the circle. The supported strings are "rad" for radians and "deg"               \
for degrees.                                                                                \
<p>                                                                                         \
An example when it's desired to use an integer value as unit is if you want to              \
control the light in the room by the fast clock. If you let the minute of the               \
day be the angle and let 1440 be the unit, then you can use sin() to control the            \
brightness of the lights in the room. To let it be complete dark at midnight and            \
full brightness at noon, you can use this formula:                                          \
<p>                                                                                         \
<b>sin( fastClock() - 360, 1440 ) / 2 + 0.5</b>                                             \
<p>                                                                                         \
This formula uses the function <i>fastClock()</i> to get the number of minutes              \
since midnight and adds 360 minutes (6 hours or a quarter of a 24h day) to get              \
the bottom of the sine curve to be at midnight.                                             \
<hr>                                                                                        \
<h2>sin(angle, unit, min, max)</h2>                                                         \
Returns the sine value of <i>angle</i>, there <i>angle</i> is measured in <i>unit</i>       \
between <i>min</i> and <i>max</i>.                                                          \
<p>                                                                                         \
Lets say you want to control the light in the room by the fast clock and you want           \
the brightness be between 20 and 100. You can then use the following formula:               \
<p>                                                                                         \
<b>sin( fastClock() - 360, 1440, 20, 100 )</b>                                              \
</html>


Math.cos_Descr                  = <html>                                                    \
<h1>cos()</h1>                                                                              \
<h2>cos(angle)</h2>                                                                         \
Returns the cosine value of <i>angle</i>, where <i>angle</i> is measured in radians.        \
<hr>                                                                                        \
<h2>cos(angle, unit)</h2>                                                                   \
Returns the cosine value of <i>angle</i>, there <i>angle</i> is measured in <i>unit</i>.    \
<p>                                                                                         \
The <i>unit</i> may be given by a string or by the number of units per full                 \
rotation of the circle. The supported strings are "rad" for radians and "deg"               \
for degrees.                                                                                \
<hr>                                                                                        \
<h2>cos(angle, unit, min, max)</h2>                                                         \
Returns the cosine value of <i>angle</i>, there <i>angle</i> is measured in <i>unit</i>     \
between <i>min</i> and <i>max</i>.                                                          \
</html>


Math.tan_Descr                  = <html>                                                    \
<h1>tan()</h1>                                                                              \
<h2>tan(angle)</h2>                                                                         \
Returns the tangens value of <i>angle</i>, where <i>angle</i> is measured in radians.       \
<hr>                                                                                        \
<h2>tan(angle, unit)</h2>                                                                   \
Returns the tangens value of <i>angle</i>, there <i>angle</i> is measured in <i>unit</i>.   \
<p>                                                                                         \
The <i>unit</i> may be given by a string or by the number of units per full                 \
rotation of the circle. The supported strings are "rad" for radians and "deg"               \
for degrees.                                                                                \
</html>


Math.atan_Descr                  = <html>                                                   \
<h1>atan()</h1>                                                                             \
<h2>atan(value)</h2>                                                                        \
Returns the arcus tangens <i>value</i>, there the resulting angle is measured in radians.   \
<hr>                                                                                        \
<h2>atan(value, unit)</h2>                                                                  \
Returns the arcus tangens of <i>value</i>, there the resulting angle is measured in         \
<i>unit</i>.                                                                                \
<p>                                                                                         \
The <i>unit</i> may be given by a string or by the number of units per full                 \
rotation of the circle. The supported strings are "rad" for radians and "deg"               \
for degrees.                                                                                \
</html>


Math.sqr_Descr                  = <html>                                                    \
<h1>sqr()</h1>                                                                              \
<h2>sqr(value)</h2>                                                                         \
Returns the square of <i>value</i>, or <i>value</i> * <i>value</i>.<br>                     \
If the parameter is an integer, it returns an integer.                                      \
Otherwise it returns a double.                                                              \
</html>


Math.sqrt_Descr                  = <html>                                                   \
<h1>sqrt()</h1>                                                                             \
<h2>sqrt(value)</h2>                                                                        \
Returns the square root of <i>value</i>.<br>                                                \
<i>value</i> = sqrt(<i>value</i>) * sqrt(<i>value</i>)                                      \
</html>


NamedBean.getLogixNGTable_Descr     = <html>                                                \
<h1>getLogixNGTable()</h1>                                                                  \
<h2>getLogixNGTable(name)</h2>                                                              \
Returns the LogixNG table <i>name</i>. If the table doesn't exist, null is                  \
returned.                                                                                   \
<p>                                                                                         \
Example:                                                                                    \
<p>                                                                                         \
<b>getLogixNGTable("MyTable")</b>                                                           \
<p>                                                                                         \
Returns the LogixNG table "MyTable".                                                        \
<p>                                                                                         \
<b>table = getLogixNGTable("MyTable")</b><br>                                               \
Assigns the table "MyTable" to the local variable "table".                                  \
<p>                                                                                         \
<b>numColumns = table.numColumns()</b><br>                                                  \
Assigns the number of columns of the table in the local variable "table"                    \
to the local variable "numColumns".                                                         \
<p>                                                                                         \
<b>numRows = table.numRows()</b><br>                                                        \
Assigns the number of rows of the table in the local variable "table"                       \
to the local variable "numRows".                                                            \
<p>                                                                                         \
<b>cell = table.getCell(row, column)</b><br>                                                \
Assigns the value of a cell of the table in the local variable "table"                      \
to the local variable "cell".                                                               \
<p>                                                                                         \
<b>table.setCell(value, row, column)</b><br>                                                \
Sets the value of a cell of the table in the local variable "table"                         \
to the new cell value "value".                                                              \
<p>                                                                                         \
</html>


NamedBean.readMemory_Descr          = <html>                                                \
<h1>readMemory()</h1>                                                                       \
<h2>readMemory(memory)</h2>                                                                 \
Returns the value of the <i>memory</i>. If the memory doesn't exist, null is                \
returned.                                                                                   \
<p>                                                                                         \
Example:                                                                                    \
<p>                                                                                         \
<b>readMemory("IM2")</b>                                                                    \
<p>                                                                                         \
Reads the memory IM2 and returns its value.                                                 \
</html>


NamedBean.evaluateMemory_Descr      = <html>                                                \
<h1>evaluateMemory()</h1>                                                                   \
<h2>evaluateMemory(memory)</h2>                                                             \
Reads the value of the <i>memory</i>.                                                       \
<ul>                                                                                        \
<li>If the value is a string that is a valid reference, the reference is                    \
evaluated and the result is returned.</li>                                                  \
<li>If the value is not a reference, the value is returned as is.</li>                      \
<li>If the memory doesn't exist, null is returned.</li>                                     \
</ul>                                                                                       \
<p>                                                                                         \
Example:                                                                                    \
<p>                                                                                         \
<b>evaluateMemory("IM2")</b>                                                                \
<p>                                                                                         \
Reads the memory IM2. If the value of IM2 is a reference, ( for example IM41 ),               \
that reference is evaluated, meaning that the value of IM41 is returned, unless             \
IM41 also is a valid reference, since references are evaluated recursively.                 \
</html>


NamedBean.writeMemory_Descr         = <html>                                                \
<h1>writeMemory()</h1>                                                                      \
<h2>writeMemory(memory, value)</h2>                                                         \
Writes the <i>value</i> to the <i>memory</i> and returns the <i>value</i>                   \
<p>                                                                                         \
Example:                                                                                    \
<p>                                                                                         \
<b>writeMemory("IM2", "MyString")</b>                                                       \
<p>                                                                                         \
Writes the value "MyString" to the memory IM2 and returns "MyString".                       \
</html>


String.format_Descr                 = <html>                                                \
<h1>format()</h1>                                                                           \
<h2>format(formatString, parameters...)</h2>                                                \
Reads the <i>formatString</i> and the following <i>parameters...</i> and sends              \
it to the Java method <i>String.format()</i>.                                               \
<p>                                                                                         \
<i>parameters...</i> is zero or more parameters of any type, but the format                 \
specifier in the <i>formatString</i> must match its corresponding parameter.                \
<p>                                                                                         \
For the syntax of the <i>formatString</i>, see the Java documentation:<br>                  \
https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax                   \
</html>


String.strlen_Descr                 = <html>                                                \
<h1>strlen()</h1>                                                                           \
<h2>strlen(parameter)</h2>                                                                  \
Returns the length of <i>parameter</i> if it's a String.                                    \
<p>                                                                                         \
Note the function <i>length()</i> in the <i>Common</i> module.<br>                          \
It supports strings, arrays, lists, sets and maps.                                          \
</html>


LayoutFunctions_GetTurnoutState_TurnoutNotFound = Turnout \"{0}\" is not found
LayoutFunctions_SetTurnoutState_TurnoutNotFound = Turnout \"{0}\" is not found

LayoutFunctions_GetSensorState_SensorNotFound   = Sensor \"{0}\" is not found
LayoutFunctions_SetSensorState_SensorNotFound   = Sensor \"{0}\" is not found

LayoutFunctions_GetLightState_LightNotFound     = Light \"{0}\" is not found
LayoutFunctions_SetLightState_LightNotFound     = Light \"{0}\" is not found

LayoutFunctions_GetSignalHeadAppearance_SignalHeadNotFound  = Signal head \"{0}\" is not found
LayoutFunctions_SetSignalHeadAppearance_SignalHeadNotFound  = Signal head \"{0}\" is not found

LayoutFunctions_GetSignalMastAspect_SignalMastNotFound  = Signal mast \"{0}\" is not found
LayoutFunctions_SetSignalMastAspect_SignalMastNotFound  = Signal mast \"{0}\" is not found


Layout.ConstantDescriptions                 = <html>                        \
<h1>Constants</h1>                                                          \
<table>                                                                     \
  <tr><th colspan="2">Common</th></tr>                                      \
  <tr><td>Unknown</td><td>Unkown state of a turnout, sensor, light, ...</td></tr>               \
  <tr><td>Inconsistent</td><td>Inconsistent state of a turnout, sensor, light, ...</td></tr>    \
  <tr><td>&nbsp;</td><td>&nbsp;</td></tr>                                   \
\
  <tr><th colspan="2">Lights</th></tr>                                      \
  <tr><td>Off</td><td>Light is off</td></tr>                                \
  <tr><td>On</td><td>Light is on</td></tr>                                  \
  <tr><td>&nbsp;</td><td>&nbsp;</td></tr>                                   \
\
  <tr><th colspan="2">Sensors</th></tr>                                     \
  <tr><td>Inactive</td><td>Sensor is inactive</td></tr>                     \
  <tr><td>Active</td><td>Sensor is active</td></tr>                         \
  <tr><td>&nbsp;</td><td>&nbsp;</td></tr>                                   \
\
  <tr><th colspan="2">Turnouts</th></tr>                                    \
  <tr><td>Closed</td><td>Turnout is closed</td></tr>                        \
  <tr><td>Thrown</td><td>Turnout is thrown</td></tr>                        \
  <tr><td>CabLockout</td><td>Turnout is cab lockout</td></tr>               \
  <tr><td>PushButtonLockout</td><td>Turnout is push button lockout</td></tr> \
  <tr><td>Unlocked</td><td>Turnout is unlocked</td></tr>                    \
  <tr><td>Locked</td><td>Turnout is locked</td></tr>                        \
  <tr><td>&nbsp;</td><td>&nbsp;</td></tr>                                   \
\
  <tr><th colspan="2">Signal heads</th></tr>                                \
  <tr><td>Dark</td><td>Signal head is dark</td></tr>                        \
  <tr><td>Red</td><td>Signal head is red</td></tr>                          \
  <tr><td>FlashRed</td><td>Signal head is flash red</td></tr>               \
  <tr><td>Yellow</td><td>Signal head is yellow</td></tr>                    \
  <tr><td>FlashYellow</td><td>Signal head is flash yellow</td></tr>         \
  <tr><td>Green</td><td>Signal head is green</td></tr>                      \
  <tr><td>FlashGreen</td><td>Signal head is flash green</td></tr>           \
  <tr><td>Lunar</td><td>Signal head is lunar</td></tr>                      \
  <tr><td>FlashLunar</td><td>Signal head is flash lunar</td></tr>           \
  <tr><td>Held</td><td>Signal head is held</td></tr>                        \
  <tr><td>&nbsp;</td><td>&nbsp;</td></tr>                                   \
\
  <tr><th colspan="2">List of managers</th></tr>                            \
  <tr><td>sensors</td><td>The manager for sensors</td></tr>                 \
  <tr><td>turnouts</td><td>The manager for turnouts</td></tr>               \
  <tr><td>lights</td><td>The manager for lights</td></tr>                   \
  <tr><td>signals</td><td>The manager for signal heads</td></tr>            \
  <tr><td>masts</td><td>The manager for signal masts</td></tr>              \
  <tr><td>routes</td><td>The manager for routes</td></tr>                   \
  <tr><td>blocks</td><td>The manager for blocks</td></tr>                   \
  <tr><td>oblocks</td><td>The manager for oblocks</td></tr>                 \
  <tr><td>reporters</td><td>The manager for reporters</td></tr>             \
  <tr><td>memories</td><td>The manager for memories</td></tr>               \
  <tr><td>powermanager</td><td>The manager for power</td></tr>              \
  <tr><td>addressedProgrammers</td><td>The manager for addressed programmers</td></tr>  \
  <tr><td>globalProgrammers</td><td>The manager for global programmers</td></tr>        \
  <tr><td>dcc</td><td>The manager for the command station</td></tr>         \
  <tr><td>audio</td><td>The manager for audio</td></tr>                     \
  <tr><td>shutdown</td><td>The manager for shutdown</td></tr>               \
  <tr><td>layoutblocks</td><td>The manager for layout blocks</td></tr>      \
  <tr><td>warrants</td><td>The manager for warrants</td></tr>               \
  <tr><td>sections</td><td>The manager for sections</td></tr>               \
  <tr><td>transits</td><td>The manager for transits</td></tr>               \
  <tr><td>&nbsp;</td><td>&nbsp;</td></tr>                                   \
\
  <tr><th colspan="2">The instance manager</th></tr>                        \
  <tr><td>InstanceManager</td><td>The manager for all the other managers</td></tr>             \
</table>                                                                    \
</html>


LayoutFunctions.turnoutExists_Descr         = <html>                        \
<h1>turnoutExists()</h1>                                                    \
<h2>turnoutExists(turnout)</h2>                                             \
Returns true if <i>turnout</i> exists, false otherwise.                     \
<p>                                                                         \
<i>turnout</i> is the system name or user name of a turnout.                \
</html>


LayoutFunctions.getTurnoutState_Descr       = <html>                        \
<h1>getTurnoutState()</h1>                                                  \
<h2>getTurnoutState(turnout)</h2>                                           \
Reads the state of <i>turnout</i>.                                          \
<p>                                                                         \
<i>turnout</i> is the system name or user name of a turnout.                \
</html>


LayoutFunctions.setTurnoutState_Descr       = <html>                        \
<h1>setTurnoutState()</h1>                                                  \
<h2>setTurnoutState(turnout, state)</h2>                                    \
Sets the state of <i>turnout</i>.                                           \
<p>                                                                         \
<i>turnout</i> is the system name or user name of a turnout and             \
<i>state</i> is the new state of the turnout.                               \
<p>                                                                         \
The following constants can be used:<br>                                    \
<ul>                                                                        \
  <li>Unknown                                                               \
  <li>Inconsistent                                                          \
  <li>Closed                                                                \
  <li>Thrown                                                                \
</ul>                                                                       \
<h2>Example</h2>                                                            \
setTurnoutState("My turnout", Closed)                                       \
</html>


LayoutFunctions.sensorExists_Descr         = <html>                         \
<h1>sensorExists()</h1>                                                     \
<h2>sensorExists(sensor)</h2>                                               \
Returns true if <i>sensor</i> exists, false otherwise.                      \
<p>                                                                         \
<i>sensor</i> is the system name or user name of a sensor.                  \
</html>


LayoutFunctions.getSensorState_Descr       = <html>                         \
<h1>getSensorState()</h1>                                                   \
<h2>getSensorState(sensor)</h2>                                             \
Reads the state of <i>sensor</i>.                                           \
<p>                                                                         \
<i>sensor</i> is the system name or user name of a sensor.                  \
</html>


LayoutFunctions.setSensorState_Descr       = <html>                         \
<h1>setSensorState()</h1>                                                   \
<h2>setSensorState(sensor, state)</h2>                                      \
Sets the state of <i>sensor</i>.                                            \
<p>                                                                         \
<i>sensor</i> is the system name or user name of a sensor and               \
<i>state</i> is the new state of the sensor.                                \
<p>                                                                         \
The following constants can be used:<br>                                    \
<ul>                                                                        \
  <li>Unknown                                                               \
  <li>Inconsistent                                                          \
  <li>Inactive                                                              \
  <li>Active                                                                \
</ul>                                                                       \
<h2>Example</h2>                                                            \
setSensorState("My sensor", Inactive)                                       \
</html>


LayoutFunctions.lightExists_Descr           = <html>                        \
<h1>lightExists()</h1>                                                      \
<h2>lightExists(light)</h2>                                                 \
Returns true if <i>light</i> exists, false otherwise.                       \
<p>                                                                         \
<i>light</i> is the system name or user name of a light.                    \
</html>


LayoutFunctions.getLightState_Descr         = <html>                        \
<h1>getLightState()</h1>                                                    \
<h2>getLightState(light)</h2>                                               \
Reads the state of <i>light</i>.                                            \
<p>                                                                         \
<i>light</i> is the system name or user name of a light.                    \
</html>


LayoutFunctions.setLightState_Descr         = <html>                          \
<h1>setLightState()</h1>                                                    \
<h2>setLightState(light, state)</h2>                                        \
Sets the state of <i>light</i>.                                             \
<p>                                                                         \
<i>light</i> is the system name or user name of a light and                 \
<i>state</i> is the new state of the light.                                 \
<p>                                                                         \
The following constants can be used:<br>                                    \
<ul>                                                                        \
  <li>Unknown                                                               \
  <li>Inconsistent                                                          \
  <li>Off                                                                   \
  <li>On                                                                    \
</ul>                                                                       \
<h2>Example</h2>                                                            \
setLightState("My light", Off)                                              \
</html>


LayoutFunctions.signalHeadExists_Descr         = <html>                     \
<h1>signalHeadExists()</h1>                                                 \
<h2>signalHeadExists(signalHead)</h2>                                       \
Returns true if <i>signalHead</i> exists, false otherwise.                  \
<p>                                                                         \
<i>signalHead</i> is the system name or user name of a signalHead.          \
</html>


LayoutFunctions.getSignalHeadAppearance_Descr       = <html>                \
<h1>getSignalHeadAppearance()</h1>                                          \
<h2>getSignalHeadAppearance(signalHead)</h2>                                \
Reads the appearance of <i>signalHead</i>.                                  \
<p>                                                                         \
<i>signalHead</i> is the system name or user name of a signal head.         \
</html>


LayoutFunctions.setSignalHeadAppearance_Descr       = <html>                \
<h1>setSignalHeadAppearance()</h1>                                          \
<h2>setSignalHeadAppearance(signalHead, appearance)</h2>                    \
Sets the appearance of <i>signalHead</i>.                                   \
<p>                                                                         \
<i>signalHead</i> is the system name or user name of a signal head and      \
<i>appearance</i> is the new appearance of the signal head.                 \
<p>                                                                         \
The following constants can be used:<br>                                    \
<ul>                                                                        \
  <li>Dark                                                                  \
  <li>Red                                                                   \
  <li>FlashRed                                                              \
  <li>Yellow                                                                \
  <li>FlashYellow                                                           \
  <li>Green                                                                 \
  <li>FlashGreen                                                            \
  <li>Lunar                                                                 \
  <li>FlashLunar                                                            \
  <li>Held                                                                  \
</ul>                                                                       \
<h2>Example</h2>                                                            \
setSignalHeadAppearance("My signal head", Red)                              \
</html>


LayoutFunctions.signalMastExists_Descr         = <html>                     \
<h1>signalMastExists()</h1>                                                 \
<h2>signalMastExists(signalMast)</h2>                                       \
Returns true if <i>signalMast</i> exists, false otherwise.                  \
<p>                                                                         \
<i>signalMast</i> is the system name or user name of a signalMast.          \
</html>


LayoutFunctions.getSignalMastAspect_Descr       = <html>                    \
<h1>getSignalMastAspect()</h1>                                              \
<h2>getSignalMastAspect(signalMast)</h2>                                    \
Reads the aspect of <i>signalMast</i>.                                      \
<p>                                                                         \
<i>signalMast</i> is the system name or user name of a signal mast.         \
</html>


LayoutFunctions.setSignalMastAspect_Descr       = <html>                    \
<h1>setSignalMastAspect()</h1>                                              \
<h2>setSignalMastAspect(signalMast, aspect)</h2>                            \
Sets the aspect of <i>signalMast</i>.                                      \
<p>                                                                         \
<i>signalMast</i> is the system name or user name of a signal mast and      \
<i>aspect</i> is the new aspect of the signal mast.                         \
<h2>Example</h2>                                                            \
setSignalMastAspect("My signal mast", "Red")                                \
</html>


