/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jmri.jmrit.display.layoutEditor;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JSpinner;
import javax.swing.event.ChangeEvent;
import jmri.util.swing.JmriColorChooser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Handle changing layout editor drawing options
 *
 * @author George Warner Copyright (c) 2017-2018
 */
public class LayoutTrackDrawingOptionsDialog extends JDialog {

    private final LayoutEditor layoutEditor;
    private transient final LayoutTrackDrawingOptions leLTDOptions;
    private transient LayoutTrackDrawingOptions ltdOptions = null;

    private String classicPresetName = Bundle.getMessage("ClassicPresetName");
    private String draftingPresetName = Bundle.getMessage("DraftingPresetName");
    private String realisticPresetName = Bundle.getMessage("RealisticPresetName");
    private String realisticOhPresetName = Bundle.getMessage("RealisticOhPresetName");
    private String british70sPresetName = Bundle.getMessage("British70sPresetName");
    private String customPresetName = Bundle.getMessage("CustomPresetName");

    private transient final List<LayoutTrackDrawingOptions> ltdoList = new ArrayList<>();

    /**
     * Creates new form LayoutTrackDrawingOptionsDialog
     */
    public LayoutTrackDrawingOptionsDialog(LayoutEditor layoutEditor, boolean modal,
            LayoutTrackDrawingOptions ltdOptions) {
        super(layoutEditor, modal);

        this.layoutEditor = layoutEditor;
        this.leLTDOptions = ltdOptions;
        this.ltdOptions = new LayoutTrackDrawingOptions(ltdOptions);

        initComponents();
        setLocationRelativeTo(layoutEditor);
        definePresets();
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionsPanel = new javax.swing.JPanel();
        optionLabel = new javax.swing.JLabel();
        mainlineLabel = new javax.swing.JLabel();
        railCountLabel = new javax.swing.JLabel();
        mainRailCountSpinner = new javax.swing.JSpinner();
        sideRailCountSpinner = new javax.swing.JSpinner();
        railWidthLabel = new javax.swing.JLabel();
        mainRailWidthSpinner = new javax.swing.JSpinner();
        sideRailWidthSpinner = new javax.swing.JSpinner();
        railGapLabel = new javax.swing.JLabel();
        sideRailGapSpinner = new javax.swing.JSpinner();
        mainRailGapSpinner = new javax.swing.JSpinner();
        javax.swing.JLabel railColorLabel = new javax.swing.JLabel();
        mainRailColorButton = new javax.swing.JButton();
        sideRailColorButton = new javax.swing.JButton();
        blockLineWidthLabel = new javax.swing.JLabel();
        mainBlockLineWidthSpinner = new javax.swing.JSpinner();
        sideBlockLineWidthSpinner = new javax.swing.JSpinner();
        ballastWidthLabel = new javax.swing.JLabel();
        mainBallastWidthSpinner = new javax.swing.JSpinner();
        sideBallastWidthSpinner = new javax.swing.JSpinner();
        javax.swing.JLabel ballastColorLabel = new javax.swing.JLabel();
        mainBallastColorButton = new javax.swing.JButton();
        sideBallastColorButton = new javax.swing.JButton();
        tieLengthLabel = new javax.swing.JLabel();
        mainTieLengthSpinner = new javax.swing.JSpinner();
        sideTieLengthSpinner = new javax.swing.JSpinner();
        tieWidthLabel = new javax.swing.JLabel();
        mainTieWidthSpinner = new javax.swing.JSpinner();
        sideTieWidthSpinner = new javax.swing.JSpinner();
        tieGapLabel = new javax.swing.JLabel();
        mainTieGapSpinner = new javax.swing.JSpinner();
        sideTieGapSpinner = new javax.swing.JSpinner();
        javax.swing.JLabel tieColorLabel = new javax.swing.JLabel();
        mainTieColorButton = new javax.swing.JButton();
        sideTieColorButton = new javax.swing.JButton();
        sidelineLabel = new javax.swing.JLabel();
        blockLineDashPercentageX10Label = new javax.swing.JLabel();
        mainBlockLineDashPercentageX10Spinner = new javax.swing.JSpinner();
        sideBlockLineDashPercentageX10Spinner = new javax.swing.JSpinner();
        presetsComboBox = new javax.swing.JComboBox<>();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        presetsLabel = new javax.swing.JLabel();
        applyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(512, 329));
        setResizable(false);
        setSize(new java.awt.Dimension(512, 329));

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(ltdOptions.getName()));
        optionsPanel.setMaximumSize(new java.awt.Dimension(800, 529));
        optionsPanel.setMinimumSize(new java.awt.Dimension(800, 529));
        optionsPanel.setPreferredSize(new java.awt.Dimension(800, 529));
        optionsPanel.setSize(new java.awt.Dimension(800, 529));

        optionLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        optionLabel.setText(Bundle.getMessage("OptionLabelText"));
        optionLabel.setToolTipText(Bundle.getMessage("OptionToolTip"));
        optionLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        optionLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        optionLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        optionLabel.setSize(new java.awt.Dimension(256, 16));

        mainlineLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        mainlineLabel.setText(Bundle.getMessage("MainlineLabelText"));
        mainlineLabel.setToolTipText(Bundle.getMessage("MainlineColumnToolTip"));
        mainlineLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        mainlineLabel.setMinimumSize(new java.awt.Dimension(64, 16));
        mainlineLabel.setPreferredSize(new java.awt.Dimension(64, 16));
        mainlineLabel.setSize(new java.awt.Dimension(64, 16));

        railCountLabel.setText(Bundle.getMessage("RailCountLabelText"));
        railCountLabel.setToolTipText(Bundle.getMessage("RailCountToolTip"));
        railCountLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        railCountLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        railCountLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        railCountLabel.setSize(new java.awt.Dimension(256, 16));

        mainRailCountSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 3, 1));
        mainRailCountSpinner.setToolTipText(Bundle.getMessage("MainRailCountToolTip"));
        mainRailCountSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        mainRailCountSpinner.setName(""); // NOI18N
        mainRailCountSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        mainRailCountSpinner.setSize(new java.awt.Dimension(64, 16));
        mainRailCountSpinner.setValue(ltdOptions.getMainRailCount());
        mainRailCountSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainRailCountSpinnerStateChanged(evt);
            }
        });

        sideRailCountSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 3, 1));
        sideRailCountSpinner.setToolTipText(Bundle.getMessage("SideRailCountToolTip"));
        sideRailCountSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        sideRailCountSpinner.setName(""); // NOI18N
        sideRailCountSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        sideRailCountSpinner.setSize(new java.awt.Dimension(64, 16));
        sideRailCountSpinner.setValue(ltdOptions.getSideRailCount());
        sideRailCountSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sideRailCountSpinnerStateChanged(evt);
            }
        });

        railWidthLabel.setText(Bundle.getMessage("RailWidthLabelText"));
        railWidthLabel.setToolTipText(Bundle.getMessage("RailWidthToolTip"));
        railWidthLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        railWidthLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        railWidthLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        railWidthLabel.setSize(new java.awt.Dimension(256, 16));

        mainRailWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(2, 1, null, 1));
        mainRailWidthSpinner.setToolTipText(Bundle.getMessage("MainRailWidthToolTip"));
        mainRailWidthSpinner.setEnabled(ltdOptions.getMainRailCount() > 0);
        mainRailWidthSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        mainRailWidthSpinner.setName(""); // NOI18N
        mainRailWidthSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        mainRailWidthSpinner.setSize(new java.awt.Dimension(64, 16));
        mainRailWidthSpinner.setValue(ltdOptions.getMainRailWidth());
        mainRailWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainRailWidthSpinnerStateChanged(evt);
            }
        });

        sideRailWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        sideRailWidthSpinner.setToolTipText(Bundle.getMessage("SideRailWidthToolTip"));
        sideRailWidthSpinner.setEnabled(ltdOptions.getSideRailCount() > 0);
        sideRailWidthSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        sideRailWidthSpinner.setName(""); // NOI18N
        sideRailWidthSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        sideRailWidthSpinner.setSize(new java.awt.Dimension(64, 16));
        sideRailWidthSpinner.setValue(ltdOptions.getSideRailWidth());
        sideRailWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sideRailWidthSpinnerStateChanged(evt);
            }
        });

        railGapLabel.setText(Bundle.getMessage("RailGapLabelText"));
        railGapLabel.setToolTipText(Bundle.getMessage("RailGapToolTip"));
        railGapLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        railGapLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        railGapLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        railGapLabel.setSize(new java.awt.Dimension(256, 16));

        sideRailGapSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        sideRailGapSpinner.setToolTipText(Bundle.getMessage("SideRailGapToolTip"));
        sideRailGapSpinner.setEnabled(ltdOptions.getSideRailCount() > 1);
        sideRailGapSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        sideRailGapSpinner.setName(""); // NOI18N
        sideRailGapSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        sideRailGapSpinner.setSize(new java.awt.Dimension(64, 16));
        sideRailGapSpinner.setValue(ltdOptions.getSideRailGap());
        sideRailGapSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sideRailGapSpinnerStateChanged(evt);
            }
        });

        mainRailGapSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        mainRailGapSpinner.setToolTipText(Bundle.getMessage("MainRailGapToolTip"));
        mainRailGapSpinner.setEnabled(ltdOptions.getMainRailCount() > 1);
        mainRailGapSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        mainRailGapSpinner.setName(""); // NOI18N
        mainRailGapSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        mainRailGapSpinner.setSize(new java.awt.Dimension(64, 16));
        mainRailGapSpinner.setValue(ltdOptions.getMainRailGap());
        mainRailGapSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainRailGapSpinnerStateChanged(evt);
            }
        });

        railColorLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        railColorLabel.setText(Bundle.getMessage("RailColorLabelText"));
        railColorLabel.setToolTipText(Bundle.getMessage("RailColorToolTip"));
        railColorLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        railColorLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        railColorLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        railColorLabel.setSize(new java.awt.Dimension(256, 16));

        mainRailColorButton.setBackground(ltdOptions.getMainRailColor());
        mainRailColorButton.setToolTipText(Bundle.getMessage("MainRailColorToolTip"));
        mainRailColorButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        mainRailColorButton.setEnabled(ltdOptions.getMainRailCount() > 0);
        mainRailColorButton.setMaximumSize(new java.awt.Dimension(32767, 32767));
        mainRailColorButton.setMinimumSize(new java.awt.Dimension(64, 16));
        mainRailColorButton.setOpaque(true);
        mainRailColorButton.setPreferredSize(new java.awt.Dimension(64, 16));
        mainRailColorButton.setSize(new java.awt.Dimension(64, 16));
        mainRailColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainRailColorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainRailColorButtonLayout = new javax.swing.GroupLayout(mainRailColorButton);
        mainRailColorButton.setLayout(mainRailColorButtonLayout);
        mainRailColorButtonLayout.setHorizontalGroup(
            mainRailColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
        );
        mainRailColorButtonLayout.setVerticalGroup(
            mainRailColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        sideRailColorButton.setBackground(ltdOptions.getSideRailColor());
        sideRailColorButton.setToolTipText(Bundle.getMessage("SideRailColorToolTip"));
        sideRailColorButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        sideRailColorButton.setEnabled(ltdOptions.getSideRailCount() > 0);
        sideRailColorButton.setMaximumSize(new java.awt.Dimension(32767, 32767));
        sideRailColorButton.setMinimumSize(new java.awt.Dimension(64, 16));
        sideRailColorButton.setOpaque(true);
        sideRailColorButton.setPreferredSize(new java.awt.Dimension(64, 16));
        sideRailColorButton.setSize(new java.awt.Dimension(64, 16));
        sideRailColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sideRailColorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sideRailColorButtonLayout = new javax.swing.GroupLayout(sideRailColorButton);
        sideRailColorButton.setLayout(sideRailColorButtonLayout);
        sideRailColorButtonLayout.setHorizontalGroup(
            sideRailColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 103, Short.MAX_VALUE)
        );
        sideRailColorButtonLayout.setVerticalGroup(
            sideRailColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        blockLineWidthLabel.setText(Bundle.getMessage("BlockLineWidthLabelText"));
        blockLineWidthLabel.setToolTipText(Bundle.getMessage("BlockLineWidthToolTip"));
        blockLineWidthLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        blockLineWidthLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        blockLineWidthLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        blockLineWidthLabel.setSize(new java.awt.Dimension(256, 16));

        mainBlockLineWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        mainBlockLineWidthSpinner.setToolTipText(Bundle.getMessage("MainBlockLineWidthToolTip"));
        mainBlockLineWidthSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        mainBlockLineWidthSpinner.setName(""); // NOI18N
        mainBlockLineWidthSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        mainBlockLineWidthSpinner.setSize(new java.awt.Dimension(64, 16));
        mainBlockLineWidthSpinner.setValue(ltdOptions.getMainBlockLineWidth());
        mainBlockLineWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainBlockLineWidthSpinnerStateChanged(evt);
            }
        });

        sideBlockLineWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        sideBlockLineWidthSpinner.setToolTipText(Bundle.getMessage("SideBlockLineWidthToolTip"));
        sideBlockLineWidthSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        sideBlockLineWidthSpinner.setName(""); // NOI18N
        sideBlockLineWidthSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        sideBlockLineWidthSpinner.setSize(new java.awt.Dimension(64, 16));
        sideBlockLineWidthSpinner.setValue(ltdOptions.getSideBlockLineWidth());
        sideBlockLineWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sideBlockLineWidthSpinnerStateChanged(evt);
            }
        });

        ballastWidthLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        ballastWidthLabel.setText(Bundle.getMessage("BallastWidthLabelText"));
        ballastWidthLabel.setToolTipText(Bundle.getMessage("BallastWidthToolTip"));
        ballastWidthLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        ballastWidthLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        ballastWidthLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        ballastWidthLabel.setSize(new java.awt.Dimension(256, 16));

        mainBallastWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        mainBallastWidthSpinner.setToolTipText(Bundle.getMessage("MainBallastWidthToolTip"));
        mainBallastWidthSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        mainBallastWidthSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        mainBallastWidthSpinner.setSize(new java.awt.Dimension(64, 16));
        mainBallastWidthSpinner.setValue(ltdOptions.getMainBallastWidth());
        mainBallastWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainBallastWidthSpinnerStateChanged(evt);
            }
        });

        sideBallastWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        sideBallastWidthSpinner.setToolTipText(Bundle.getMessage("SideBallastWidthToolTip"));
        sideBallastWidthSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        sideBallastWidthSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        sideBallastWidthSpinner.setSize(new java.awt.Dimension(64, 16));
        sideBallastWidthSpinner.setValue(ltdOptions.getSideBallastWidth());
        sideBallastWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sideBallastWidthSpinnerStateChanged(evt);
            }
        });

        ballastColorLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        ballastColorLabel.setText(Bundle.getMessage("BallastColorLabelText"));
        ballastColorLabel.setToolTipText(Bundle.getMessage("BallastColorToolTip"));
        ballastColorLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        ballastColorLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        ballastColorLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        ballastColorLabel.setSize(new java.awt.Dimension(256, 16));

        mainBallastColorButton.setBackground(ltdOptions.getMainBallastColor());
        mainBallastColorButton.setToolTipText(Bundle.getMessage("MainBallastColorToolTip"));
        mainBallastColorButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        mainBallastColorButton.setEnabled(ltdOptions.getMainBallastWidth() > 0);
        mainBallastColorButton.setMaximumSize(new java.awt.Dimension(32767, 32767));
        mainBallastColorButton.setMinimumSize(new java.awt.Dimension(64, 16));
        mainBallastColorButton.setOpaque(true);
        mainBallastColorButton.setPreferredSize(new java.awt.Dimension(64, 16));
        mainBallastColorButton.setSize(new java.awt.Dimension(64, 16));
        mainBallastColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainBallastColorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainBallastColorButtonLayout = new javax.swing.GroupLayout(mainBallastColorButton);
        mainBallastColorButton.setLayout(mainBallastColorButtonLayout);
        mainBallastColorButtonLayout.setHorizontalGroup(
            mainBallastColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
        );
        mainBallastColorButtonLayout.setVerticalGroup(
            mainBallastColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        sideBallastColorButton.setBackground(ltdOptions.getSideBallastColor());
        sideBallastColorButton.setToolTipText(Bundle.getMessage("SideBallastColorToolTip"));
        sideBallastColorButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        sideBallastColorButton.setEnabled(ltdOptions.getSideBallastWidth() > 0);
        sideBallastColorButton.setMaximumSize(new java.awt.Dimension(32767, 32767));
        sideBallastColorButton.setMinimumSize(new java.awt.Dimension(64, 16));
        sideBallastColorButton.setOpaque(true);
        sideBallastColorButton.setPreferredSize(new java.awt.Dimension(64, 16));
        sideBallastColorButton.setSize(new java.awt.Dimension(64, 16));
        sideBallastColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sideBallastColorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sideBallastColorButtonLayout = new javax.swing.GroupLayout(sideBallastColorButton);
        sideBallastColorButton.setLayout(sideBallastColorButtonLayout);
        sideBallastColorButtonLayout.setHorizontalGroup(
            sideBallastColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 103, Short.MAX_VALUE)
        );
        sideBallastColorButtonLayout.setVerticalGroup(
            sideBallastColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        tieLengthLabel.setText(Bundle.getMessage("TieLengthLabelText"));
        tieLengthLabel.setToolTipText(Bundle.getMessage("TieLengthToolTip"));
        tieLengthLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tieLengthLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        tieLengthLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        tieLengthLabel.setSize(new java.awt.Dimension(256, 16));

        mainTieLengthSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        mainTieLengthSpinner.setToolTipText(Bundle.getMessage("MainTieLengthToolTip"));
        mainTieLengthSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        mainTieLengthSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        mainTieLengthSpinner.setSize(new java.awt.Dimension(64, 16));
        mainTieLengthSpinner.setValue(ltdOptions.getMainTieLength());
        mainTieLengthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTieLengthSpinnerStateChanged(evt);
            }
        });

        sideTieLengthSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        sideTieLengthSpinner.setToolTipText(Bundle.getMessage("SideTieLengthToolTip"));
        sideTieLengthSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        sideTieLengthSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        sideTieLengthSpinner.setSize(new java.awt.Dimension(64, 16));
        sideTieLengthSpinner.setValue(ltdOptions.getSideTieLength());
        sideTieLengthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sideTieLengthSpinnerStateChanged(evt);
            }
        });

        tieWidthLabel.setText(Bundle.getMessage("TieWidthLabelText"));
        tieWidthLabel.setToolTipText(Bundle.getMessage("TieWidthToolTip"));
        tieWidthLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tieWidthLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        tieWidthLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        tieWidthLabel.setSize(new java.awt.Dimension(256, 16));

        mainTieWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        mainTieWidthSpinner.setToolTipText(Bundle.getMessage("MainTieWidthToolTip"));
        mainTieWidthSpinner.setEnabled(ltdOptions.getMainTieLength() > 0);
        mainTieWidthSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        mainTieWidthSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        mainTieWidthSpinner.setSize(new java.awt.Dimension(64, 16));
        mainTieWidthSpinner.setValue(ltdOptions.getMainTieWidth());
        mainTieWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTieWidthSpinnerStateChanged(evt);
            }
        });

        sideTieWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        sideTieWidthSpinner.setToolTipText(Bundle.getMessage("SideTieWidthToolTip"));
        sideTieWidthSpinner.setEnabled(ltdOptions.getSideTieLength() > 0);
        sideTieWidthSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        sideTieWidthSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        sideTieWidthSpinner.setSize(new java.awt.Dimension(64, 16));
        sideTieWidthSpinner.setValue(ltdOptions.getSideTieWidth());
        sideTieWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sideTieWidthSpinnerStateChanged(evt);
            }
        });

        tieGapLabel.setText(Bundle.getMessage("TieGapLabelText"));
        tieGapLabel.setToolTipText(Bundle.getMessage("TieGapToolTip"));
        tieGapLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tieGapLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        tieGapLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        tieGapLabel.setSize(new java.awt.Dimension(256, 16));

        mainTieGapSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        mainTieGapSpinner.setToolTipText(Bundle.getMessage("MainTieGapToolTip"));
        mainTieGapSpinner.setEnabled(ltdOptions.getMainTieLength() > 0);
        mainTieGapSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        mainTieGapSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        mainTieGapSpinner.setSize(new java.awt.Dimension(64, 16));
        mainTieGapSpinner.setValue(ltdOptions.getMainTieGap());
        mainTieGapSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTieGapSpinnerStateChanged(evt);
            }
        });

        sideTieGapSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        sideTieGapSpinner.setToolTipText(Bundle.getMessage("SideTieGapToolTip"));
        sideTieGapSpinner.setEnabled(ltdOptions.getSideTieLength() > 0);
        sideTieGapSpinner.setMinimumSize(new java.awt.Dimension(64, 16));
        sideTieGapSpinner.setPreferredSize(new java.awt.Dimension(64, 16));
        sideTieGapSpinner.setSize(new java.awt.Dimension(64, 16));
        sideTieGapSpinner.setValue(ltdOptions.getSideTieGap());
        sideTieGapSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sideTieGapSpinnerStateChanged(evt);
            }
        });

        tieColorLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        tieColorLabel.setText(Bundle.getMessage("TieColorLabelText"));
        tieColorLabel.setToolTipText(Bundle.getMessage("TieColorToolTip"));
        tieColorLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tieColorLabel.setMinimumSize(new java.awt.Dimension(256, 16));
        tieColorLabel.setPreferredSize(new java.awt.Dimension(256, 16));
        tieColorLabel.setSize(new java.awt.Dimension(256, 16));

        mainTieColorButton.setBackground(ltdOptions.getMainTieColor());
        mainTieColorButton.setToolTipText(Bundle.getMessage("MainTieColorToolTip"));
        mainTieColorButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        mainTieColorButton.setEnabled(ltdOptions.getMainTieLength() > 0);
        mainTieColorButton.setMaximumSize(new java.awt.Dimension(32767, 32767));
        mainTieColorButton.setMinimumSize(new java.awt.Dimension(64, 16));
        mainTieColorButton.setOpaque(true);
        mainTieColorButton.setPreferredSize(new java.awt.Dimension(64, 16));
        mainTieColorButton.setSize(new java.awt.Dimension(64, 16));
        mainTieColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainTieColorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainTieColorButtonLayout = new javax.swing.GroupLayout(mainTieColorButton);
        mainTieColorButton.setLayout(mainTieColorButtonLayout);
        mainTieColorButtonLayout.setHorizontalGroup(
            mainTieColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
        );
        mainTieColorButtonLayout.setVerticalGroup(
            mainTieColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        sideTieColorButton.setBackground(ltdOptions.getSideTieColor());
        sideTieColorButton.setToolTipText(Bundle.getMessage("SideTieColorToolTip"));
        sideTieColorButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        sideTieColorButton.setEnabled(ltdOptions.getSideTieLength() > 0);
        sideTieColorButton.setMaximumSize(new java.awt.Dimension(32767, 32767));
        sideTieColorButton.setMinimumSize(new java.awt.Dimension(64, 16));
        sideTieColorButton.setOpaque(true);
        sideTieColorButton.setPreferredSize(new java.awt.Dimension(64, 16));
        sideTieColorButton.setSize(new java.awt.Dimension(64, 16));
        sideTieColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sideTieColorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sideTieColorButtonLayout = new javax.swing.GroupLayout(sideTieColorButton);
        sideTieColorButton.setLayout(sideTieColorButtonLayout);
        sideTieColorButtonLayout.setHorizontalGroup(
            sideTieColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 103, Short.MAX_VALUE)
        );
        sideTieColorButtonLayout.setVerticalGroup(
            sideTieColorButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        sidelineLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        sidelineLabel.setText(Bundle.getMessage("SidelineLabelText"));
        sidelineLabel.setToolTipText(Bundle.getMessage("SidelineColumnToolTip"));
        sidelineLabel.setMaximumSize(new java.awt.Dimension(32767, 32767));
        sidelineLabel.setMinimumSize(new java.awt.Dimension(64, 16));
        sidelineLabel.setPreferredSize(new java.awt.Dimension(64, 16));
        sidelineLabel.setSize(new java.awt.Dimension(64, 16));

        blockLineDashPercentageX10Label.setText(Bundle.getMessage("BlockLineDashPercentageX10LabelText"));
        blockLineDashPercentageX10Label.setToolTipText(Bundle.getMessage("BlockLineDashPercentageX10ToolTip"));
        blockLineDashPercentageX10Label.setMaximumSize(new java.awt.Dimension(32767, 32767));
        blockLineDashPercentageX10Label.setMinimumSize(new java.awt.Dimension(256, 16));
        blockLineDashPercentageX10Label.setPreferredSize(new java.awt.Dimension(256, 16));
        blockLineDashPercentageX10Label.setSize(new java.awt.Dimension(256, 16));

        mainBlockLineDashPercentageX10Spinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 9, 1));
        mainBlockLineDashPercentageX10Spinner.setToolTipText(Bundle.getMessage("MainBlockLineWidthToolTip"));
        mainBlockLineDashPercentageX10Spinner.setEnabled(ltdOptions.getMainBlockLineWidth() > 0);
        mainBlockLineDashPercentageX10Spinner.setMinimumSize(new java.awt.Dimension(64, 16));
        mainBlockLineDashPercentageX10Spinner.setName(""); // NOI18N
        mainBlockLineDashPercentageX10Spinner.setPreferredSize(new java.awt.Dimension(64, 16));
        mainBlockLineDashPercentageX10Spinner.setSize(new java.awt.Dimension(64, 16));
        mainBlockLineDashPercentageX10Spinner.setValue(ltdOptions.getMainBlockLineDashPercentageX10());
        mainBlockLineDashPercentageX10Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainBlockLineDashPercentageX10SpinnerStateChanged(evt);
            }
        });

        sideBlockLineDashPercentageX10Spinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 9, 1));
        sideBlockLineDashPercentageX10Spinner.setToolTipText(Bundle.getMessage("SideBlockLineDashPercentageX10ToolTip"));
        sideBlockLineDashPercentageX10Spinner.setEnabled(ltdOptions.getSideBlockLineWidth() > 0);
        sideBlockLineDashPercentageX10Spinner.setMinimumSize(new java.awt.Dimension(64, 16));
        sideBlockLineDashPercentageX10Spinner.setName(""); // NOI18N
        sideBlockLineDashPercentageX10Spinner.setPreferredSize(new java.awt.Dimension(64, 16));
        sideBlockLineDashPercentageX10Spinner.setSize(new java.awt.Dimension(64, 16));
        sideBlockLineDashPercentageX10Spinner.setValue(ltdOptions.getSideBlockLineDashPercentageX10());
        sideBlockLineDashPercentageX10Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sideBlockLineDashPercentageX10SpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tieColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(blockLineDashPercentageX10Label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tieLengthLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tieWidthLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tieGapLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(railGapLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(railColorLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(blockLineWidthLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(optionLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(railCountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(railWidthLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ballastWidthLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(mainBallastColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainBlockLineDashPercentageX10Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainTieLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainTieWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainTieGapSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainRailGapSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainTieColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainRailColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainBlockLineWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainlineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainRailCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainRailWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainBallastWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(sideBallastWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideBallastColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideBlockLineDashPercentageX10Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideTieLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideTieWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideRailWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideRailGapSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideTieGapSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideTieColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideRailColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sidelineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideBlockLineWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideRailCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(ballastColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        optionsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ballastColorLabel, ballastWidthLabel, blockLineDashPercentageX10Label, blockLineWidthLabel, optionLabel, railColorLabel, railCountLabel, railGapLabel, railWidthLabel, tieColorLabel, tieGapLabel, tieLengthLabel, tieWidthLabel});

        optionsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {mainBallastColorButton, mainBallastWidthSpinner, mainBlockLineDashPercentageX10Spinner, mainBlockLineWidthSpinner, mainRailColorButton, mainRailCountSpinner, mainRailGapSpinner, mainRailWidthSpinner, mainTieColorButton, mainTieGapSpinner, mainTieLengthSpinner, mainTieWidthSpinner, mainlineLabel});

        optionsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {sideBallastColorButton, sideBallastWidthSpinner, sideBlockLineDashPercentageX10Spinner, sideBlockLineWidthSpinner, sideRailColorButton, sideRailCountSpinner, sideRailGapSpinner, sideRailWidthSpinner, sideTieColorButton, sideTieGapSpinner, sideTieLengthSpinner, sideTieWidthSpinner, sidelineLabel});

        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sidelineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mainlineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(optionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(railCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mainRailCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sideRailCountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(railWidthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mainRailWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sideRailWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(railGapLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mainRailGapSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sideRailGapSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(railColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mainRailColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sideRailColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(blockLineWidthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mainBlockLineWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sideBlockLineWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blockLineDashPercentageX10Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainBlockLineDashPercentageX10Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sideBlockLineDashPercentageX10Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(optionsPanelLayout.createSequentialGroup()
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ballastWidthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mainBallastWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sideBallastWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ballastColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sideBallastColorButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(mainBallastColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tieLengthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mainTieLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sideTieLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tieWidthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mainTieWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sideTieWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tieGapLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mainTieGapSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sideTieGapSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tieColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sideTieColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(mainTieColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        optionsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ballastColorLabel, ballastWidthLabel, blockLineWidthLabel, mainBallastColorButton, mainBallastWidthSpinner, mainBlockLineDashPercentageX10Spinner, mainBlockLineWidthSpinner, mainRailColorButton, mainRailCountSpinner, mainRailGapSpinner, mainRailWidthSpinner, mainTieColorButton, mainTieGapSpinner, mainTieLengthSpinner, mainTieWidthSpinner, mainlineLabel, optionLabel, railColorLabel, railCountLabel, railGapLabel, railWidthLabel, sideBallastColorButton, sideBallastWidthSpinner, sideBlockLineDashPercentageX10Spinner, sideBlockLineWidthSpinner, sideRailColorButton, sideRailCountSpinner, sideRailGapSpinner, sideRailWidthSpinner, sideTieColorButton, sideTieGapSpinner, sideTieLengthSpinner, sideTieWidthSpinner, sidelineLabel, tieColorLabel, tieGapLabel, tieLengthLabel, tieWidthLabel});

        presetsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Classic JMRI", "Drafting", "Realistic", "Realistic Oh!", "Garrish", "--", "Custom" }));
        presetsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetsComboBoxActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setActionCommand("cancelActionCommand");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        presetsLabel.setText("Presets:");

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(presetsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(presetsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(applyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 594, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(presetsLabel)
                    .addComponent(presetsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(applyButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*==========================*\
    |* action performed methods *|
    \*==========================*/

    private void okButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        log.debug("okButtonActionPerformed({}", evt);
        ltdOptions.setName(layoutEditor.getLayoutName());
        layoutEditor.setLayoutTrackDrawingOptions(ltdOptions);
        ltdOptions = null;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void presetsComboBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_presetsComboBoxActionPerformed
        log.debug("presetsComboBoxActionPerformed({}", evt);
        int modifiers = evt.getModifiers();
        if (modifiers != 0) {   // don't do this unless it's a mouse click
            String presetName = (String) presetsComboBox.getSelectedItem();
            for (LayoutTrackDrawingOptions ltdo : ltdoList) {
                if (ltdo.getName().equals(presetName)) {
                    if (!ltdOptions.getName().equals(ltdo.getName())) {
                        ltdOptions = ltdo;
                        setupControls();
                        optionsPanel.setBorder(BorderFactory.createTitledBorder(presetName));
                        presetsComboBox.setSelectedItem(presetName);
                    }
                    break;
                }
            }
        }
    }//GEN-LAST:event_presetsComboBoxActionPerformed

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        log.debug("cancelButtonActionPerformed({}", evt);
        // restore orginal settings
        layoutEditor.setLayoutTrackDrawingOptions(leLTDOptions);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void sideTieGapSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sideTieGapSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setSideTieGap(value.intValue());
        log.debug("sideTieGapSpinnerStateChanged({})", value);
    }//GEN-LAST:event_sideTieGapSpinnerStateChanged

    private void mainTieGapSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_mainTieGapSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setMainTieGap(value.intValue());
        log.debug("mainTieGapSpinnerStateChanged({})", value);
    }//GEN-LAST:event_mainTieGapSpinnerStateChanged

    private void sideTieWidthSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sideTieWidthSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setSideTieWidth(value.intValue());
        log.debug("sideTieWidthSpinnerStateChanged({})", value);
    }//GEN-LAST:event_sideTieWidthSpinnerStateChanged

    private void mainTieWidthSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_mainTieWidthSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setMainTieWidth(value.intValue());
        log.debug("mainTieWidthSpinnerStateChanged({})", value);
    }//GEN-LAST:event_mainTieWidthSpinnerStateChanged

    private void sideTieLengthSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sideTieLengthSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setSideTieLength(value.intValue());
        log.debug("sideTieLengthSpinnerStateChanged({})", value);
        sideTieColorButton.setEnabled(value > 0);
        sideTieGapSpinner.setEnabled(value > 0);
        sideTieWidthSpinner.setEnabled(value > 0);
    }//GEN-LAST:event_sideTieLengthSpinnerStateChanged

    private void mainTieLengthSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_mainTieLengthSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setMainTieLength(value.intValue());
        log.debug("mainTieLengthSpinnerStateChanged({})", value);
        mainTieColorButton.setEnabled(value > 0);
        mainTieGapSpinner.setEnabled(value > 0);
        mainTieWidthSpinner.setEnabled(value > 0);
    }//GEN-LAST:event_mainTieLengthSpinnerStateChanged

    private void sideBallastWidthSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sideBallastWidthSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setSideBallastWidth(value.intValue());
        log.debug("sideBallastWidthSpinnerStateChanged({})", value);
    }//GEN-LAST:event_sideBallastWidthSpinnerStateChanged

    private void mainBallastWidthSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_mainBallastWidthSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setMainBallastWidth(value.intValue());
        log.debug("mainBallastWidthSpinnerStateChanged({})", value);
    }//GEN-LAST:event_mainBallastWidthSpinnerStateChanged

    private void sideBlockLineWidthSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sideBlockLineWidthSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setSideBlockLineWidth(value.intValue());
        log.debug("sideBlockLineWidthSpinnerStateChanged({})", value);
        sideBlockLineDashPercentageX10Spinner.setEnabled(value > 0);
    }//GEN-LAST:event_sideBlockLineWidthSpinnerStateChanged

    private void mainBlockLineWidthSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_mainBlockLineWidthSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setMainBlockLineWidth(value.intValue());
        log.debug("mainBlockLineWidthSpinnerStateChanged({})", value);
        mainBlockLineDashPercentageX10Spinner.setEnabled(value > 0);
    }//GEN-LAST:event_mainBlockLineWidthSpinnerStateChanged

    private void mainRailGapSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_mainRailGapSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setMainRailGap(value.intValue());
        log.debug("sideRailGapSpinnerStateChanged({})", value);
    }//GEN-LAST:event_mainRailGapSpinnerStateChanged

    private void sideRailGapSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sideRailGapSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setSideRailGap(value.intValue());
        log.debug("mainRailGapSpinnerStateChanged({})", value);
    }//GEN-LAST:event_sideRailGapSpinnerStateChanged

    private void sideRailWidthSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sideRailWidthSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setSideRailWidth(value.intValue());
        log.debug("sideRailWidthSpinnerStateChanged({})", value);
    }//GEN-LAST:event_sideRailWidthSpinnerStateChanged

    private void mainRailWidthSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_mainRailWidthSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setMainRailWidth(value.intValue());
        log.debug("mainRailWidthSpinnerStateChanged({})", value);
    }//GEN-LAST:event_mainRailWidthSpinnerStateChanged

    private void sideRailCountSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sideRailCountSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setSideRailCount(value.intValue());
        log.debug("sideRailCountSpinnerStateChanged({})", value);
        sideRailColorButton.setEnabled(value > 0);
        sideRailGapSpinner.setEnabled(value > 1);
        sideRailWidthSpinner.setEnabled(value > 0);
    }//GEN-LAST:event_sideRailCountSpinnerStateChanged

    private void mainRailCountSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_mainRailCountSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setMainRailCount(value.intValue());
        log.debug("mainRailCountSpinnerStateChanged({})", value);
        mainRailColorButton.setEnabled(value > 0);
        mainRailGapSpinner.setEnabled(value > 1);
        mainRailWidthSpinner.setEnabled(value > 0);
    }//GEN-LAST:event_mainRailCountSpinnerStateChanged

    private void applyButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        LayoutTrackDrawingOptions ltdo = new LayoutTrackDrawingOptions(ltdOptions);
        ltdo.setName(layoutEditor.getLayoutName());
        layoutEditor.setLayoutTrackDrawingOptions(ltdo);
    }//GEN-LAST:event_applyButtonActionPerformed

    private void mainRailColorButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_mainRailColorButtonActionPerformed
        JButton button = (JButton) evt.getSource();
        Color value = button.getBackground();
        Color newColor = JmriColorChooser.showDialog(null, "Choose a color", value);
        if ((newColor != null) && !newColor.equals(value)) {
            makeCustomPreset();
            button.setBackground(newColor);
            ltdOptions.setMainRailColor(newColor);
        }
        log.info("*mainRailColorButtonActionPerformed({})", newColor);
    }//GEN-LAST:event_mainRailColorButtonActionPerformed

    private void sideRailColorButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sideRailColorButtonActionPerformed
        JButton button = (JButton) evt.getSource();
        Color value = button.getBackground();
        Color newColor = JmriColorChooser.showDialog(null, "Choose a color", value);
        if ((newColor != null) && !newColor.equals(value)) {
            makeCustomPreset();
            button.setBackground(newColor);
            ltdOptions.setSideRailColor(newColor);
        }
        log.info("*sideRailColorButtonActionPerformed({})", newColor);
    }//GEN-LAST:event_sideRailColorButtonActionPerformed

    private void mainBallastColorButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_mainBallastColorButtonActionPerformed
        JButton button = (JButton) evt.getSource();
        Color value = button.getBackground();
        Color newColor = JmriColorChooser.showDialog(null, "Choose a color", value);
        if ((newColor != null) && !newColor.equals(value)) {
            makeCustomPreset();
            button.setBackground(newColor);
            ltdOptions.setMainBallastColor(newColor);
        }
        log.info("*mainBallastColorButtonActionPerformed({})", newColor);
    }//GEN-LAST:event_mainBallastColorButtonActionPerformed

    private void sideBallastColorButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sideBallastColorButtonActionPerformed
        JButton button = (JButton) evt.getSource();
        Color value = button.getBackground();
        Color newColor = JmriColorChooser.showDialog(null, "Choose a color", value);
        if ((newColor != null) && !newColor.equals(value)) {
            makeCustomPreset();
            button.setBackground(newColor);
            ltdOptions.setSideBallastColor(newColor);
        }
        log.info("*sideBallastColorButtonActionPerformed({})", newColor);
    }//GEN-LAST:event_sideBallastColorButtonActionPerformed

    private void mainTieColorButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_mainTieColorButtonActionPerformed
        JButton button = (JButton) evt.getSource();
        Color value = button.getBackground();
        Color newColor = JmriColorChooser.showDialog(null, "Choose a color", value);
        if ((newColor != null) && !newColor.equals(value)) {
            makeCustomPreset();
            button.setBackground(newColor);
            ltdOptions.setMainTieColor(newColor);
        }
        log.info("*mainTieColorButtonActionPerformed({})", newColor);
    }//GEN-LAST:event_mainTieColorButtonActionPerformed

    private void sideTieColorButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sideTieColorButtonActionPerformed
        JButton button = (JButton) evt.getSource();
        Color value = button.getBackground();
        Color newColor = JmriColorChooser.showDialog(null, "Choose a color", value);
        if ((newColor != null) && !newColor.equals(value)) {
            makeCustomPreset();
            button.setBackground(newColor);
            ltdOptions.setSideTieColor(newColor);
        }
        log.info("*sideTieColorButtonActionPerformed({})", newColor);
    }//GEN-LAST:event_sideTieColorButtonActionPerformed

    private void mainBlockLineDashPercentageX10SpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_mainBlockLineDashPercentageX10SpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setMainBlockLineDashPercentageX10(value.intValue());
        log.debug("mainBlockLineDashPercentageX10SpinnerStateChanged({})", value);
    }//GEN-LAST:event_mainBlockLineDashPercentageX10SpinnerStateChanged

    private void sideBlockLineDashPercentageX10SpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sideBlockLineDashPercentageX10SpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        Integer value = (Integer) spinner.getValue();
        makeCustomPreset();
        ltdOptions.setSideBlockLineDashPercentageX10(value.intValue());
        log.debug("sideBlockLineDashPercentageX10({})", value);
    }//GEN-LAST:event_sideBlockLineDashPercentageX10SpinnerStateChanged

    /*=========================*\
    |* local (private) methods *|
    \*=========================*/
    private void setupControls() {
        copyToCustom = false;   // prevent xxx.setValue's from creating custom preset

        mainBallastColorButton.setBackground(ltdOptions.getMainBallastColor());
        mainBallastWidthSpinner.setValue(ltdOptions.getMainBallastWidth());
        mainBlockLineDashPercentageX10Spinner.setValue(ltdOptions.getMainBlockLineDashPercentageX10());
        mainBlockLineWidthSpinner.setValue(ltdOptions.getMainBlockLineWidth());
        mainRailColorButton.setBackground(ltdOptions.getMainRailColor());
        mainRailCountSpinner.setValue(ltdOptions.getMainRailCount());
        mainRailGapSpinner.setValue(ltdOptions.getMainRailGap());
        mainRailWidthSpinner.setValue(ltdOptions.getMainRailWidth());
        mainTieColorButton.setBackground(ltdOptions.getMainTieColor());
        mainTieGapSpinner.setValue(ltdOptions.getMainTieGap());
        mainTieLengthSpinner.setValue(ltdOptions.getMainTieLength());
        mainTieWidthSpinner.setValue(ltdOptions.getMainTieWidth());
        sideBallastColorButton.setBackground(ltdOptions.getSideBallastColor());
        sideBallastWidthSpinner.setValue(ltdOptions.getSideBallastWidth());
        sideBlockLineDashPercentageX10Spinner.setValue(ltdOptions.getSideBlockLineDashPercentageX10());
        sideBlockLineWidthSpinner.setValue(ltdOptions.getSideBlockLineWidth());
        sideRailColorButton.setBackground(ltdOptions.getSideRailColor());
        sideRailCountSpinner.setValue(ltdOptions.getSideRailCount());
        sideRailGapSpinner.setValue(ltdOptions.getSideRailGap());
        sideRailWidthSpinner.setValue(ltdOptions.getSideRailWidth());
        sideTieColorButton.setBackground(ltdOptions.getSideTieColor());
        sideTieGapSpinner.setValue(ltdOptions.getSideTieGap());
        sideTieLengthSpinner.setValue(ltdOptions.getSideTieLength());
        sideTieWidthSpinner.setValue(ltdOptions.getSideTieWidth());
        copyToCustom = true;
    }   // setupControls

    // used to prevent xxx.setValue's in setupControls from creating custom preset
    private boolean copyToCustom = true;

    private void makeCustomPreset() {
        if (copyToCustom && !ltdOptions.getName().equals(customPresetName)) {
            ltdOptions = new LayoutTrackDrawingOptions(ltdOptions);
            ltdOptions.setName(customPresetName);
            if (!ltdoList.get(ltdoList.size() - 1).getName().equals(customPresetName)) {
                ltdoList.add(ltdOptions);
                presetsComboBox.addItem(ltdOptions.getName());
            }
            presetsComboBox.setSelectedItem(ltdOptions.getName());
            optionsPanel.setBorder(BorderFactory.createTitledBorder(customPresetName));
        }
    }
    // define the presets

    private void definePresets() {
        LayoutTrackDrawingOptions tempLTDO = new LayoutTrackDrawingOptions(classicPresetName);
        tempLTDO.setMainBallastColor(Color.BLACK);
        tempLTDO.setMainBallastWidth(0);
        tempLTDO.setMainBlockLineDashPercentageX10(0);
        tempLTDO.setMainBlockLineWidth(4);
        tempLTDO.setMainRailColor(Color.BLACK);
        tempLTDO.setMainRailCount(1);
        tempLTDO.setMainRailGap(0);
        tempLTDO.setMainRailWidth(2);
        tempLTDO.setMainTieColor(Color.BLACK);
        tempLTDO.setMainTieGap(0);
        tempLTDO.setMainTieLength(0);
        tempLTDO.setMainTieWidth(0);
        tempLTDO.setSideBallastColor(Color.BLACK);
        tempLTDO.setSideBallastWidth(0);
        tempLTDO.setSideBlockLineDashPercentageX10(0);
        tempLTDO.setSideBlockLineWidth(2);
        tempLTDO.setSideRailColor(Color.BLACK);
        tempLTDO.setSideRailCount(1);
        tempLTDO.setSideRailGap(0);
        tempLTDO.setSideRailWidth(1);
        tempLTDO.setSideTieColor(Color.BLACK);
        tempLTDO.setSideTieGap(0);
        tempLTDO.setSideTieLength(0);
        tempLTDO.setSideTieWidth(0);
        ltdoList.add(tempLTDO);

        tempLTDO = new LayoutTrackDrawingOptions(draftingPresetName);
        tempLTDO.setMainBallastColor(Color.BLACK);
        tempLTDO.setMainBallastWidth(0);
        tempLTDO.setMainBlockLineDashPercentageX10(0);
        tempLTDO.setMainBlockLineWidth(4);
        tempLTDO.setMainRailColor(Color.BLACK);
        tempLTDO.setMainRailCount(2);
        tempLTDO.setMainRailGap(2);
        tempLTDO.setMainRailWidth(2);
        tempLTDO.setMainTieColor(Color.BLACK);
        tempLTDO.setMainTieGap(0);
        tempLTDO.setMainTieLength(0);
        tempLTDO.setMainTieWidth(0);
        tempLTDO.setSideBallastColor(Color.BLACK);
        tempLTDO.setSideBallastWidth(0);
        tempLTDO.setSideBlockLineDashPercentageX10(0);
        tempLTDO.setSideBlockLineWidth(4);
        tempLTDO.setSideRailColor(Color.BLACK);
        tempLTDO.setSideRailCount(2);
        tempLTDO.setSideRailGap(3);
        tempLTDO.setSideRailWidth(1);
        tempLTDO.setSideTieColor(Color.BLACK);
        tempLTDO.setSideTieGap(0);
        tempLTDO.setSideTieLength(0);
        tempLTDO.setSideTieWidth(0);
        ltdoList.add(tempLTDO);

        tempLTDO = new LayoutTrackDrawingOptions(realisticPresetName);
        tempLTDO.setMainBallastColor(Color.decode("#A0A0A0"));
        tempLTDO.setMainBallastWidth(13);
        tempLTDO.setMainBlockLineDashPercentageX10(0);
        tempLTDO.setMainBlockLineWidth(2);
        tempLTDO.setMainRailColor(Color.decode("#C0C0C0"));
        tempLTDO.setMainRailCount(2);
        tempLTDO.setMainRailGap(3);
        tempLTDO.setMainRailWidth(2);
        tempLTDO.setMainTieColor(Color.decode("#E0E0E0"));
        tempLTDO.setMainTieGap(7);
        tempLTDO.setMainTieLength(11);
        tempLTDO.setMainTieWidth(1);
        tempLTDO.setSideBallastColor(Color.GRAY);
        tempLTDO.setSideBallastWidth(11);
        tempLTDO.setSideBlockLineDashPercentageX10(0);
        tempLTDO.setSideBlockLineWidth(2);
        tempLTDO.setSideRailColor(Color.decode("#D07060"));
        tempLTDO.setSideRailCount(2);
        tempLTDO.setSideRailGap(3);
        tempLTDO.setSideRailWidth(1);
        tempLTDO.setSideTieColor(Color.decode("#382018"));
        tempLTDO.setSideTieGap(6);
        tempLTDO.setSideTieLength(9);
        tempLTDO.setSideTieWidth(3);
        ltdoList.add(tempLTDO);

        tempLTDO = new LayoutTrackDrawingOptions(realisticOhPresetName);
        tempLTDO.setMainBallastColor(Color.decode("#A0A0A0"));
        tempLTDO.setMainBallastWidth(26);
        tempLTDO.setMainBlockLineDashPercentageX10(0);
        tempLTDO.setMainBlockLineWidth(4);
        tempLTDO.setMainRailColor(Color.LIGHT_GRAY);
        tempLTDO.setMainRailCount(3);
        tempLTDO.setMainRailGap(6);
        tempLTDO.setMainRailWidth(2);
        tempLTDO.setMainTieColor(Color.decode("#E0E0E0"));
        tempLTDO.setMainTieGap(14);
        tempLTDO.setMainTieLength(22);
        tempLTDO.setMainTieWidth(2);
        tempLTDO.setSideBallastColor(Color.GRAY);
        tempLTDO.setSideBallastWidth(22);
        tempLTDO.setSideBlockLineDashPercentageX10(0);
        tempLTDO.setSideBlockLineWidth(4);
        tempLTDO.setSideRailColor(Color.decode("#D07060"));
        tempLTDO.setSideRailCount(3);
        tempLTDO.setSideRailGap(6);
        tempLTDO.setSideRailWidth(2);
        tempLTDO.setSideTieColor(Color.decode("#382018"));
        tempLTDO.setSideTieGap(12);
        tempLTDO.setSideTieLength(18);
        tempLTDO.setSideTieWidth(6);
        ltdoList.add(tempLTDO);

        tempLTDO = new LayoutTrackDrawingOptions(british70sPresetName);
        tempLTDO.setMainBallastColor(Color.BLACK);
        tempLTDO.setMainBallastWidth(5);
        tempLTDO.setMainBlockLineDashPercentageX10(5);
        tempLTDO.setMainBlockLineWidth(4);
        tempLTDO.setMainRailColor(Color.BLACK);
        tempLTDO.setMainRailCount(0);
        tempLTDO.setMainRailGap(0);
        tempLTDO.setMainRailWidth(2);
        tempLTDO.setMainTieColor(Color.BLACK);
        tempLTDO.setMainTieGap(0);
        tempLTDO.setMainTieLength(0);
        tempLTDO.setMainTieWidth(0);
        tempLTDO.setSideBallastColor(Color.BLACK);
        tempLTDO.setSideBallastWidth(3);
        tempLTDO.setSideBlockLineDashPercentageX10(5);
        tempLTDO.setSideBlockLineWidth(2);
        tempLTDO.setSideRailColor(Color.BLACK);
        tempLTDO.setSideRailCount(0);
        tempLTDO.setSideRailGap(0);
        tempLTDO.setSideRailWidth(1);
        tempLTDO.setSideTieColor(Color.BLACK);
        tempLTDO.setSideTieGap(0);
        tempLTDO.setSideTieLength(0);
        tempLTDO.setSideTieWidth(0);
        ltdoList.add(tempLTDO);

        ltdoList.add(ltdOptions);

        presetsComboBox.removeAllItems();
        ltdoList.forEach((ltdo) -> {
            presetsComboBox.addItem(ltdo.getName());
        });
        presetsComboBox.setSelectedItem(leLTDOptions.getName());
    }   // definePresets

    /*===========================*\
    |* local (private) variables *|
    \*===========================*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JLabel ballastWidthLabel;
    private javax.swing.JLabel blockLineDashPercentageX10Label;
    private javax.swing.JLabel blockLineWidthLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton mainBallastColorButton;
    private javax.swing.JSpinner mainBallastWidthSpinner;
    private javax.swing.JSpinner mainBlockLineDashPercentageX10Spinner;
    private javax.swing.JSpinner mainBlockLineWidthSpinner;
    private javax.swing.JButton mainRailColorButton;
    private javax.swing.JSpinner mainRailCountSpinner;
    private javax.swing.JSpinner mainRailGapSpinner;
    private javax.swing.JSpinner mainRailWidthSpinner;
    private javax.swing.JButton mainTieColorButton;
    private javax.swing.JSpinner mainTieGapSpinner;
    private javax.swing.JSpinner mainTieLengthSpinner;
    private javax.swing.JSpinner mainTieWidthSpinner;
    private javax.swing.JLabel mainlineLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel optionLabel;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JComboBox<String> presetsComboBox;
    private javax.swing.JLabel presetsLabel;
    private javax.swing.JLabel railCountLabel;
    private javax.swing.JLabel railGapLabel;
    private javax.swing.JLabel railWidthLabel;
    private javax.swing.JButton sideBallastColorButton;
    private javax.swing.JSpinner sideBallastWidthSpinner;
    private javax.swing.JSpinner sideBlockLineDashPercentageX10Spinner;
    private javax.swing.JSpinner sideBlockLineWidthSpinner;
    private javax.swing.JButton sideRailColorButton;
    private javax.swing.JSpinner sideRailCountSpinner;
    private javax.swing.JSpinner sideRailGapSpinner;
    private javax.swing.JSpinner sideRailWidthSpinner;
    private javax.swing.JButton sideTieColorButton;
    private javax.swing.JSpinner sideTieGapSpinner;
    private javax.swing.JSpinner sideTieLengthSpinner;
    private javax.swing.JSpinner sideTieWidthSpinner;
    private javax.swing.JLabel sidelineLabel;
    private javax.swing.JLabel tieGapLabel;
    private javax.swing.JLabel tieLengthLabel;
    private javax.swing.JLabel tieWidthLabel;
    // End of variables declaration//GEN-END:variables

    /*====================*\
    |* initialize logging *|
    \*====================*/
    private transient final static Logger log
            = LoggerFactory.getLogger(LayoutTrackDrawingOptionsDialog.class);
}
