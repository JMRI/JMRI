# LogixTableBundle.properties
#
# Default properties for the jmri.jmrit.LogixTableAction GUI elements

LogixSystemNameHint = Enter system name for new Logix, e.g. IX13
LogixUserNameHint = Enter user name for new Logix, e.g. Signal 2 Control
LogixUserNameHint2 = Enter new user name for Logix, e.g. Signal 2 Control
AddLogixMessage1 = Please enter system name and user name, then
AddLogixMessage2 = click [Create new], then add Conditionals.
CopyLogixMessage1 = Please enter System Name and User Name\n
CopyLogixMessage2 = of target Logix, then click [Copy]
ConditionalSystemName = Conditional System Name
ConditionalUserName = Conditional User Name
ConditionalUserNameHint = Enter User Name for Conditional, e.g. 'Signal 2 Red'
SuppressWithDisable = Suppress Save Reminders
EnableAll       = Enable All Logix
DisableAll      = Disable All Logix
UseMultiPick = Use Traditional Pick Lists
UseSinglePick = Use Single Pick Lists
UseComboNameBoxes = Use Combo Name Boxes
SinglePickFrame = Single Pick List

ColumnLabelRow = Row
ColumnLabelOperator = Operator
ColumnLabelNot = Negation (Not)
ColumnLabelDescription = State Variable Description
ColumnLabelState = State
ColumnLabelTriggersCalculation = Trigger Calculation

# Copied from BeanTableBundle.properties
ColumnState = State

NodeEditTitle   = Active Node Edit
NodeEditText = Another node cannot be selected while editing a node. Select Cancel or Update to complete the edit.
# Route Table and Signal Group Table
Toggle = Toggle

# Logix Browser
BrowserButton = Browse
BrowserTitle = Conditional Browser
BrowserLogix = Logix:
BrowserIF = IF
BrowserTHEN = THEN
BrowserAntecedent = Antecedent:
BrowserNoAction = <no action defined>
BrowserEnabled = (Enabled)
BrowserDisabled = (Disabled)

# Select Conditional Reference
SelectLogix = Select Logix
SelectConditional = Select Conditional
SelectFirstRow = Select a Conditional...

LabelRefTitle = Conditional Variable References
LabelRefTarget = Target
LabelRefSource = Referenced by

# Maintenance Dialog
ElementName = Element Name
ElementNameHint = Enter the System or User name of an element to find where it is referenced.
ReferenceButton = Get References
FindOrphans = Find Orphaned Items
EmptyConditionals = Find Empty Conditionals
CrossReference = Find Cross References
DisplayWhereUsed = Conditional Variable References

TitleAddLogix = Add Logix
TitleCopyLogix = Copy Logix
TitleEditLogix = Edit Logix
TitleEditConditional = Edit Conditional
TitleEditAction = Edit Action
TitleEditVariable = Edit Variable
TitleLogicalExpression = Logical Expression
TitleAntecedentPhrase = Antecedent Variable
TitleConsequentPhrase = Consequent Action
TitleAction = Actions

TitlePickList = Pick Lists
OpenPickListTables = Open PickList Tables

ConditionalTableTitle = Conditionals (in Order of Calculation)
NotApplicableAbbreviation = N/A
ActionTableTitle = Consequent Actions (the 'then' part)
StateVariableTableTitle = Antecedent Variables (the 'if' part)
triggerOnChange = Execute actions on change of state only
triggerOnAny    = Execute Actions whenever triggered
OnTriggerToTrue = When Triggered True
OnTriggerToFalse= When Triggered False
OnTrigger       = Whenever Triggered
OnChangeToTrue  = On Change To True
OnChangeToFalse = On Change To False
OnChange = On Change
FromFile = from file,
After = , after
Seconds = seconds
to = to
onWarrant = on Warrant
onBlock = in Block
onPath  = on Path
ValueInMemory = (Memory's Value)
ExecJythonCmd = Jython Command

True = True
False = False
LogicAND = AND
LogicOR = OR
LogicNOT = NOT
LogicMixed = Mixed

Trigger = Trigger
# Conditional TreeView
# Labels
LabelConditionalActions = Conditional:
LabelAntecedentActions = Antecedent:
LabelLogicTypeActions = Logic Type:
LabelTriggerModeActions = Trigger Mode:
LabelVariablesActions = Variables:
LabelVariableActions = Variable:
LabelActionsActions = Actions:
LabelActionActions = Action:
LabelMove = Move:
LabelAntecedentHeader = Antecedent Logic

# Nodes
NodeVariablesExpanded = Variables:
NodeVariablesCollapsed = Variables
NodeActions = Actions

# Buttons
ButtonAdd = Add
# ButtonEdit = Edit
ButtonUp = Up
ButtonDown = Down
ButtonDelete = Delete
ButtonSave = Save
ButtonHelp = Help
ButtonToggle = Toggle
ButtonCheck = Check State

# Hints
HintAddButton = Add a new item
HintEditButton = Edit the selected item
HintUpButton = Move the selected item up one row
HintDownButton = Move the selected item down one row
HintDeleteButton = Delete the selected item
HintDoneButton = Close the conditional edit and return to the Logix table
HintSaveButton = Save the add/edit changes and close
HintCancelButton = Close without saving the add/edit changes
HintHelpButton = Open a help window with detail Antecedent instructions
HintCheckButton = Update the state
HintToggleButton = Toggle the Action trigger mode

# Dialog Titles
TitleEditTypeDialog = Edit Logic Type
TitleEditConditionalDialog = Edit Conditional Name
TitleEditAntecedentDialog = Edit Antecedent Logic

LabelLogicType = Logic Operator
TypeLogicHint = Choose logic operator joining state variables for the antecedent ('if' part) of this conditional
LabelAntecedent = Antecedent Expression (the 'if' part of the Conditional)
LabelAntecedentHint = Insert parenthesis so the statement satisfies the logic you want
LogicHelpText1 = Mixing AND's and OR's may introduce ambiguous evaluations. The antecedent\n
LogicHelpText2 = statement is evaluated from left to right, which corresponds to computing\n
LogicHelpText3 = the innermost variable on the left to the outermost variable on the right.\n
LogicHelpText4 = To modify this order of evaluation, please insert parenthesis to indicate the\n
LogicHelpText5 = logic you want. You may also modify the operators to use. The evaluation\n
LogicHelpText6 = logic of 'Mixed' mode is the content of the antecedent field and not the\n
LogicHelpText7 = operators shown in the rows of the state variable table.

LogixCreateButtonHint = Press to create a new Logix
DoneButtonHint = Press to save any user name changes and return to Logix Table
DeleteLogixButtonHint = Press to delete this Logix and all its Conditionals
CancelLogixButtonHint = Press to return to Logix Table without any changes
NewConditionalButton = New Conditional
NewConditionalButtonHint = Press for window to create a new Conditional
CalculateButton = Calculate
CalculateButtonHint = Press to calculate Conditional states without action
ReorderButton = Reorder
ReorderButtonHint = Press then click in right column in order desired
AddVariableButton = Add State Variable
AddVariableButtonHint = Press to add a new row in State Variable table
CheckVariableButton = Check State Variables
CheckVariableButtonHint = Press to evaluate current state of the Variables
UpdateConditionalButton = Update Conditional
UpdateConditionalButtonHint = Press to keep changes and return to Edit Logix
CancelConditionalButtonHint = Press to return to Edit Logix without any changes
DeleteConditionalButton = Delete Conditional
DeleteConditionalButtonHint = Press to delete this Conditional and return to Edit Logix
addActionButton = Add Action
addActionButtonHint = Press to add a new row to Action Table
UpdateButtonHint = Press to keep changes and return to Edit Conditional
CancelButtonHint = Press to return to Edit Conditional without any changes
DeleteButtonHint = Press to delete and return to Edit Conditional

NameHintTurnout = Enter Name (system or user) for Turnout (e.g. LT12)
NameHintSensor = Enter Name (system or user) for Sensor (e.g. CS2)
NameHintSignal = Enter Name (system or user) for Signal Head (e.g. IH34)
NameHintSignalMast = Enter Name (system or user) for Signal Mast and hit Enter/Return to load aspects
NameHintLight = Enter Name (system or user) for Light (e.g. CL21)
NameHintRoute = Enter name (system or user) of Route
NameHintWarrant = Enter name (system or user) of Warrant
NameHintMemory = Enter name (system or user) of Memory
NameHintLogix = Enter name (system or user) of Logix
NameHintOBlock = Enter name (system or user) of OBlock
NameHintEntryExit = Enter name of Entry/Exit Pair
CompareHintMemory = Select an operator to compare memory values
CompareTypeHint = Select either a literal value or the value in a memory location
NameHintConditional = Enter System Name for Conditional (or User Name if in this Logix)
TurnoutSetHint = Select Closed or Thrown depending upon how Turnout is to be set
SensorSetHint = Select Active or Inactive depending upon how Sensor is to be set
LightSetHint = Select On or Off depending upon how Light is to be set
SignalSetHint = Select Signal Head Appearance to set
SignalMastSetHint = Select Signal Mast Aspect to set and hit Enter/Return to load aspects
LockSetHint = Select Lock or Unlock
DataHintDelayedSensor = Enter time (seconds) to wait before setting sensor
DataHintDelayedTurnout = Enter time (seconds) to wait before setting turnout
DataHintMemory = Enter Memory name whose value is compared
DataHintValue = Enter Value to be compared
DataHintSound = Enter name of sound file to be played
DataHintScript = Enter name of script to be run
SetHintSound = Click for a file selection dialog for choosing a sound file
SetHintScript = Click for a file selection dialog for choosing a script file
DataHintTime = Enter time (hh:mm) for a 24-hour clock
NameHintFromMemory = Enter name (system or user) of Memory to be copied from
DataHintToMemory = Enter name (system or user) of Memory to receive the copied value
DataHintLightIntensity = Enter intensity percentage as an integer 0 to 100.
DataHintLightTransitionTime = Enter number of fast clock minutes to transition between 0% and 100%.
VariableTypeHint = Select type of state variable for Conditional to test
VariableOperHint = Select AND or OR for the operator, default is AND
VariableNotHint = Check to indicate that this variable is to be negated, default is unchecked
VariableTriggerHint = Check to indicate that this variable is used to trigger actions, default is checked
VariableStateHint = Select the state of the variable to test
VariableLogixHint = Select the Logix that contains the conditional to be checked
VariableConditionalHint = Select the desired condtional
VariableAspectHint = Select the Aspect of the Signal to test
ActionItemHint = Select action item for Conditional to execute
ActionOptionHint = Select when action should occur
SetHintAudio = Select action to perform
NameHintAudio = Enter Name (system or user) for AudioSource (e.g. IAS2)
SetHintJythonCmd = Enter Jython command text
DataHintTrainControl = Select an option to control the train
DataHintTrainId = Enter a train ID from the Roster - or enter a DCC address indicating long or short e.g. 1234(L) or 10(S)
DataHintTrainName = Enter a name for the train
DataHintBlockValue = Enter a value to be set into the block
DataHintThrottleFactor = Enter a decimal number for the throttle setting ratio.
BlockPathsSetHint = Select the path to use
LabelTrainId = Train ID or Address
LabelTrainName = Train Name
LabelThrottleFactor = Throttle Adjustment Factor
LabelBlockValue = Block Value

PromptLoadMastName = (Type Signal Mast name in the System/User Name field and hit Enter)
PromptLoadHeadName = (Type Signal Head name in the System/User Name field and hit Enter)

# Buttons used in multiple jmri.* packages, must stay here for older Logix .rb method
ButtonFirst = First
ButtonNext = Next
ReorderMessage = Please press First, then Next, Next,... in desired order.
ButtonMove = Move
ConfirmTitle = Question
ConfirmLogixDelete = Are you sure you want to delete Logix "{0}"?
ConfirmLogixDuplicate = Logix "{0}" already exists. Do you want to copy\nthe Conditionals of Logix "{1}" into "{0}"?
NameConditionalCopy = Rename the copy of Conditional "{0}" ({1})\nin Logix {2} being copied into Logix "{3}" ({4}).\nPress Cancel if you don't want to copy this conditional.
ConfirmIndirectReference = Press "YES" if at run time Memory location "{0}" will contain a valid item name for this action.\nPress "NO" if you want to enter the item name directly.\nPress "CANCEL" if you want to suppress this warning.\n

# Variable State combo box states used in jmri.implementation.DefaultConditionalAction
TurnoutUnlock = Unlock
TurnoutLock = Lock
LightOn = On
LightOff = Off
StateMemoryEquals = (case sensitive) Value
StateMemoryEqualsInsensitive = (case insensitive) Value
StateMemoryCompare = (case sensitive) Memory
StateMemoryCompareInsensitive = (case insensitive) Memory

# the following (except Lit) were replaced by SignalHeadStateRed etc. in NBB
StateSignalHeadLit = Lit

StateSignalMastLit = Signal Mast Lit
StateSignalMastHeld = Signal Mast Held
StateRouteFree = Route Free
stateRouteOccupied = Route Occupied
StateRouteReserved = Route Allocated
StateRouteIsSet    = Route Set
StateTrainRunning  = Train Running

# Display Description of state variable
TypeSensorActive = Sensor Active
TypeSensorInactive = Sensor Inactive
TypeTurnoutThrown = Turnout Thrown
TypeTurnoutClosed = Turnout Closed
TypeConditionalTrue = Conditional True
TypeConditionalFalse = Conditional False
TypeLightOn = Light On
TypeLightOff = Light Off
TypeMemoryEquals = Memory Compare to Value, Case Sensitive
TypeMemoryEqualsInsensitive = Memory Compare to Value, Case Insensitive
TypeMemoryCompare = Memory Compare to Memory, Case Sensitive
TypeMemoryCompareInsensitive = Memory Compare to Memory, Case Insensitive)
TypeFastClockRange = Fast Clock Range
TypeSignalHeadRed = Signal Head Red
TypeSignalHeadYellow = Signal Head Yellow
TypeSignalHeadGreen = Signal Head Green
TypeSignalHeadDark = Signal Head Dark
TypeSignalHeadFlashRed = Signal Head Flashing Red
TypeSignalHeadFlashYellow = Signal Head Flashing Yellow
TypeSignalHeadFlashGreen = Signal Head Flashing Green
TypeSignalHeadLit = Signal Head Lit
TypeSignalHeadHeld = Signal Head Held
TypeSignalHeadLunar = Signal Head Lunar
TypeSignalHeadFlashLunar = Signal Head Flashing Lunar
TypeWarrantRouteFree    = Free
TypeWarrantRouteOccupied = Occupied
TypeWarrantRouteAllocated = Allocated
TypeRouteIsSet  = Set
TypeTrainRunning = Running
TypeSignalMastAspectEquals = Signal Mast Aspect Equals
TypeSignalHeadAspectEquals = Signal Head Appearance equals
TypeSignalMastLit = Signal Mast Lit
TypeSignalMastHeld = Signal Mast Held
TypeEntryExitActive = Active
TypeEntryExitInactive = Inactive

VariableOKMessage = All state variables are OK.
VariableErrorMessage = Error found, please correct and try again.
ActionOKMessage = All actions are OK.
NoActionMessage = A Condition requires at least one state variable and usually has at least one action.

FileButtonHint = Click to select a file from disk
LabelActionItem = Action Group
LabelActionType = Action Type
LabelVariableType = Variable Type
LabelVariableState = Variable State
LabelVariableAspect = Variable Aspect
LabelLiteralValue  = Literal Value
LabelMemoryValue  = Memory Value
LabelStartTime  = Start Time
LabelEndTime    = End Time
LabelCompareOp  = Comparison Operator
LabelCompareType  = Compare as
LabelActionOption = Change Option
LabelItemName   = System / User Name
LabelActionTurnout = Turnout Position
LabelActionSensor = Sensor State
LabelActionLight = Light State
LabelActionSignal = Signal Head Appearance
LabelSignalAspect = Signal Mast Aspect
LabelActionLock = Lock State
LabelActionFile = Set
LabelSelectFile = Select File
LabelActionText = Action Data
LabelActionDescription = Action Description
LabelActionAudio = Audio Action
LabelDelayTime  = Delay Time
LabelSetTime    = Set Time
LabelSetFile    = File Name
LabelScriptCommand  = Script Command
LabelLightIntensity = Light Intensity
LabelTransitionTime = Transition Time
LabelMemoryLocation = Memory Name
LabelValue      = Value
LabelBlockPaths = Block Path
LabelBlockStatus = Block Status
LabelControlTrain = Control Command

ActionNone = None
ActionSetTurnout = Set Turnout
ActionSetSignal = Set Signal Head Appearance
ActionSetSignalHeld = Set Signal Head Held
ActionClearSignalHeld = Clear Signal Head Held
ActionSetSignalDark = Set Signal Head Dark
ActionSetSignalLit = Set Signal Head Lit
ActionTriggerRoute = Trigger Route
ActionSetSensor = Set Sensor
ActionDelayedSensor = Delayed Set Sensor
ActionResetDelayedSensor = Reset Delayed Set Sensor
ActionCancelSensorTimers = Cancel Timers for Sensor
ActionDelayedTurnout = Delayed Set Turnout
ActionResetDelayedTurnout = Reset Delayed Set Turnout
ActionCancelTurnoutTimers = Cancel Timers for Turnout
ActionSetLight = Set Light
ActionSetLightIntensity = Set Light Intensity
ActionSetLightTransitionTime = Set Light Transition Time
ActionSetMemory = Set Memory
ActionCopyMemory = Copy Memory To Memory
ActionEnableLogix = Enable Logix
ActionDisableLogix = Disable Logix
ActionPlaySound = Play Sound File
ActionRunScript = Run Script
ActionTurnoutLock = Turnout Lock
ActionSetFastClockTime = Set Fast Clock Time
ActionStartFastClock = Start Fast Clock
ActionStopFastClock = Stop Fast Clock
ActionAllocateWarrant = Allocate Warrant Route
ActionDeallocateWarrant = Deallocate Warrant
ActionSetWarrantTurnouts = Set Route Turnouts
ActionAutoRunWarrant    = Auto Run Train
ActionManualRunWarrant  = Manually Run Train
ActionControlTrain      = Control Auto Train
ActionSetTrainId        = Set Train ID
ActionSetTrainName      = Set Train Name
ActionSetSignalMastAspect = Set Signal Mast Aspect
ActionSetThrottleFactor = Set Throttle Factor
ActionSetSignalMastHeld = Set Signal Mast Held
ActionClearSignalMastHeld = Clear Signal Mast Held
ActionSetSignalMastDark = Set Signal Mast Dark
ActionClearSignalMastDark = Clear Signal Mast Dark
ActionSetBlockValue     = Set Block Value
ActionSetBlockError     = Set Block Error
ActionClearBlockError   = Clear Block Error
ActionDeallocateBlock   = Deallocate Block
ActionSetBlockOutOfService = Set Block OutOfService
ActionBlockInService    = Clear Block OutOfService

ActionTypeHint = Select type of action, or select None if no action is needed.

ActionControlAudio = Control Audio object
ActionJythonCommand = Execute Jython Command

AudioSourcePlay = Play
AudioSourceStop = Stop
AudioSourcePlayToggle = Toggle Play
AudioSourcePause = Pause
AudioSourceResume = Resume
AudioSourcePauseToggle = Toggle Pause
AudioSourceRewind = Rewind
AudioSourceFadeIn = Fade-in
AudioSourceFadeOut = Fade-out
AudioResetPosition = Reset Position

WarrantHalt     = Halt
WarrantResume   = Resume
WarrantAbort    = Abort

# Bean names used in multiple jmri.* packages
# in LogixTableAction these are fetched from jmri.NamedBeanBundle.props
# Watch out for older Logix .rbx method
WarrantRoute = Warrant Route
OBlockStatus = OBlock Status
OBlockStatusHint = Select an OBlock Status to Test
Script  = Script
Other   = Other
EntryExit = Entry Exit

VarStateDescrpt = {0} "{1}" state is {2}
SignalHeadStateDescrpt = {0} "{1}" Appearance is {2}
SignalMastStateDescrpt = {0} "{1}" Aspect is {2}
MemoryValueDescrpt = {0} "{1}" {2} value "{3}"
MemoryCompareDescrpt = {0} "{1}" {2} {0} "{3}"
FastClockDescrpt = {0} range from {1} to {2}
CopyOf = Copy of {0}

LessThan        = Less Than
LessOrEqual     = Less Than Or Equal
Equal           = Equal
GreaterOrEqual  = Greater Than Or Equal
GreaterThan     = Greater Than

Error1 = A Logix with this system name already exists.\nPlease change system name and try again.
Error3 = A Logix with this user name already exists.\nPlease change user name and try again.
Error5 = Cannot find a Logix with that system name.
Error6 = New user name is already in use. Cannot update this Logix.\nPlease change user name and try again.
Error4 = The following error occurred when activating this Logix.\n
Error7 = \nPlease correct the reference or delete the offending Conditional or Logix.
Error8 = Invalid system name, or system name not entered.\nPlease enter a valid Logix system name (e.g. IX3) and try again.
Error9  = Enter a decimal number or a Memory variable containing\na decimal number for the number of seconds to {0}.
Error10 = New user name is already in use. Cannot update this Conditional.\nPlease change user name and try again.
Error11 = Conditional "{0}" ({1}) is a Conditional Variable in the Conditional,\n"{2}" ({3}), of Logix, "{4}" ({5}).\nPlease remove that variable first.
Error20 = The name "{0}" does not match an existing conditional.\nPlease enter a valid conditional system name, or the user name of a conditional in this logix.
Error21 = "{1}" is not a valid appearance for Signal Head "{0}".
Error22 = The name "{0}" does not match an existing "{1}".\nPlease correct or create as required, and try again.
Error23 = Set Delayed Sensor action
Error24 = Memory variable "{0}" currently does not contain a numeric value.\nWhen triggered the action cannot be performed until this value is corrected!
Error26 = Invalid time entry "{0}"\nTime must be entered in hh:mm format (e.g. 01:30, 16:00)\nfor a 24-hour clock. Please reenter in correct format, and try again.
Error27 = Reset Delayed Set Sensor action
Error29 = Set Light Transition Time
Error30 = Duplicate user name error. Entered user name is already in use by Conditional "{0}".\nPlease enter a different user name from others in this table.
Error31 = Copy of Logix "{0}" in progress.  Please complete and try again.
Error32 = Cannot edit two Logixs at the same time. Please complete edit of Logix "{0}" and try again.
Error34 = Cannot edit two Conditionals at the same time. Please complete edit of Conditional "{0}" and try again.
Error35 = Edit Conditional(s) in progress. Please complete edit of any Conditionals and try again.
Error38 = {0} is an unreasonable amount to {1}\nPlease enter a positive percentage, and try again.
Error39 = Set Delayed Turnout action
Error40 = Light - {0} - does not support transition time.\nPlease enter a light with Transition Time or change action type, and try again.
Error41 = Reset Delayed Set Turnout action
Error42 = Set Light Intensity action
Error43 = Enter an integer (digits only) or a Memory variable containing\nan integer to Set Light Intensity.
Error45 = Light - {0} - does not have variable intensity.\nPlease enter a light with variable intensity or change action type, and try again.
Error46 = At least two Actions are needed to reorder Actions.
Error47 = Edit of State Variable in progress. Please complete and try again.
Error48 = Edit of Action in progress. Please complete edit and try again.
Error49 = LRoute Initializer antecedent cannot be edited (The actions may be edited)
Error50 = Variable and/or Action edits in progress.\nPlease complete edits and try again.
Error51 = At least two Variables are needed to reorder Variables.
ErrorAppearance = Select an Appearance. You must hit the Enter/Return key\nafter entering a name with the cursor in the name field.
ErrorAspect = Select an Aspect.  You may need to hit the Enter/Return key\nwith the cursor in the name field.
ErrorVariableType = Select a Variable Type or press [Cancel].
ErrorVariableState = Select a state for this variable.

ParseError1 = Could not find expected Left argument < {0} >
ParseError2 = Could not find expected operator. < {0} >
ParseError3 = Could not find expected Right argument. < {0} >
ParseError4 = Antecedent parsing error: Unexpected character found: < {0} >
ParseError5 = Antecedent parsing error: All {0} rows must be used. Row {1} is missing.
ParseError6 = Exception thrown while parsing antecedent\n
ParseError7 = Unmatched parenthesis, missing < {0} >.
ParseError8 = \nIf the above message is 'String index out of range:', the following number is the position in the antecedent where the error occurred.
ParseError9 = Unexpected operator or characters < {0} >

ButtonDisabled = Continue Disabled
ButtonEnabled = Continue Enabled
Warn1 = The last Conditional has been deleted from this Logix.
Warn2 = A Logix must have at least one Conditional to do anything useful.
Warn3 = The last State Variable has been deleted from this Conditional.\nA Conditional must have at least one State Variable to do anything useful.
Warn5 = The Conditional {0} ({1}) has no State Variables.\nA Conditional must have at least one State Variable to do anything useful.
Warn6 = A Memory action cannot be referred to indirectly through a memory location.
# Warn7 is inserted as {2} in Warn6 when the item being warned about
# is a Signal Head, or otherwise has a specific value as part of the trigger.
Warn7 = to or from {0}
Warn8 = Conditionals in Logix "{0}" ({1}) cannot be edited.\nGo to the Sensor Group Table to edit sensor groups.
Warn9 = Conditions exist that could result in a logic loop. \n The following both trigger this Logix and are changed by it:\n
Warn10 = was disabled as requested.\nPlease remember to enable it later.
Warn11 = \nYou may delete Conditional "{0}" ({1})\nor edit it from the template window where it was created.
Warn12 = Complete other Variable edits before deleting a Variable.
Warn13 = Complete other Action edits before deleting an Action.
Warn14 = Complete other Action edits before re-ordering the Action rows.
Warn15 = The View mode cannot be changed while there is an active edit.
makeSelection = Please select an action type.
DeleteLogix = When deleting the Logix
