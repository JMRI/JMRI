# conditional.ConditionalBundle_ja_JP.properties
# based on a COPY from LogixTableBundle.properties, cleaned up 201803
#
# Japanese properties for the jmri.jmrit.conditional GUI elements
# Translated by Sakae Akanuma <sakaeakanuma@gmail.com>

LogixUserNameHint2 = Enter new \u30e6\u30fc\u30b6\u30fc\u540d for Logix\u2122, e.g. Signal 2 Control
ConditionalSystemName = Conditional \u30b7\u30b9\u30c6\u30e0\u540d
ConditionalUserName = Conditional \u30e6\u30fc\u30b6\u30fc\u540d
ConditionalUserNameHint = Enter \u30e6\u30fc\u30b6\u30fc\u540d for Conditional, e.g. Signal 2 \u8d64
SinglePickFrame = Single Pick List

ColumnLabelRow = Row
ColumnLabelOperator = Oper
ColumnLabelNot = Neg
ColumnLabelDescription = State Variable Description
ColumnLabelTriggersCalculation = Trigger Calculation

# logix node edit pane items
NodeEditTitle   = Active Node Edit
NodeEditText = Another node cannot be selected while editing a node. Select Cancel or Update to complete the edit.

# Select Conditional Reference
SelectLogix = Select Logix
SelectConditional = Select Conditional
SelectFirstRow = Select a Conditional...

TitleEditLogix = Logix \u7de8\u96c6
TitleEditConditional = Edit Conditional
TitleEditAction = Edit Action
TitleEditVariable = Edit Variable
TitleLogicalExpression = Logical Expression
TitleAntecedentPhrase = Antecedent Variable
TitleConsequentPhrase = Consequent Action 
TitleAction = Actions
# next key both in LogixTableAction and ConditionalEdit
TitlePickList = Pick Lists

ConditionalTableTitle = Conditionals (in Order of Calculation)
ActionTableTitle = Consequent Actions (the 'then' part) 
StateVariableTableTitle = Antecedent Variables (the 'if' part)
triggerOnChange = Execute Actions on change of state only
triggerOnAny    = Execute Actions whenever triggered
OnTriggerToTrue = When Triggered True
OnTriggerToFalse= When Triggered False
OnTrigger       = Whenever Triggered
OnChangeToTrue  = On Change To True
OnChangeToFalse = On Change To False
OnChange = On Change
FromFile = from file,
After = , after
Seconds = \u79d2
to = to
onWarrant = on Warrant
onBlock = in Block
onPath  = on Path
ValueInMemory = (Memory''s Value)
ExecJythonCmd = Jython Command

# Conditional TreeView
# Labels
LabelConditionalActions = Conditional:
LabelAntecedentActions = Antecedent:
LabelLogicTypeActions = Logic Type:
LabelTriggerModeActions = Trigger Mode:
LabelVariablesActions = Variables:
LabelVariableActions = Variable:
LabelActionsActions = Actions:
LabelActionActions = Action:
LabelMove = Move:
LabelAntecedentHeader = Antecedent Logic

# Nodes
NodeVariablesExpanded = Variables:
NodeVariablesCollapsed = Variables
NodeActions = Actions

# Hints
HintAddButton = Add a new item
HintEditButton = Edit the selected item
HintUpButton = Move the selected item up one row
HintDownButton = Move the selected item down one row
HintDeleteButton = Delete the selected item
HintDoneButton = Close the conditional edit and return to the Logix table
HintSaveButton = Save the add/edit changes and close
HintCancelButton = Close without saving the add/edit changes
HintHelpButton = Open a help window with detail Antecedent instructions
HintCheckButton = Update the state
HintToggleButton = Toggle the Action trigger mode

# Dialog Titles, not in use
TitleEditTypeDialog = Edit Logic Type
TitleEditConditionalDialog = Edit Conditional Name
TitleEditAntecedentDialog = Edit Antecedent Logic

# ConditionalHelpText
ConditionalHelpText1 = Mixing AND''s and OR''s may introduce ambiguous evaluations. The antecedent\n
ConditionalHelpText2 = statement is evaluated from left to right, which corresponds to computing\n
ConditionalHelpText3 = the innermost variable on the left to the outermost variable on the right.\n
ConditionalHelpText4 = To modify this order of evaluation, please insert parenthesis to indicate the\n
ConditionalHelpText5 = logic you want. You may also modify the operators to use. The evaluation\n
ConditionalHelpText6 = logic of 'Mixed' mode is the content of the antecedent field and not the\n
ConditionalHelpText7 = operators shown in the rows of the state variable table.

DoneButtonHint = Press to save any \u30e6\u30fc\u30b6\u30fc\u540d changes and return to Logix\u2122 Table
DeleteLogixButtonHint = Press to \u524a\u9664 this Logix\u2122 and all its Conditionals
NewConditionalButton = New Conditional
NewConditionalButtonHint = Press for window to create a new Conditional
CalculateButton = Calculate
CalculateButtonHint = Press to calculate Conditional states without action
ReorderButton = Reorder
ReorderButtonHint = Press then click in right column in order desired
AddVariableButton = \u8ffd\u52a0 State Variable
AddVariableButtonHint = Press to \u8ffd\u52a0 a new row in State Variable table
CheckVariableButton = Check State Variables
CheckVariableButtonHint = Press to evaluate current state of the Variables
UpdateConditionalButtonHint = Press to keep changes and return to Edit Logix\u2122
CancelConditionalButtonHint = Press to return to Edit Logix\u2122 without any changes
DeleteConditionalButton = \u524a\u9664 Conditional
DeleteConditionalButtonHint = Press to \u524a\u9664 this Conditional and return to Edit Logix\u2122
addActionButton = \u8ffd\u52a0 Action
addActionButtonHint = Press to \u8ffd\u52a0 a new row to Action Table
UpdateButtonHint = Press to keep changes and return to Edit Conditional
CancelButtonHint = Press to return to Edit Conditional without any changes
DeleteButtonHint = Press to \u524a\u9664 and return to Edit Conditional

NameHintTurnout = Enter Name (system or user) for \u5206\u5c90 (e.g. LT12)
NameHintSensor = Enter Name (system or user) for \u30bb\u30f3\u30b5\u30fc (e.g. CS2)
NameHintSignal = Enter Name (system or user) for Signal Head (e.g. IH34)
NameHintLight = Enter Name (system or user) for Light (e.g. CL21)
NameHintRoute = Enter Name (system or user) of Route to be triggered
NameHintMemory = Enter Name (system or user) of Memory
CompareHintMemory = Select an operator to compare Memory values
NameHintLogix = Enter Name (system or user) of Logix\u2122 to receive this Action
NameHintOBlock = Enter Name (system or user) of OBlock
NameHintEntryExit = Enter Name of Entry/Exit Pair
NameHintConditional = Enter \u30b7\u30b9\u30c6\u30e0\u540d for Conditional (or \u30e6\u30fc\u30b6\u30fc\u540d if in this Logix\u2122)
TurnoutSetHint = \u9078\u629e Closed or Thrown depending upon how \u5206\u5c90 is to be set
SensorSetHint = \u9078\u629e Active or Inactive depending upon how \u30bb\u30f3\u30b5\u30fc is to be set
LightSetHint = \u9078\u629e On or Off depending upon how Light is to be set
SignalSetHint = \u9078\u629e Signal Head Appearance to set
LockSetHint = \u9078\u629e Lock or Unlock
DataHintDelayedSensor = Enter time (seconds) to wait before setting \u30bb\u30f3\u30b5\u30fc
DataHintDelayedTurnout = Enter time (seconds) to wait before setting \u5206\u5c90
DataHintMemory = Enter value Memory is to be set to
DataHintSound = Enter name of sound file to be played
DataHintScript = Enter name of script to be run
SetHintSound = Click for a file \u9078\u629eion dialog for choosing a sound file
SetHintScript = Click for a file \u9078\u629eion dialog for choosing a script file
DataHintTime = Enter time (hh:mm) for a 24-hour clock
NameHintFromMemory = Enter name (system or user) of Memory to be copied from
DataHintToMemory = Enter name (system or user) of Memory to receive the copied value
DataHintLightIntensity = Enter intensity percentage as an integer 0 to 100.
DataHintLightTransitionTime = \u756a\u53f7 of fast clock minutes to transition between 0% and 100%\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044.

VariableTypeHint = \u4f7f\u7528\u3059\u308b\u72b6\u614b\u5909\u6570\u306e\u7a2e\u985e\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044\u3002
VariableOperHint = Select AND or OR for the operator, default is AND
VariableNotHint = Check to indicate that this variable is to be negated, default is unchecked
VariableTriggerHint = Check to indicate that this variable is used to trigger actions, default is checked
VariableStateHint = Select the state of the variable to test
VariableLogixHint = Select the Logix that contains the conditional to be checked
VariableConditionalHint = Select the desired conditional
VariableAspectHint = Select the Aspect of the Signal Mast to test
ActionItemHint = Select action item for Conditional to execute
ActionOptionHint = \u9078\u629e when action should occur
SetHintAudio = Select action to perform
NameHintAudio = Enter Name (system or user) for AudioSource (e.g. IAS2)
SetHintJythonCmd = Enter Jython command text
DataHintTrainControl = Select an option to control the train
DataHintTrainId = Enter a train ID from the Roster - or enter a DCC address indicating long or short e.g. 1234(L) or 10(S)
DataHintTrainName = Enter a name for the train
DataHintBlockValue = Enter a value to be set into the Block
DataHintThrottleFactor = Enter a decimal number for the Throttle setting ratio.
BlockPathsSetHint = Select the Path to use

PromptLoadMastName = (Type Signal Mast name in the System/User Name field and hit Enter to load its Aspects)
PromptLoadHeadName = (Type Signal Head name in the System/User Name field and hit Enter to load its Appearances)

# ConditionalEdit Reorder Table Buttons
ButtonFirst = \u5148\u982d
ButtonNext = \u6b21
ButtonMove = Move
ReorderMessage = Please press First, then Next, Next,... in desired order.

# Variable State combo box states used in jmri.implementation.DefaultConditionalAction
TurnoutUnlock = \u30a2\u30f3\u30ed\u30c3\u30af
TurnoutLock = \u30ed\u30c3\u30af
LightOn = On
LightOff = Off
StateMemoryEquals = (case sensitive) Value
StateMemoryEqualsInsensitive = (case insensitive) Value
StateMemoryCompare = (case sensitive) Memory
StateMemoryCompareInsensitive = (case insensitive) Memory

# Variable State combo box states used in jmri.implementation.DefaultConditionalAction
# here for ConditionalVariable via rbx:
StateSignalMastLit = Signal Mast Lit
StateSignalMastHeld = Signal Mast Held
StateRouteFree = Route Free
stateRouteOccupied = Route Occupied
StateRouteReserved = Route Allocated
StateRouteIsSet    = Route Set
StateTrainRunning  = Train Running

# Display Description of state variable
TypeSensorActive = \u30bb\u30f3\u30b5\u30fc\u52d5\u4f5c
TypeSensorInactive = \u30bb\u30f3\u30b5\u30fc\u975e\u52d5\u4f5c
TypeTurnoutThrown = \u5206\u5c90\u304c\u53cd\u4f4d
TypeTurnoutClosed = \u5206\u5c90\u304c\u5b9a\u4f4d
TypeConditionalTrue = \u6761\u4ef6\u304c\u771f
TypeConditionalFalse = \u6761\u4ef6\u304c\u507d
TypeLightOn = \u30e9\u30a4\u30c8\u70b9\u706f
TypeLightOff = \u30e9\u30a4\u30c8\u6d88\u706f
TypeMemoryEquals = \u30e1\u30e2\u30ea\u30fc\u540c\u5024 (Case Sensitive)
TypeMemoryEqualsInsensitive = Memory Compare to Value (Case Insensitive)
TypeMemoryCompare = Memory Compare to Memory (Case Sensitive)
TypeMemoryCompareInsensitive = Memory Compare to Memory (Case Insensitive)
TypeFastClockRange = \u30d5\u30a1\u30b9\u30c8\u30af\u30ed\u30c3\u30af\u7bc4\u56f2
# head test type strings picked up from jmri.NamedBeanBundle
#TypeSignalHeadRed = \u8d64\u4fe1\u53f7
#TypeSignalHeadYellow = \u9ec4\u4fe1\u53f7
#TypeSignalHeadGreen = \u7dd1\u4fe1\u53f7
#TypeSignalHeadDark = \u4fe1\u53f7\u6d88\u706f
#TypeSignalHeadFlashRed = \u8d64\u70b9\u6ec5\u4fe1\u53f7
#TypeSignalHeadFlashYellow = \u9ec4\u70b9\u6ec5\u4fe1\u53f7
#TypeSignalHeadFlashGreen = \u7dd1\u70b9\u6ec5\u4fe1\u53f7
#TypeSignalHeadLit = \u4fe1\u53f7\u70b9\u706f
#TypeSignalHeadHeld = \u4fe1\u53f7\u4fdd\u6301
#TypeSignalHeadLunar = Signal Head Lunar
#TypeSignalHeadFlashLunar = Signal Head Flashing Lunar
TypeWarrantRouteFree    = Free
TypeWarrantRouteOccupied = Occupied
TypeWarrantRouteAllocated = Allocated
TypeRouteIsSet = \u30bb\u30c3\u30c8
TypeTrainRunning = Running
TypeSignalMastAspectEquals = Signal Mast Aspect equals
TypeSignalHeadAspectEquals = Signal Head Appearance equals
#TypeSignalMastLit = Signal Mast Lit
#TypeSignalMastHeld = Signal Mast Held
TypeEntryExitActive = Active
TypeEntryExitInactive = Inactive

VariableOKMessage = \u3059\u3079\u3066\u306e\u72b6\u614b\u5909\u6570\u306f\u826f\u597d\u3067\u3059.
VariableErrorMessage = \u8aa4\u308a\u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\u4fee\u6b63\u3057\u3066\u304b\u3089\u3082\u3046\u4e00\u5ea6\u8a66\u3057\u3066\u4e0b\u3055\u3044\u3002
ActionOKMessage = \u3059\u3079\u3066\u306e\u52d5\u4f5c\u306f\u6b63\u5e38\u3067\u3059\u3002
NoActionMessage = \uff11\u3064\u306e\u72b6\u614b\u306f\u3001\u5c11\u306a\u304f\u3068\u3082\u3072\u3068\u3064\u306e\u72b6\u614b\u5909\u6570\u3068\u3001\u901a\u5e381\u3064\u4ee5\u4e0a\u306e\u52d5\u4f5c\u3092\u542b\u307f\u307e\u3059\u3002

FileButtonHint = Click to select a file from disk
LabelLogicType = \u30ed\u30b8\u30c3\u30af\u30aa\u30da\u30ec\u30fc\u30bf\u30fc
TypeLogicHint = Choose logic operator joining state variables for the antecedent ('if' part) of this conditional
LabelAntecedent = Antecedent Expression (the 'if' part of the Conditional)
LabelAntecedentHint = Insert parenthesis so the statement satisfies the logic you want
LabelTrainId = Train ID or Address
LabelTrainName = Train Name
LabelThrottleFactor = Throttle Adjustment Factor
LabelBlockValue = Block Value
LabelActionItem = Action Group
LabelActionType = \u52d5\u4f5c\u6642\u9593
LabelVariableType = \u5909\u5316\u6642\u9593
LabelVariableState = Variable State
LabelVariableAspect = Variable Aspect
LabelLiteralValue  = Literal Value
LabelMemoryValue  = \u30e1\u30e2\u30ea\u30fc\u306e\u5024
LabelStartTime  = \u958b\u59cb\u6642\u9593
LabelEndTime    = \u7d42\u4e86\u6642\u9593
LabelCompareOp  = \u4ee5\u4e0b\u306e\u5024\u3092\u6bd4\u8f03
LabelCompareType  = Compare as
LabelActionOption = \u30aa\u30d7\u30b7\u30e7\u30f3\u5909\u66f4
LabelItemName   = System / User Name
LabelActionTurnout = \u5206\u5c90\u65b9\u5411
LabelActionSensor = \u30bb\u30f3\u30b5\u30fc\u72b6\u614b
LabelActionLight = \u706f\u706b\u72b6\u614b
LabelActionSignal = \u4fe1\u53f7\u306e\u5411\u304d
LabelSignalAspect = Signal Mast Aspect
LabelActionLock = \u30ed\u30c3\u30af\u72b6\u614b
LabelActionFile = \u30d5\u30a1\u30a4\u30eb\u3092\u30bb\u30c3\u30c8
LabelSelectFile = Select File
LabelActionText = \u52d5\u4f5c\u306e\u30c7\u30fc\u30bf
LabelActionDescription = \u52d5\u4f5c\u306e\u8a18\u8ff0
LabelActionAudio = Audio Action
LabelDelayTime  = Delay Time
LabelSetTime    = Set Time
LabelSetFile    = File Name
LabelScriptCommand  = Script Command
LabelLightIntensity = Light Intensity
LabelTransitionTime = Transition Time
LabelMemoryLocation = Memory Name
LabelValue      = Value
LabelBlockPaths = Block Path
LabelBlockStatus = Block Status
LabelControlTrain = Control Command

# Actions used in implementation.DefaultConditional(Action) (via rbx.getString)
ActionNone = \u7121\u3057
ActionSetTurnout = \u5206\u5c90\u8a2d\u5b9a
ActionSetSignal = \u4fe1\u53f7\u8868\u793a\u8a2d\u5b9a
ActionSetSignalHeld = \u4fe1\u53f7\u4fdd\u6301\u8a2d\u5b9a
ActionClearSignalHeld = Clear Signal Held
ActionSetSignalDark = Set Signal Dark
ActionSetSignalLit = \u4fe1\u53f7\u70b9\u706f\u8a2d\u5b9a
ActionTriggerRoute = \u30c8\u30ea\u30ac\u30fc\u30eb\u30fc\u30c8
ActionSetSensor = \u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a
ActionDelayedSensor = \u9045\u5ef6\u30bb\u30f3\u30b5\u30fc\u8a2d\u5b9a
ActionResetDelayedSensor = Reset Delayed Set \u30bb\u30f3\u30b5\u30fc
ActionCancelSensorTimers = Cancel Timers for \u30bb\u30f3\u30b5\u30fc
ActionDelayedTurnout = \u9045\u5ef6\u5206\u5c90\u8a2d\u5b9a
ActionResetDelayedTurnout = \u9045\u5ef6\u5206\u5c90\u8a2d\u5b9a\u306e\u53d6\u308a\u6d88\u3057
ActionCancelTurnoutTimers = \u5206\u5c90\u30bf\u30a4\u30de\u30fc\u306e\u53d6\u308a\u6d88\u3057
ActionSetLight = \u30e9\u30a4\u30c8\u8a2d\u5b9a
ActionSetLightIntensity = \u30e9\u30a4\u30c8\u8f1d\u5ea6\u306e\u8a2d\u5b9a
ActionSetLightTransitionTime = \u30e9\u30a4\u30c8\u79fb\u884c\u6642\u9593\u306e\u8a2d\u5b9a
ActionSetMemory = \u30e1\u30e2\u30ea\u30fc\u3092\u30bb\u30c3\u30c8
ActionCopyMemory = \u30e1\u30e2\u30ea\u30fc\u540c\u58eb\u306e\u8907\u5199
ActionEnableLogix = Logix\u2122\u6709\u52b9
ActionDisableLogix = Logix\u2122\u7121\u52b9
ActionPlaySound = \u52b9\u679c\u97f3\u30d5\u30a1\u30a4\u30eb\u518d\u751f
ActionRunScript = \u30b9\u30af\u30ea\u30d7\u30c8\u5b9f\u884c
ActionTurnoutLock = \u5206\u5c90\u3092\u30ed\u30c3\u30af
ActionSetFastClockTime = \u30d5\u30a1\u30b9\u30c8\u30af\u30ed\u30c3\u30af\u6642\u9593\u8a2d\u5b9a
ActionStartFastClock = \u30d5\u30a1\u30b9\u30c8\u30af\u30ed\u30c3\u30af\u3092\u958b\u59cb
ActionStopFastClock = \u30d5\u30a1\u30b9\u30c8\u30af\u30ed\u30c3\u30af\u3092\u505c\u6b62
ActionAllocateWarrant = Allocate Warrant Route
ActionDeallocateWarrant = Deallocate Warrant
ActionSetWarrantTurnouts = Set Route Turnouts
ActionAutoRunWarrant    = Auto Run Train
ActionManualRunWarrant  = Manually Run Train
ActionControlTrain      = Control Auto Train
ActionSetTrainId        = Set Train ID
ActionSetTrainName      = Set Train Name
ActionSetSignalMastAspect = Set Signal Mast Aspect
ActionSetThrottleFactor = Set Throttle Factor
ActionSetSignalMastHeld = Set Signal Mast Held
ActionClearSignalMastHeld = Clear Signal Mast Held
ActionSetSignalMastDark = Set Signal Mast Dark
ActionClearSignalMastDark = Clear Signal Mast Dark
ActionSetBlockValue     = Set Block Value
ActionSetBlockError     = Set Block Error
ActionClearBlockError   = Clear Block Error
ActionDeallocateBlock   = Deallocate Block
ActionSetBlockOutOfService = Set Block OutOfService
ActionBlockInService    = Clear Block OutOfService
ActionControlAudio = Control Audio object
ActionJythonCommand = Execute Jython Command
ActionTypeHint = \u9078\u629e type of action, or \u9078\u629e None if no action is needed.
ActionNXPairEnabled     = Set NX Pair Enabled
ActionNXPairDisabled    = Set NX Pair Disabled
ActionNXPairSegment     = Set NX Pair Segment Active / Inactive

AudioSourcePlay = Play
AudioSourceStop = Stop
AudioSourcePlayToggle = Toggle Play
AudioSourcePause = Pause
AudioSourceResume = Resume
AudioSourcePauseToggle = Toggle Pause
AudioSourceRewind = Rewind
AudioSourceFadeIn = Fade-in
AudioSourceFadeOut = Fade-out
AudioResetPosition = Reset Position

WarrantHalt     = Halt
WarrantResume   = Resume
WarrantAbort    = Abort
OBlockStatus = OBlock Status
OBlockStatusHint = Select an OBlock Status to Test
Other   = Other
EntryExit = Entry Exit

# for jmri.ConditionalVariable via rbx
VarStateDescrpt = {0} "{1}" state is {2}
MemoryValueDescrpt = {0} "{1}" {2} value "{3}"
MemoryCompareDescrpt = {0} "{1}" {2} {0} "{3}"
FastClockDescrpt = {0} range from {1} to {2}

LessThan        = \u672a\u6e80
LessOrEqual     = \u4ee5\u4e0b
Equal           = \u7b49\u5024
GreaterOrEqual  = \u4ee5\u4e0a
GreaterThan     = \u9ad8\u5024

# Conditional(Variable) error strings
Error6 = \u6307\u5b9a\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u540d\u306f\u65e2\u306b\u4f7f\u7528\u6e08\u307f\u3067\u3059\u3002\u3053\u306eLogix\u2122\u306f\u66f4\u65b0\u3067\u304d\u307e\u305b\u3093\u3002.\n\u30e6\u30fc\u30b6\u30fc\u540d\u3092\u5909\u66f4\u3057\u3066\u3084\u308a\u76f4\u3057\u3066\u4e0b\u3055\u3044\u3002
Error4 = \u3053\u306eLogix\u2122\u306e\u8d77\u52d5\u6642\u306b\u4ee5\u4e0b\u306e\u8aa4\u308a\u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\n
Error7 = \nLogix\u2122\u306e\u53c2\u7167\u3092\u4fee\u6b63\u3059\u308b\u304b\u3001\u524a\u9664\u3057\u3066\u4e0b\u3055\u3044\u3002 .
Error9  = Enter an integer (digits only) or a Memory variable containing\nan integer for the number of seconds to {0}.
Error10 = New \u30e6\u30fc\u30b6\u30fc\u540d is already in use. Cannot update this Conditional.\nPlease change \u30e6\u30fc\u30b6\u30fc\u540d and try again.
Error11 = Conditional "{0}" ({1}) is a Conditional Variable in the Conditional,\n"{2}" ({3}), of Logix\u2122, "{4}" ({5}).\nPlease remove that variable first.
Error21 = "{1}" is not a valid Appearance for Signal Head "{0}".
Error22 = "{0}"\u3068\u3044\u3046\u540d\u79f0\u306f\u3001\u65e2\u77e5\u306eLogix\u2122.\n\u540d\u79f0\u3092\u4fee\u6b63\u3059\u308b\u304b\u3001\u65b0\u898f\u306b\u4f5c\u6210\u3057\u3001\u3082\u3046\u4e00\u5ea6\u8a66\u3057\u3066\u4e0b\u3055\u3044\u3002
Error23 = Set Delayed Sensor action
Error24 = Memory variable "{0}" currently does not contain a numeric value.\nWhen triggered the action cannot be performed until this value is corrected!
Error26 = Invalid time entry "{0}"\nTime must be entered in hh:mm format (e.g. 01:30, 16:00)\nfor a 24-hour clock. Please reenter in correct format, and try again. 
Error27 = Reset Delayed Set Sensor action
Error29 = \u30e9\u30a4\u30c8\u306e\u79fb\u884c\u6642\u9593\u306e\u8a2d\u5b9a
Error30 = Duplicate \u30e6\u30fc\u30b6\u30fc\u540d error. Entered \u30e6\u30fc\u30b6\u30fc\u540d is already in use by Conditional "{0}".\nPlease enter a different \u30e6\u30fc\u30b6\u30fc\u540d from others in this table.
Error34 = Cannot edit two Conditionals at the same time. Please complete edit of Conditional "{0}" and try again.
Error35 = Edit Conditional in progress. Please complete edit of Conditional "{0}" and try again.
Error38 = {0} is an unreasonable amount to {1}\nPlease enter a positive number of seconds less than 1 hour, and try again.
Error39 = \u9045\u5ef6\u5206\u5c90\u52d5\u4f5c\u8a2d\u5b9a
Error40 = Light - {0} - does not support transition time.\nPlease enter a light with Transition Time or change action type, and try again.
Error41 = \u9045\u5ef6\u5206\u5c90\u52d5\u4f5c\u521d\u671f\u5316
Error42 = Set Light Intensity action
Error43 = Enter an integer (digits only) or a Memory variable containing\nan integer to Set Light Intensity.
Error45 = Light - {0} - does not have variable intensity.\nPlease enter a light with variable intensity or change action type, and try again.
Error46 = \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4e26\u3079\u66ff\u3048\u308b\u306b\u306f\u5c11\u306a\u304f\u3068\u3082\uff12\u3064\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u3067\u3059\u3002
Error47 = Edit of State Variable in progress. Please complete and try again.
Error48 = Edit of Action in progress. Please complete edit and try again.
Error49 = LRoute Initializer antecedent cannot be edited (The actions may be edited)
Error50 = Variable and/or Action edits in progress.\nPlease complete edits and try again.
Error51 = At least two Variables are needed to reorder Variables.
ErrorAppearance = Select an Appearance. You must hit the Enter/Return key\nafter entering a name with the cursor in the name field.
ErrorAspect = Select an Aspect.  You may need to hit the Enter/Return key\nwith the cursor in the name field.
ErrorVariableType = Select a Variable Type or press [Cancel].
ErrorVariableState = Select a state for this variable.

# parse errors (for DefaultConditional via rbx.getString)
ParseError1 = \u5de6\u5074\u306e\u5f15\u6570\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002 < {0} >
ParseError2 = Could not find expected operator. < {0} >
ParseError3 = Could not find expected Right argument. < {0} >
ParseError4 = Antecedent parsing error: Unexpected character found: < {0} >
ParseError5 = Antecedent parsing error: All {0} rows must be used. Row {1} is missing.
ParseError6 = Exception thrown while parsing antecedent\n
ParseError7 = \u62ec\u5f27\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002 < {0} >.\u304c\u3042\u308a\u307e\u305b\u3093\u3002
ParseError8 = \nIf the above message is 'String index out of range:', the following \u756a\u53f7 is the position in the antecedent where the error occurred.
ParseError9 = < {0} >\u306f\u3001\u60f3\u5b9a\u5916\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u307e\u305f\u306f\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u3059\u3002

ButtonDisabled = \u7d99\u7d9a\u7121\u52b9
ButtonEnabled = \u7d99\u7d9a\u6709\u52b9
Warn1 = The last Conditional has been \u524a\u9664d from this Logix\u2122.
Warn2 = Logix\u2122 \u306f\u5c11\u306a\u304f\u3068\u3082\uff11\u3064\u306e\u72b6\u614b\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\u3002
Warn3 = The last State Variable has been \u524a\u9664d from this Conditional.\nA Conditional must have at least one State Variable to do anything useful.
Warn5 = The Conditional {0} ({1}) has no State Variables.\nA Conditional must have at least one State Variable to do anything useful.
Warn6 = Warning - A change in the {0} of {1} {2} will trigger calculation of this Logix\u2122.\nYou have Triggers Calculation checked for some occurrences and unchecked for others.\nPlease uncheck all occurrences if you do not want calculation to be triggered by this change.
# identical Warn8 also in LogixTableBundle
Warn8 = Logix \u306e\u6761\u4ef6 "{0}" ({1})\n\u306f\u7de8\u96c6\u3067\u304d\u307e\u305b\u3093\u3002Go to the \u30bb\u30f3\u30b5\u30fc Group Table to edit \u30bb\u30f3\u30b5\u30fc groups.
Warn9 = Conditions exist that could result in a logic loop. \n The following both trigger this Logix and are changed by it:\n
Warn10 = was disabled as requested.\nPlease remember to enable it later.
Warn11 = \nYou may \u524a\u9664 Conditional "{0}" ({1})\nor edit it from the template window where it was created.
Warn12 = Complete other Variable edits before deleting a Variable.
Warn13 = Complete other Action edits before deleting an Action.
Warn14 = Complete other Action edits before re-ordering the Action rows.
Warn15 = The View mode cannot be changed while there is an active edit.
makeSelection = Please select an Action type.
