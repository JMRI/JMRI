# conditional.ConditionalBundle_cs.properties
#
# Translation:  Petr Sidlo
#
# Czech properties for the jmri.jmrit.conditional GUI elements
#

LogixUserNameHint2 = Zadejte nov\u00e9 u\u017eivatelsk\u00e9 jm\u00e9no pro Logix, nap\u0159. \u0158\u00edzen\u00ed n\u00e1v\u011bstidla S2
ConditionalSystemName = Syst\u00e9mov\u00fd n\u00e1zev podm\u00ednky
ConditionalUserName = U\u017eivatelsk\u00fd n\u00e1zev podm\u00ednky
ConditionalUserNameHint = Zadejte u\u017eivatelsk\u00fd n\u00e1zev pro podm\u00ednku, nap\u0159. 'N\u00e1v\u011bstidlo S2 St\u016fj'
SinglePickFrame = V\u00fdb\u011brov\u00fd seznam s jedn\u00edm v\u00fdb\u011brem

ColumnLabelRow = \u0158\u00e1dek
ColumnLabelOperator = Oper\u00e1tor
ColumnLabelNot = Negace (Ne)
ColumnLabelDescription = Popis stavu prom\u011bnn\u00e9
ColumnLabelTriggersCalculation = Spou\u0161t\u011b\u010d v\u00fdpo\u010dtu

# logix node edit pane items
NodeEditTitle   = Upravit aktivn\u00ed uzel
NodeEditText =  V re\u017eimu \u00dapravy nelze vybrat jin\u00fd uzel. Vyberte Zru\u0161it nebo Aktualizovat pro dokon\u010den\u00ed \u00faprav.

# Select Conditional Reference
SelectLogix = Vybrat Logix
SelectConditional = Vybrat Podm\u00ednku
SelectFirstRow = Vybrat Podm\u00ednku...

TitleEditLogix = Upravit Logix
TitleEditConditional = Upravit Podm\u00ednku
TitleEditAction = Upravit Akci
TitleEditVariable = Upravit Prom\u011bnnou
TitleLogicalExpression = Logick\u00fd v\u00fdraz
TitleAntecedentPhrase = Prom\u011bnn\u00e1 p\u0159\u00ed\u010diny
TitleConsequentPhrase = Z toho plynouc\u00ed akce
TitleAction = Akce

# next key both in LogixTableAction and ConditionalEdit
TitlePickList = V\u00fdb\u011brov\u00fd seznam

ConditionalTableTitle = Podm\u00ednky (v po\u0159ad\u00ed v\u00fdpo\u010dtu)
ActionTableTitle = Z toho plynouc\u00ed akce (\u010d\u00e1st "potom") 
StateVariableTableTitle = Prom\u011bnn\u00e9 p\u0159\u00ed\u010diny (\u010d\u00e1st "kdy\u017e")
triggerOnChange = Prov\u00e9st akce pouze p\u0159i zm\u011bn\u011b stavu
triggerOnAny    = Prov\u00e9st akce kdykoliv spu\u0161t\u011bn\u00e9
OnTriggerToTrue = P\u0159i spou\u0161t\u011bn\u00ed Pravda
OnTriggerToFalse= P\u0159i spou\u0161t\u011bn\u00ed Nepravda
OnTrigger       = Kdykoliv spou\u0161t\u011bn\u00e9
OnChangeToTrue  = P\u0159i zm\u011bn\u011b na Pravda
OnChangeToFalse = P\u0159i zm\u011bn\u011b na nepravda
OnChange = P\u0159i zm\u011bn\u011b
FromFile = ze souboru,
After = , potom
Seconds = vte\u0159in
to = do
onWarrant = na Povolen\u00ed
onBlock = v Kolejov\u00e9m obvodu
onPath  = na Cest\u011b
ValueInMemory = (Hodnota pam\u011bti)
ExecJythonCmd = P\u0159\u00edkaz Jython

# Conditional TreeView
# Labels
LabelConditionalActions = Podm\u00ednka:
LabelAntecedentActions = P\u0159\u00ed\u010dina:
LabelLogicTypeActions = Logick\u00fd typ:
LabelTriggerModeActions = Re\u017eim spou\u0161t\u011b\u010de:
LabelVariablesActions = Prom\u011bnn\u00e9:
LabelVariableActions = Prom\u011bnn\u00e1:
LabelActionsActions = Akce:
LabelActionActions = Akce:
LabelMove = P\u0159esun:
LabelAntecedentHeader = P\u0159\u00ed\u010dina logiky

# Nodes
NodeVariablesExpanded = Prom\u011bnn\u00e9:
NodeVariablesCollapsed = Prom\u011bnn\u00e9
NodeActions = Akce

# Hints
HintAddButton = P\u0159idat novou polo\u017eku
HintEditButton = Upravit vybranou polo\u017eku
HintUpButton = P\u0159esunout vybranou polo\u017eku o jeden \u0159\u00e1dek nahoru
HintDownButton = P\u0159esunout vybranou polo\u017eku o jeden \u0159\u00e1dek dolu
HintDeleteButton = Vymazat vybranou polo\u017eku
HintDoneButton = Zav\u0159\u00edt \u00fapravy podm\u00ednky a vr\u00e1tit se do tabulky Logix
HintSaveButton = Ulo\u017eit p\u0159id\u00e1n\u00ed/\u00fapravy zm\u011bn a zav\u0159\u00edt
HintCancelButton = Zav\u0159\u00edt bez ulo\u017een\u00ed p\u0159id\u00e1n\u00ed/\u00faprav zm\u011bn
HintHelpButton = Otev\u0159\u00edt okno n\u00e1pov\u011bdy s podrobn\u00fdmi pokyny p\u0159\u00ed\u010diny
HintCheckButton = Aktualizovat stav
HintToggleButton = P\u0159epnout re\u017eim spou\u0161t\u011bn\u00ed akce

# Dialog Titles, not in use
TitleEditTypeDialog = Upravit typ logiky
TitleEditConditionalDialog = Upravit n\u00e1zev podm\u00ednky
TitleEditAntecedentDialog = Upravit p\u0159\u00ed\u010dinu logiky

# ConditionalHelpText
ConditionalHelpText1 = M\u00edch\u00e1n\u00ed "A Z\u00c1ROVE\u0147" s "NEBO" v\u00e9st k nejednozna\u010dn\u00fdm v\u00fdhodnocen\u00edm. V\u00fdraz\n  
ConditionalHelpText2 = p\u0159\u00ed\u010diny je vyhodnocov\u00e1n zleva doprava, co\u017e odpov\u00edd\u00e1 v\u00fdpo\u010dtu nejbli\u017e\u0161\u00ed\n
ConditionalHelpText3 = prom\u011bnn\u00e9 vlevo a nejvzd\u00e1len\u011bj\u0161\u00ed prom\u011bnn\u00e9 vpravo.\n
ConditionalHelpText4 = Pro zm\u011bnu po\u0159ad\u00ed vyhodnocen\u00ed, pros\u00edm vlo\u017ete z\u00e1vorky pro ozna\u010den\u00ed\n
ConditionalHelpText5 = logiky kterou chcete. M\u016f\u017eete tak\u00e9 upravit oper\u00e1tory, kter\u00e9 maj\u00ed b\u00fdt pou\u017eity.\n
ConditionalHelpText6 = Vyhodnocen\u00ed logiky re\u017eimu "Sm\u00ed\u0161en\u00fd" je obsah pole p\u0159\u00ed\u010diny a nikoliv\n
ConditionalHelpText7 = oper\u00e1tor\u016f zobrazen\u00fdch v \u0159\u00e1dc\u00edch tabulky prom\u011bnn\u00fdch stavu.

DoneButtonHint = Stiskn\u011bte tla\u010d\u00edtko pro ulo\u017een\u00ed v\u0161ech zm\u011bny u\u017eivatelsk\u00fdch n\u00e1zv\u016f a pro n\u00e1vrat se do tabulky Logix
DeleteLogixButtonHint = Stiskn\u011bte pro vymaz\u00e1n\u00ed tohoto Logixu a v\u0161ech jeho Podm\u00ednek
NewConditionalButton = Nov\u00e1 podm\u00ednka
NewConditionalButtonHint = Stiskn\u011bte pro otev\u0159en\u00ed okna pro vytvo\u0159en\u00ed nov\u00e9 podm\u00ednky
CalculateButton = Vypo\u010d\u00edtat
CalculateButtonHint = Stiskn\u011bte pro v\u00fdpo\u010det Podm\u00ednkov\u00fdch stav\u016f bez akce
ReorderButton = Zm\u011bna po\u0159ad\u00ed
ReorderButtonHint = Stiskn\u011bte a klikn\u011bte v prav\u00e9m sloupci v po\u017eadovan\u00e9m po\u0159ad\u00ed (zak\u00e1z\u00e1no pokud se jedn\u00e1 o typ Sm\u00ed\u0161en\u00fd)
AddVariableButton = P\u0159idat stavovou prom\u011bnnou
AddVariableButtonHint = Stiskn\u011bte pro p\u0159id\u00e1n\u00ed nov\u00e9ho \u0159\u00e1dku do tabulky stavov\u00e9 prom\u011bnn\u00e9
CheckVariableButton = Kontrola stavov\u00fdch prom\u011bnn\u00fdch
CheckVariableButtonHint = Stiskn\u011bte pro vyhodnocen\u00ed aktu\u00e1ln\u00edho stavu prom\u011bnn\u00fdch
UpdateConditionalButtonHint = Stiskn\u011bte pro ulo\u017een\u00ed zm\u011bn a n\u00e1vrat do \u00dapravy Logix
CancelConditionalButtonHint = Stisknut\u00edm pro n\u00e1vrat do \u00dapravy Logix bez ulo\u017een\u00ed zm\u011bn
DeleteConditionalButton = Vymazat podm\u00ednku
DeleteConditionalButtonHint = Stiskem tla\u010d\u00edtka tuto podm\u00ednku vyma\u017eete a vr\u00e1t\u00edte se do \u00dapravy Logix
addActionButton = P\u0159idat akci
addActionButtonHint = Stiskem tla\u010d\u00edtka p\u0159id\u00e1te nov\u00fd \u0159\u00e1dek do tabulky akc\u00ed
UpdateButtonHint = Stiskn\u011bte pro ulo\u017een\u00ed zm\u011bn a n\u00e1vrat do Upravit podm\u00ednku
CancelButtonHint = Stiskn\u011bte pro n\u00e1vrat do Upravit podm\u00ednku bez ulo\u017een\u00ed zm\u011bn
DeleteButtonHint = Stiskn\u011bte pro vymaz\u00e1n\u00ed a n\u00e1vrat do Upravit podm\u00ednku

NameHintTurnout = Zadejte n\u00e1zev (syst\u00e9mov\u00fd nebo u\u017eivatelsk\u00fd) pro V\u00fdhybku (nap\u0159. LT12)
NameHintSensor = Zadejte n\u00e1zev (syst\u00e9mov\u00fd nebo u\u017eivatelsk\u00fd) pro Sn\u00edma\u010d (nap\u0159. CS2)
NameHintSignal = Zadejte n\u00e1zev (syst\u00e9mov\u00fd nebo u\u017eivatelsk\u00fd) pro N\u00e1v\u011bstn\u00ed \u0161t\u00edt (nap\u0159. IH34)
NameHintSignalMast = Zadejte n\u00e1zev (syst\u00e9mov\u00fd nebo u\u017eivatelsk\u00fd) pro N\u00e1v\u011bstidlo a stiskn\u011bte Enter/Return pro na\u010dten\u00ed jeho N\u00e1v\u011bsti
NameHintLight = Zadejte n\u00e1zev (syst\u00e9mov\u00fd nebo u\u017eivatelsk\u00fd) pro Sv\u011btlo (nap\u0159. CL21)
NameHintRoute = Zadejte n\u00e1zev (syst\u00e9mov\u00fd nebo u\u017eivatelsk\u00fd) pro Cestu
NameHintWarrant = Zadejte n\u00e1zev (syst\u00e9mov\u00fd nebo u\u017eivatelsk\u00fd) pro P\u0159\u00edkaz
NameHintMemory = Zadejte n\u00e1zev (syst\u00e9mov\u00fd nebo u\u017eivatelsk\u00fd) pro Pam\u011b\u0165
NameHintLogix = Zadejte n\u00e1zev (syst\u00e9mov\u00fd nebo u\u017eivatelsk\u00fd) pro Logix
NameHintOBlock = Zadejte n\u00e1zev (syst\u00e9mov\u00fd nebo u\u017eivatelsk\u00fd) pro Blok obsazen\u00ed
NameHintEntryExit = Zdejte n\u00e1zev pro dvojici Odkud/Kam
NameHintConditional = Zadejte syst\u00e9mov\u00fd n\u00e1zev pro Podm\u00ednku (nebo u\u017eivatelsk\u00fd n\u00e1zev v tomto Logixu)

CompareHintMemory = Select an operator to compare Memory values
CompareTypeHint = Select either a literal value or the value in a Memory location
TurnoutSetHint = Select Closed or Thrown depending upon how Turnout is to be set
SensorSetHint = Select Active or Inactive depending upon how Sensor is to be set
LightSetHint = Select On or Off depending upon how Light is to be set
SignalSetHint = Select Signal Head Appearance to set
SignalMastSetHint = Select Signal Mast Aspect to set and hit Enter/Return to load its Aspects
LockSetHint = Select Lock or Unlock
DataHintDelayedSensor = Enter time (seconds) to wait before setting Sensor
DataHintDelayedTurnout = Enter time (seconds) to wait before setting Turnout
DataHintMemory = Enter Memory name whose value is compared
DataHintValue = Enter Value to be compared
DataHintSound = Enter name of sound file to be played or click [...]
DataHintScript = Enter name of script to be run or click [...]
SetHintSound = Click for a file selection dialog for choosing a sound file
SetHintScript = Click for a file selection dialog for choosing a script file
DataHintTime = Enter time (hh:mm) for a 24-hour clock
NameHintFromMemory = Enter name (system or user) of Memory to be copied from
DataHintToMemory = Enter name (system or user) of Memory to receive the copied value
DataHintLightIntensity = Enter intensity percentage as an integer 0 to 100.
DataHintLightTransitionTime = Enter number of fast clock minutes to transition between 0% and 100%.

VariableTypeHint = Select type of state variable for Conditional to test
VariableOperHint = Select AND or OR for the operator, default is AND
VariableNotHint = Check to indicate that this variable is to be negated, default is unchecked
VariableTriggerHint = Check to indicate that this variable is used to trigger actions, default is checked
VariableStateHint = Select the state of the variable to test
VariableLogixHint = Select the Logix that contains the conditional to be checked
VariableConditionalHint = Select the desired conditional
VariableAspectHint = Select the Aspect of the Signal Mast to test

ActionItemHint = Select action item for Conditional to execute
ActionOptionHint = Select when action should occur
SetHintAudio = Select action to perform
NameHintAudio = Enter Name (system or user) for AudioSource (e.g. IAS2)
SetHintJythonCmd = Enter Jython command text
DataHintTrainControl = Select an option to control the train
DataHintTrainId = Enter a train ID from the Roster - or enter a DCC address indicating long or short e.g. 1234(L) or 10(S)
DataHintTrainName = Enter a name for the train
DataHintBlockValue = Enter a value to be set into the Block
DataHintThrottleFactor = Enter a decimal number for the Throttle setting ratio.
BlockPathsSetHint = Select the Path to use

PromptLoadMastName = (Type Signal Mast name in the System/User Name field and hit Enter to load its Aspects)
PromptLoadHeadName = (Type Signal Head name in the System/User Name field and hit Enter to load its Appearances)

# ConditionalEdit Reorder Table Buttons
ButtonFirst = First
ButtonNext = Next
ReorderMessage = Please press First, then Next, Next, ... in desired order.
ButtonMove = Move
ConfirmIndirectReference = Press "{1}" if at run time Memory location "{0}" will contain a valid item name for this action.\nPress "{2}" if you want to enter the item name directly.\nPress "{3}" if you want to suppress this warning.\n

# Variable State combo box states used in jmri.implementation.DefaultConditionalAction
TurnoutUnlock = Unlock
TurnoutLock = Lock
LightOn = On
LightOff = Off
StateMemoryEquals = (case sensitive) Value
StateMemoryEqualsInsensitive = (case insensitive) Value
StateMemoryCompare = (case sensitive) Memory
StateMemoryCompareInsensitive = (case insensitive) Memory

# Variable State combo box states used in jmri.implementation.DefaultConditionalAction
# here for ConditionalVariable via rbx:
StateSignalMastLit = Signal Mast Lit
StateSignalMastHeld = Signal Mast Held
StateRouteFree = Route Free
stateRouteOccupied = Route Occupied
StateRouteReserved = Route Allocated
StateRouteIsSet    = Route Set
StateTrainRunning  = Train Running

# Display Description of state variable
TypeSensorActive = Sensor Active
TypeSensorInactive = Sensor Inactive
TypeTurnoutThrown = Turnout Thrown
TypeTurnoutClosed = Turnout Closed
TypeConditionalTrue = Conditional True
TypeConditionalFalse = Conditional False
TypeLightOn = Light On
TypeLightOff = Light Off
TypeMemoryEquals = Memory Compare to Value (Case Sensitive)
TypeMemoryEqualsInsensitive = Memory Compare to Value (Case Insensitive)
TypeMemoryCompare = Memory Compare to Memory (Case Sensitive)
TypeMemoryCompareInsensitive = Memory Compare to Memory (Case Insensitive)
TypeFastClockRange = Fast Clock Range
# head test type strings picked up from jmri.NamedBeanBundle
#TypeSignalHeadRed = Signal Head Red
#TypeSignalHeadYellow = Signal Head Yellow
#TypeSignalHeadGreen = Signal Head Green
#TypeSignalHeadDark = Signal Head Dark
#TypeSignalHeadFlashRed = Signal Head Flashing Red
#TypeSignalHeadFlashYellow = Signal Head Flashing Yellow
#TypeSignalHeadFlashGreen = Signal Head Flashing Green
#TypeSignalHeadLit = Signal Head Lit
#TypeSignalHeadHeld = Signal Head Held
#TypeSignalHeadLunar = Signal Head Lunar
#TypeSignalHeadFlashLunar = Signal Head Flashing Lunar
TypeWarrantRouteFree    = Free
TypeWarrantRouteOccupied = Occupied
TypeWarrantRouteAllocated = Allocated
TypeRouteIsSet  = Set
TypeTrainRunning = Running
TypeSignalMastAspectEquals = Signal Mast Aspect equals
TypeSignalHeadAspectEquals = Signal Head Appearance equals
#TypeSignalMastLit = Signal Mast Lit
#TypeSignalMastHeld = Signal Mast Held
TypeEntryExitActive = Active
TypeEntryExitInactive = Inactive

VariableOKMessage = All State Variables are OK.
VariableErrorMessage = Error found, please correct and try again.
ActionOKMessage = All Actions are OK.
NoActionMessage = A Condition requires at least one State Variable and usually has at least one Action.

FileButtonHint = Click to select a file from disk
LabelLogicType = Logic Operator:
TypeLogicHint = Choose logic operator joining state variables for the antecedent ('if' part) of this conditional
LabelAntecedent = Antecedent Expression (the 'if' part of the Conditional)
LabelAntecedentHint = Insert parenthesis so the statement satisfies the logic order you want
LabelTrainId = Train ID or Address
LabelTrainName = Train Name
LabelThrottleFactor = Throttle Adjustment Factor
LabelBlockValue = Block Value
LabelActionItem = Action Group
LabelActionType = Action Type
LabelVariableType = Variable Type
LabelVariableState = Variable State
LabelVariableAspect = Variable Aspect
LabelLiteralValue  = Literal Value
LabelMemoryValue  = Memory Value
LabelStartTime  = Start Time
LabelEndTime    = End Time
LabelCompareOp  = Comparison Operator
LabelCompareType  = Compare as
LabelActionOption = Change Option
LabelItemName   = System / User Name
LabelActionTurnout = Turnout Position
LabelActionSensor = Sensor State
LabelActionLight = Light State
LabelActionSignal = Signal Head Appearance
LabelSignalAspect = Signal Mast Aspect
LabelActionLock = Lock State
LabelActionFile = Set
LabelSelectFile = Select File
LabelActionText = Action Data
LabelActionDescription = Action Description
LabelActionAudio = Audio Action
LabelDelayTime  = Delay Time
LabelSetTime    = Set Time
LabelSetFile    = File Name
LabelScriptCommand  = Script Command
LabelLightIntensity = Light Intensity
LabelTransitionTime = Transition Time
LabelMemoryLocation = Memory Name
LabelValue      = Value
LabelBlockPaths = Block Path
LabelBlockStatus = Block Status
LabelControlTrain = Control Command

# Actions used in implementation.DefaultConditional(Action) (via rbx.getString)
ActionNone = None
ActionSetTurnout = Set Turnout
ActionSetSignal = Set Signal Head Appearance
ActionSetSignalHeld = Set Signal Head Held
ActionClearSignalHeld = Clear Signal Head Held
ActionSetSignalDark = Set Signal Head Dark
ActionSetSignalLit = Set Signal Head Lit
ActionTriggerRoute = Trigger Route
ActionSetSensor = Set Sensor
ActionDelayedSensor = Delayed Set Sensor
ActionResetDelayedSensor = Reset Delayed Set Sensor
ActionCancelSensorTimers = Cancel Timers for Sensor
ActionDelayedTurnout = Delayed Set Turnout
ActionResetDelayedTurnout = Reset Delayed Set Turnout
ActionCancelTurnoutTimers = Cancel Timers for Turnout
ActionSetLight = Set Light
ActionSetLightIntensity = Set Light Intensity
ActionSetLightTransitionTime = Set Light Transition Time
ActionSetMemory = Set Memory
ActionCopyMemory = Copy Memory To Memory
ActionEnableLogix = Enable Logix
ActionDisableLogix = Disable Logix
ActionPlaySound = Play Sound File
ActionRunScript = Run Script
ActionTurnoutLock = Turnout Lock
ActionSetFastClockTime = Set Fast Clock Time
ActionStartFastClock = Start Fast Clock
ActionStopFastClock = Stop Fast Clock
ActionAllocateWarrant = Allocate Warrant Route
ActionDeallocateWarrant = Deallocate Warrant
ActionSetWarrantTurnouts = Set Route Turnouts
ActionAutoRunWarrant    = Auto Run Train
ActionManualRunWarrant  = Manually Run Train
ActionControlTrain      = Control Auto Train
ActionSetTrainId        = Set Train ID
ActionSetTrainName      = Set Train Name
ActionSetSignalMastAspect = Set Signal Mast Aspect
ActionSetThrottleFactor = Set Throttle Factor
ActionSetSignalMastHeld = Set Signal Mast Held
ActionClearSignalMastHeld = Clear Signal Mast Held
ActionSetSignalMastDark = Set Signal Mast Dark
ActionClearSignalMastDark = Clear Signal Mast Dark
ActionSetBlockValue     = Set Block Value
ActionSetBlockError     = Set Block Error
ActionClearBlockError   = Clear Block Error
ActionDeallocateBlock   = Deallocate Block
ActionSetBlockOutOfService = Set Block OutOfService
ActionBlockInService    = Clear Block OutOfService
ActionControlAudio = Control Audio object
ActionJythonCommand = Execute Jython Command
ActionTypeHint = Select type of action, or select None if no action is needed.
ActionNXPairEnabled     = Set NX Pair Enabled
ActionNXPairDisabled    = Set NX Pair Disabled
ActionNXPairSegment     = Set NX Pair Segment Active / Inactive

AudioSourcePlay = Play
AudioSourceStop = Stop
AudioSourcePlayToggle = Toggle Play
AudioSourcePause = Pause
AudioSourceResume = Resume
AudioSourcePauseToggle = Toggle Pause
AudioSourceRewind = Rewind
AudioSourceFadeIn = Fade-in
AudioSourceFadeOut = Fade-out
AudioResetPosition = Reset Position

WarrantRoute    = WarrantRoute
WarrantHalt     = Halt
WarrantResume   = Resume
WarrantAbort    = Abort
OBlockStatus = OBlock Status
OBlockStatusHint = Select an OBlock Status to Test
Other   = Other
EntryExit = Entry Exit

# for jmri.ConditionalVariable via rbx
VarStateDescrpt = {0} "{1}" state is "{2}"
SignalHeadStateDescrpt = {0} "{1}" Appearance is "{2}"
SignalMastStateDescrpt = {0} "{1}" Aspect is "{2}"
MemoryValueDescrpt = {0} "{1}" {2} value "{3}"
MemoryCompareDescrpt = {0} "{1}" {2} {0} "{3}"
FastClockDescrpt = {0} range from {1} to {2}

LessThan        = Less Than
LessOrEqual     = Less Than Or Equal
Equal           = Equal
GreaterOrEqual  = Greater Than Or Equal
GreaterThan     = Greater Than

# Conditional(Variable) error strings
Error6 = New user name is already in use. Cannot update this Logix.\nPlease change user name and try again.
Error4 = The following error occurred when activating this Logix:\n
Error7 = \nPlease correct the reference or delete the offending Conditional or Logix.
Error9  = Enter a decimal number or a Memory variable containing\na decimal number for the number of seconds to {0}.
Error10 = New user name is already in use. Cannot update this Conditional.\nPlease change user name and try again.
Error11 = Conditional "{0}" ({1}) is a Conditional Variable in the Conditional,\n"{2}" ({3}), of Logix, "{4}" ({5}).\nPlease remove that variable first.
Error21 = "{1}" is not a valid Appearance for Signal Head "{0}".
Error22 = The name "{0}" does not match an existing "{1}".\nPlease correct or create as required, and try again.
Error23 = Set Delayed Sensor action
Error24 = Memory variable "{0}" currently does not contain a numeric value.\nWhen triggered the action cannot be performed until this value is corrected!
Error26 = Invalid time entry "{0}"\nTime must be entered in hh:mm format (e.g. 01:30, 16:00)\nfor a 24-hour clock. Please reenter in correct format, and try again.
Error27 = Reset Delayed Set Sensor action
Error29 = Set Light Transition Time
Error30 = Duplicate user name error. Entered user name is already in use by Conditional "{0}".\nPlease enter a different user name from others in this table.
Error34 = Cannot edit two Conditionals at the same time. Please complete edit of Conditional "{0}" and try again.
Error35 = Edit Conditional(s) in progress. Please complete edit of any Conditionals and try again.
Error38 = {0} is an unreasonable amount to {1}\nPlease enter a positive percentage, and try again.
Error39 = Set Delayed Turnout action
Error40 = Light - {0} - does not support transition time.\nPlease enter a light with Transition Time or change action type, and try again.
Error41 = Reset Delayed Set Turnout action
Error42 = Set Light Intensity action
Error43 = Enter an integer (digits only) or a Memory variable containing\nan integer to Set Light Intensity.
Error45 = Light - {0} - does not have variable intensity.\nPlease enter a light with variable intensity or change action type, and try again.
Error46 = At least two Actions are needed to reorder Actions.
Error47 = Edit of State Variable in progress. Please complete and try again.
Error48 = Edit of Action in progress. Please complete edit and try again.
Error49 = LRoute Initializer antecedent cannot be edited (The actions may be edited)
Error50 = Variable and/or Action edits in progress.\nPlease complete edits and try again.
Error51 = At least two Variables are needed to reorder Variables.
ErrorAppearance = Select an Appearance. You must hit the Enter/Return key\nafter entering a name with the cursor in the name field.
ErrorAspect = Select an Aspect.  You may need to hit the Enter/Return key\nwith the cursor in the name field.
ErrorVariableType = Select a Variable Type or press [Cancel].
ErrorVariableState = Select a state for this variable.

# parse errors (for DefaultConditional via rbx.getString)
ParseError1 = Could not find expected Left argument < {0} >
ParseError2 = Could not find expected operator < {0} >
ParseError3 = Could not find expected Right argument < {0} >
ParseError4 = Antecedent parsing error: Unexpected character found: < {0} >
ParseError5 = Antecedent parsing error: All {0} rows must be used. Row {1} is missing.
ParseError6 = Exception thrown while parsing antecedent\n
ParseError7 = Unmatched parenthesis, missing < {0} >.
ParseError8 = \nIf the above message is 'String index out of range:', the following number is the position in the antecedent where the error occurred.
ParseError9 = Unexpected operator or characters < {0} >

ButtonDisabled = Continue Disabled
ButtonEnabled = Continue Enabled
Warn1 = The last Conditional has been deleted from this Logix.
Warn2 = A Logix must have at least one Conditional to do anything useful.
Warn3 = The last State Variable has been deleted from this Conditional.\nA Conditional must have at least one State Variable to do anything useful.
Warn5 = The Conditional {0} ({1}) has no State Variables.\nA Conditional must have at least one State Variable to do anything useful.
Warn6 = A Memory action cannot be referred to indirectly through a memory location.
# identical Warn8 also in LogixTableBundle
Warn8 = Conditionals in Logix "{0}" ({1}) cannot be edited.\nGo to the Sensor Group Table to edit sensor groups.
Warn9 = Conditions exist that could result in a logic loop.\nThe following both trigger this Logix and are changed by it:\n
Warn10 = was disabled as requested.\nPlease remember to enable it later.
Warn11 = \nYou may delete Conditional "{0}" ({1})\nor edit it from the template window where it was created.
Warn12 = Complete other Variable edits before deleting a Variable.
Warn13 = Complete other Action edits before deleting an Action.
Warn14 = Complete other Action edits before re-ordering the Action rows.
Warn15 = The View mode cannot be changed while there is an active edit.
makeSelection = Please select an Action type.
