# jmri.jmrit.ctc.CtCBundle.properties
#
# Default properties for CTC

# Integration properties
CtcRunAction = Start CTC Runtime
CtcEditorAction = CTC Editor
CtcRunActionButton = Run CTC
CtcEditorActionButton = CTC Editor...
Unknown = Unknown
CtcManagerDeleteVetoed = {0} is in use by CTC

# TrafficLockingEntry.java  These are constants both internal and external entries that the user sees:
TLE_RuleEnabled = Enabled
TLE_RuleDisabled = Disabled
TLE_Normal = Normal
TLE_Reverse = Reverse

#CheckJMRIObject.java
CJMRIO_Sensor = JMRI Sensor
CJMRIO_Turnout = JMRI Turnout
CJMRIO_Signal = JMRI Signal
CJMRIO_Block = JMRI Block
CJMRIO_DoesntExist = doesn't exist.

#CodeButtonHandlerData.java
CBHD_SwitchNumber = Switch #
CBHD_SignalNumberEtc = Signal Etc. #:
CBHD_ColumnNumber = , Col #:

# FrmMainForm
# Edit menu names are in NamedBeanBundle
MenuNew = New
MenuImport = Import old configuration (CTCSystem.xml)
MenuFix = Fix Error(s)...
MenuConfigure = Configure
MenuDebugging = Debugging
MenuDefaults = Defaults
MenuFleeting = Fleeting
MenuPatterns = Patterns
MenuDesign = GUI Design
MenuAbout = About CTC
TitleMainForm = CTC Editor
LabelDefined = Presently defined CTC O.S. sections:
NewConfigTitle = Start New Configuration
NewConfigWarning = The existing configuration, if any, will be removed.  Continue?
ImportTitle = Start Import
ImportWarning = The existing configuration, if any, will be replaced by the imported configuration.  Continue?
# ButtonAdd is in jmrit.Bundle
ButtonReapplyItem = Reapply patterns to selected item
ButtonChange = Change Switch and Signal etc. #'s
ButtonMoveUp = Move Up
ButtonMoveDown = Move Down
ButtonXmlFiles = Write .xml file for JMRI GUI support
LabelCode = Code Button:
LabelSignalIndicators = Signal direction indicators:
LabelSignalLever = Signal direction lever:
LabelSwitchIndicators = Switch direction indicators:
LabelSwitchLever = Switch direction lever:
LabelCallOn = Call-on:
LabelTrafficLock = Traffic locking:
LabelTurnoutLock = Turnout locking:
LabelIndicatorLock = Indication locking:
InfoEnabled = Always enabled
LabelEnabled = Enabled
FrmMainFormReferencesExist = References exist, remove those first before delete allowed.
FrmMainFormExitError1 = Exit program
FrmMainFormConfirm = Confirm: This will update ALL 'pattern' fields.\n\n           ------ As an alternative: ------\n\n\
  You can do each section individually by pressing\nthe different Edit buttons at the bottom of\nthe main form and reapply pattern only to the fields\nin that editor screen.
FrmMainFormValidError1 = There are errors present.  The action:\n\n
FrmMainFormValidError2 = \n\nis not allowed until you fix all errors.\nYou can try Edit > Fix Error(s)... first.
FrmMainFormValidError3 = Unable to exit at this time

# CTCMain
CTCMainShuttingDown = Shutting down existing CTC system
CTCMainStarted = Starting CTC system
CTCMainRuntimeStartupIssues = CTC Run Time Start Up Issues:

# Dialog Shared
InfoRequired = Required
InfoOptional = Optional
InfoBlank = Selecting self forces blank!
ButtonSaveClose = Save and close
ButtonReapply = Reapply patterns - this form ONLY!
ButtonAddNew = Add New
ButtonEditBelow = Edit Below
ButtonProceed = Proceed
OneOrBothOf = One or both of
MustBePresent = must be present.
And = and
RequiredTurnoutMissing = Required turnout missing

#CallOn.java
CallOnNotValidAspect = not valid aspect indication for this signal.

#LockedRoute.java
LockedRouteSensorsStillAllocatedList = Sensor(s) still allocated list:

#NBHSensor.java
NBHSensorDoesNotExist = Sensor does not exist:
NBHSensorRequiredSensorMissing = Required sensor missing

#NBHTurnout.java
NBHTurnoutDoesNotExist = Turnout does not exist:

#SignalDirectionIndicators.java
SignalDirectionIndicatorsInvalidCombination = invalid combination
SignalDirectionIndicatorsError2 = Left sensor exists but no entries in right to left signals.
SignalDirectionIndicatorsError3 = Right sensor exists but no entries in left to right signals.
SignalDirectionIndicatorsError4 = leftSensor is not specified, but there are entry(s) in right to left signals.
SignalDirectionIndicatorsError5 = rightSensor is not specified, but there are entry(s) in left to right signals.
SignalDirectionIndicatorsError6 = Signals are non red in both directions
SignalDirectionIndicatorsDuplicateHomeSignal = Duplicate home signal defined in more than one SignalDirectionIndicators object


#SignalDirectionLever.java
SignalDirectionLeverMustHaveOne = must have one
SignalDirectionLeverOneOrBoth = One or both leftSensor and rightSensor must exist

#CommonSubs.java
CommonSubsDataModified = Data has been modified, do you really want to exit?
CommonSubsBeanType = Bean type, '{0}', is not valid
CommonSubsFieldsPlural = The following field(s) are required:\n\n
CommonSubsFieldSingular = The following field is required:\n\n
CommonSubsPleaseFix1 = \nPlease fix before pressing \"Save and close\"\nor you may exit the editor screen without saving.
CommonSubsPleaseFix2 = \nPlease fix before pressing \"Save and close\"\nor you may press cancel.

#CreateGUIObjectsXMLFile.java
CreateGUIObjectsXMLFileClockOn = Clock On
CreateGUIObjectsXMLFileFleetingOn = Fleeting ON
CreateGUIObjectsXMLFileReloadCTC = Reload CTC
CreateGUIObjectsXMLFileCTCDebugOn = CTC Debug On
CreateGUIObjectsXMLFileCallOn = Call-on
CreateGUIObjectsXMLFileLocal = Local
CreateGUIObjectsXMLFileLocked = Locked
CreateGUIObjectsXMLFileUnlocked = Unlocked

# DlgAddModifyCTCColumn
TitleDlgAddModAdd = Add new Switch and Signal etc. #'s
TitleDlgAddModChg = Modify Switch and Signal etc. #'s
LabelDlgAddModSwitch = Switch #:
LabelDlgAddModColumn = GUI column #:
LabelDlgAddModGen = GUI Generated before
InfoDlgAddModSignal = The Signal # will always be one more than the switch #
InfoDlgAddModGen = 0 = nothing generated
ErrorDlgAddModDuplicate = Duplicate

# DlgCB
TitleDlgCB = Edit Code Button
LabelDlgCBSensor = Code Button sensor:
LabelDlgCBPriSensor = Primary O.S. section occupied sensor:
LabelDlgCBSecSensor = Secondary O.S. section occupied sensor:
LabelDlgCBSwitch = Switch slaved to O.S. section #:
LabelDlgCBDelay = No Code Button delay (in milliseconds):
InfoDlgCBLockAll = Locks everything
InfoDlgCBLockTO = Prevents turnout change, turnout lock
InfoDlgCBNormal = Leave this blank if this is a normal O.S. section
InfoDlgCBZero = Enter 0 for normal Code Button
InfoDlgCBDelay = Enter >0 for tower O.S. section delay (no Code Button)

# DlgCO
TitleDlgCO = Edit Call-on
LabelDlgCOGroupingList = Grouping list:
LabelDlgCOToggleSensor = Toggle sensor:

InfoDlgCORow1 = Based upon Signal Type selected, various values are needed below and enabled for editing:
InfoDlgCORow2A = Signal:
InfoDlgCORow2B = A standard JMRI signal head or signal mast which will get the Call-on aspect.
InfoDlgCORow3A = Signal facing direction:
InfoDlgCORow3B = LEFTTRAFFIC or RIGHTTRAFFIC
InfoDlgCORow4A = Aspect:
InfoDlgCORow4B = For Signal Heads: Dark, Red, Yellow (Semaphores), Green, Flashing Red (Signals), Flashing Yellow, Flashing Green, Lunar, Flashing Lunar
InfoDlgCORow5A = Called on sensor:
InfoDlgCORow5B = For Signal Heads: required JMRI Sensor for occupancy in the direction indicated (i.e. the sensor where the train is ultimately GOING) which MUST be occupied.
InfoDlgCORow6A = Block:
InfoDlgCORow6B = For Signal Masts: the "Permissive" aspect needs to be set in the specified block, and additionally the occupancy sensor associated with it MUST be occupied.

InfoDlgCOSep = --------------------------------------- ROUTE ---------------------------------------
InfoDlgCOSelect = Select up to 6 (all optional) switch direction indicators (when lit) to specify the route exactly:

InfoDlgCOLeftTraffic = LEFTTRAFFIC
InfoDlgCORightTraffic = RIGHTTRAFFIC
# use common keys in NamedBeanBundle for Appearances

TextDlgCOAddInstructions = Add this to the end of Grouping list above
TextDlgCOUpdateInstructions = Update selected item in the Grouping list above

ErrorDlgCOSignalInvalid = Signal MUST have a value
ErrorDlgCOCalledOnSensorInvalid = Called on sensor MUST have a value
ErrorDlgCOBlockInvalid = Block MUST have a value

# DlgDebugging
TitleDlgDeb = CTC Debugging
LabelDlgDebReload = CTC system reload sensor:
LabelDlgDebRules = CTC debug traffic locking rule triggered display sensor:
InfoDlgDebReload = When the above sensor goes active, it triggers the CTC system to reload.  Leave blank for none.
InfoDlgDebRules1 = When this sensor is active: each time a traffic locking rule is valid, it logs to the JMRI System Console which one was triggered
InfoDlgDebRules2 = Leave blank for none.

# DlgDefaults
TitleDlgDef = CTC Defaults
LabelDlgDefSignalTime = Coding and response time (milliseconds):
LabelDlgDefSwitchTime = Coding and response time (milliseconds):
LabelDlgDefLockTime = Time locking interval (milliseconds):
LabelDlgDefLockEnabled = Turnout locks enabled at startup:
LabelDlgDefCodeDelay = No Code Button delay (in milliseconds):
InfoDlgDefTimeRange = All millisecond values below are between 0 and 120,000 inclusive:
InfoDlgDefSignalSep = ------------ Signal direction indicators ------------
InfoDlgDefSwitchSep = ------------ Switch direction indicators ------------
InfoDlgDefCodeDelayZero = Enter 0 for normal Code Button default for each O.S. section
InfoDlgDefCodeDelayMore = Enter >0 for tower O.S. section delay (no Code Button)
LabelDlgDefSignalSystemType = Signal System Type:
LabelDlgDefSignalSystemTypeHeads = Signal Heads
LabelDlgDefSignalSystemTypeMasts = Signal Masts
LabelDlgDefSecondsUntilUnlock = Seconds until all lockable turnouts locked:
LabelDlgDefSecondsUntilUnlockHint = (Set to 0 to disable)

# DlgFixErrors
TitleDlgFix = Fix errors
InfoDlgFix = <html>NOTE: The purpose of this routine is to go thru every column and automatically de-enable sub-system(s) that are in error. Any data that you have already entered is NOT lost, just \"ignored\".  This routine CANNOT fix missing data in the Code Button sub-system, since there is no way to de-check that.  You have two choices in this situation after this routine runs: Delete those column(s) or edit it and fix them.</html>

# DlgFleeting
TitleDlgFleet = CTC Fleeting
LabelDlgFleetSensor = (Actual) Fleeting toggle sensor:
LabelDlgFleetEnabled = Fleeting enabled at start:
InfoDlgFleet = Fleeting information:

# DlgGUIDesign
TitleDlgGUI = CTC GUI Design
LabelDlgGUIBlanks = Extra blank columns after last defined column to create:
LabelDlgUSS = USS
LableDlgGUIOther = Other (Future)
LableDlgGUI718 = 718 pixels
LableDlgGUI850 = 850 pixels
LableDlgGUI900 = 900 pixels
LableDlgGUIAllOS = All O.S. section signals
LableDlgGUIGreen = Green/off only (Future feature)
LableDlgGUINone = None
LableDlgGUIBuilder= Builder Plate
LableDlgGUIGenerate = Generate
LableDlgGUIFleeting = Fleeting toggle switch (only if fleeting configured)
LableDlgGUIClock = Analog clock and clock on toggle
LableDlgGUIReload = Reload CTC system button
LableDlgGUITrack = Create variety of track pieces
LableDlgGUIDebug = CTC Debug on toggle
LableDlgGUIBlinkRed = O.S. Occupancy sensor blinks red
InfoDlgGUITYpe = Type of CTC panel:
InfoDlgGUISize = Vertical size:
InfoDlgGUISignals = Signals on panel:
InfoDlgGUIPrototype = Prototype selections:
InfoDlgGUITurnouts = Turnouts on panel:
InfoDlgGUIWhen = when unknown or inconsistent

# DlgIL
TitleDlgIL = Edit indication locking
LabelDlgILNames = Signal names:
ButtonDlgILCompact = Compact
InfoDlgILNonRed = If ANY of these signals are NON RED,
InfoDlgILLocked = then this O.S. section is considered "indication" locked.
InfoDlgILRemove = To remove signal(s), just blank out the line(s), then press:
InfoDlgILAutomatic = <- Compact is automatically done
InfoDlgILNoEntriesIn = No entries in
LabelDlgILReplaceSet = Completely replace this set with this O.S. sections set:
ButtonDlgILReplace = Replace

# DlgPatterns
TItleDlgPat = CTC Patterns
LabelDlgPatCode = Code Button sensor:
LabelDlgPatSigLeftInd = Left indicator sensor:
LabelDlgPatSigNormalInd = Normal indicator sensor:
LabelDlgPatSigRightInd = Right indicator sensor:
LabelDlgPatSigLeftLever = Left lever sensor:
LabelDlgPatSigNormalLever = Normal lever sensor:
LabelDlgPatSigRightLever = Right lever sensor:
LabelDlgPatLockToggle = Lock toggle sensor:
LabelDlgPatUnlockInd = Unlocked indicator sensor:
LabelDlgPatToNormalInd = Normal indicator sensor:
LabelDlgPatToReverseInd = Reverse indicator sensor:
LabelDlgPatToLever = Lever sensor:
LabelDlgPatCallOn = Toggle sensor:
InfoDlgPatGeneral = General patterns:
InfoDlgPatSigInds = Signal direction indicators patterns:
InfoDlgPatSigLevers = Signal direction levers patterns:
InfoDlgPatToLock = Turnout lock patterns:
InfoDlgPatToInds = Switch direction indicators patterns:
InfoDlgPatToLever = Switch direction levers patterns:
InfoDlgPatCallOn = Call-on patterns:

# DlgSIDI
TitleSIDI = Edit signal direction indicators
LabelSIDILRTraffic = Left to right traffic signal list:
LabelSIDIRLTraffic = Right to left traffic signal list:
LabelSIDILeft = Left indicator sensor:
LabelSIDINormal = Normal indicator sensor:
LabelSIDIRight = Right indicator sensor:
LabelSIDICodeTime = Coding and response time milliseconds:
LabelSIDILockTime = Time locking interval milliseconds:
ButtonSIDIBoth = Compact both lists
InfoSIDICompact = <- Compact is automatically done
InfoSIDIRemove = To remove signal(s), just blank out the line(s), then press:
ErrorDlgSIDIDefineButNoEntriesIn = The {0} or Both button is active but the \"{1}\" is empty.
ErrorDlgSIDINotDefinedWithEntriesIn = The {0} button is not active but the \"{1}\" has entries.
LabelSIDITrafficDirection = Traffic Direction
LabelSIDILeftTraffic = Left
LabelSIDIBothTraffic = Both
LabelSIDIRightTraffic = Right

# DlgSIDL
TitleDlgSIDL = Edit signal direction lever
LabelDlgSIDLLeft = Left lever sensor:
LabelDlgSIDLNormal = Normal lever sensor:
LabelDlgSIDLRight = Right lever sensor:

# DlgSWDI
TitleSWDI = Edit switch direction indicators
LabelSWDINormal = Normal indicator sensor:
LabelSWDIReverse = Reverse indicator sensor:
LabelSWDIToName = Actual turnout:
LabelSWDITime = Coding and response time milliseconds:
LabelSWDIFeedback = Feedback different:
LabelSWDITurnout = Turnout
LabelSWDILeft = Left hand turnout
LabelSWDIXOver = Crossover
LabelSWDIAlso = Other turnout also left handed
LabelSWDIDouble = Double crossover
InfoSWDIGUI = Optional GUI parameters:

# DlgSWDL
TitleDlgSWDL = Edit switch direction lever
LabelDlgSWDLLever = Lever sensor:

# DlgTRL
TitleDlgTRL = Edit traffic locking
LabelDlgTRLEdit = Edit

LabelDlgTRLLeft = Left traffic locking rules:
LabelDlgTRLRight = Right traffic locking rules:
LabelDlgTRLAutoGenerate = Auto-Generate
LabelDlgTRLAutoGenerateWarning = ALL are deleted first:
LabelDlgTRLReverseLeftRight = Reverse Left/Right
InfoDlgTRLRulesQuestion = Rules: ?
InfoDlgTRLNote1 = NOTE: Having NO rules ALWAYS allows that direction.
InfoDlgTRLNote2 = For example: Where you go into staging and there is
InfoDlgTRLNote3 = no O.S. section set controlling entry/exit from the staging area.
InfoDlgTRLRules = Rules:
InfoDlgTRLRuleNumber = Rule #:

# DlgTRLRules
TitleDlgTRLRules = [code]
LabelDlgTRLRulesRules = Rules:
LabelDlgTRLRulesEnabled = This rule ENABLED
ButtonDlgTRLRulesEnable = Enable ALL rules
ButtonDlgTRLRulesDisable = Disable ALL rules
ButtonDlgTRLRulesUpdate = [code]
InfoDlgTRLRulesDestinationSignalOrCommentPrompt = Dest Signal / Comment:
InfoDlgTRLRulesNote1 = If ANY of these rules are true, then the ? Traffic Direction Lever is allowed to be "coded".
InfoDlgTRLRulesNote2 = Having NO rules (or no rules enabled) ALWAYS allows
InfoDlgTRLRulesNote3 = this direction.  For example: Where you go into staging and there is no O.S. section set controlling entry/exit from the staging area.
InfoDlgTRLRulesSep1 = ---------------------------------------- ROUTE ----------------------------------------
InfoDlgTRLRulesSection = Select up to 5 O.S. section(s) to specify the route exactly.  Below each are switch alignments (for those specified):
InfoDlgTRLRulesSensor = Occupancy sensors not reserved by other routes for the route specified to be allowed.
InfoDlgTRLRulesSep2 = --------- Optional sensors that must be ACTIVE to be valid ---------
TitleDlgTRLRulesLeft = Edit Left traffic locking rules for
LabelDlgTRLRulesLeftInfo = If ANY of these rules are true, then the Left Traffic Direction Lever is allowed to be coded.
TitleDlgTRLRulesRight = Edit Right traffic locking rules for
LabelDlgTRLRulesRightInfo = If ANY of these rules are true, then the Right Traffic Direction Lever is allowed to be coded.
TextDlgTRLRulesAddThis = Add this to the end of Rules list above
TextDlgTRLRulesUpdateThis = Update selected item in the Rules list above
ButtonDlgTRLRules = Dup (to end)

# DlgTULRules
TitleDlgTUL = Edit turnout locking
LabelDlgTULSensor = Dispatcher sensor lock toggle:
LabelDlgTULToName = Actual turnout (required):
LabelDlgTULToOpt = Optional additional turnout(s):
LabelDlgTULInd = Dispatcher sensor unlocked indicator:
LabelDlgTULNoDisp = No Dispatcher control of switch:
LabelDlgTULClosed = When locked, switch state is "Closed":
LabelDlgTULGregs = Greg's
LabelDlgTULOther = Other (unsupported)
ButtonDlgTULJust = "Just" a locked turnout
InfoDlgTULFeedback = Feedbacks different
InfoDlgTULChecked = If this is checked, then...
InfoDlgTULConfig = <-- this is important to configure properly
InfoDlgTULLock = Lock implementation:

#CTCExceptionBuffer
# All MUST be 6 characters long:
CTCExceptionBufferERROR = ERROR
CTCExceptionBufferWARN  = WARN
CTCExceptionBufferINFO  = INFO
