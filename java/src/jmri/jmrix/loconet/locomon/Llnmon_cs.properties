# Strings used by LLnmon.
#
# Translation:  Petr Sidlo
#
# Czech translation for strings found in Llnmon.java

LN_MSG_GPON = Nastavit glob\u00e1ln\u00ed (trakce) Nap\u00e1jen\u00ed na 'Zapnuto'.\n
LN_MSG_GPOFF = Nastavit glob\u00e1ln\u00ed (trakce) Nap\u00e1jen\u00ed na 'Vypnuto'.\n
LN_MSG_IDLE = Nastavit glob\u00e1ln\u00ed (trakce) Nap\u00e1jen\u00ed na 'Vynutit ne\u010dinnost, Vyslat Nouzov\u00fd STOP'.\n
LN_MSG_MASTER_BUSY = Master je zanepr\u00e1zdn\u011bn.\n

# Note: in LN_MSG_REQ_SLOT_FOR_ADDR ,LN_MSG_HELPER_IS_SHORT_AND_LONG_ADDRESS,
# and in LN_MSG_HELPER_IS_SHORT_ADDRESS, the following
# string replacements will be used:
#   {0} is replaced with the integer value representing the locomotive address
#   {1} (where applicable) is replaced with the integer value representing the
#       long locomotive address (14-bit)
LN_MSG_REQ_SLOT_FOR_ADDR = Po\u017eadavek slotu na adresu lokomotivy {0}.\n
LN_MSG_HELPER_IS_SHORT_AND_LONG_ADDRESS = {0} (kr\u00e1tk\u00e1) (nebo dlouh\u00e1 adresa {1})
LN_MSG_HELPER_IS_SHORT_ADDRESS = {0} (kr\u00e1tk\u00e1)

# Note: in LN_MSG_HELPER_IS_ALTERNATE_SHORT_AND_LONG_ADDRESS_Ax,
# LN_MSG_HELPER_IS_ALTERNATE_SHORT_AND_LONG_ADDRESS_Bx,
# LN_MSG_HELPER_IS_ALTERNATE_SHORT_AND_LONG_ADDRESS_Cx,
# LN_MSG_HELPER_IS_ALTERNATE_SHORT_ADDRESS_Ax,
# LN_MSG_HELPER_IS_ALTERNATE_SHORT_ADDRESS_Bx, and in
# LN_MSG_HELPER_IS_ALTERNATE_SHORT_ADDRESS_Cx, the address is displayed as a
# "Short" address and a "Mixed" address, and sometimes a "Long" address.
# The following string replacements will be used:
#   {0} is replaced with the integer value representing the locomotive address
#   {1} is replaced with the integer remainder of the short locomotive address
#       minus the hex "sixteens" digit, as appropriate for the key.
#   {2} (where applicable) is replaced with the long locomotive address (14-bit)
LN_MSG_HELPER_IS_ALTERNATE_SHORT_AND_LONG_ADDRESS_Ax = {0} (kr\u00e1tk\u00e1 nebo "A{1}") (nebo dlouh\u00e1 adresa {2})
LN_MSG_HELPER_IS_ALTERNATE_SHORT_AND_LONG_ADDRESS_Bx = {0} (kr\u00e1tk\u00e1 nebo "B{1}") (nebo dlouh\u00e1 adresa {2})
LN_MSG_HELPER_IS_ALTERNATE_SHORT_AND_LONG_ADDRESS_Cx = {0} (kr\u00e1tk\u00e1 nebo "C{1}") (nebo dlouh\u00e1 adresa {2})
LN_MSG_HELPER_IS_ALTERNATE_SHORT_ADDRESS_Ax = {0} (kr\u00e1tk\u00e1 nebo "A{1}")
LN_MSG_HELPER_IS_ALTERNATE_SHORT_ADDRESS_Bx = {0} (kr\u00e1tk\u00e1 nebo "B{1}")
LN_MSG_HELPER_IS_ALTERNATE_SHORT_ADDRESS_Cx = {0} (kr\u00e1tk\u00e1 nebo "C{1}")

# Note: in LN_MSG_REQ_SWITCH, the following string replacements will be used:
#   {0} is replaced with the turnout 'system name', such as 'LT51'
#   {1} is replaced with the turnout 'user name', if defined, such as 'West Allis Switch'
#   {2} is replaced with the turnout position.  This will be the text from one of
#       these two properties file strings:
#           LN_MSG_SW_POS_CLOSED
#       or
#           LN_MSG_SW_POS_THROWN
#   {3} is replaced with the turnout output state.  This will be the text from one
#       of these two properties file strings:
#           LN_MSG_SW_OUTPUT_STATE_ON
#       or
#           LN_MSG_SW_OUTPUT_STATE_OFF
LN_MSG_REQ_SWITCH = Po\u017eadavek pro v\u00fdhybku na {0} ({1}) do {2} ({3}), s potvrzen\u00edm.\n

# Note: the following two properties file strings are intended for use as parameter {2}
# of LN_MSG_REQ_SWITCH.
LN_MSG_SW_POS_CLOSED = P\u0159\u00edmo
LN_MSG_SW_POS_THROWN = Do odbo\u010dky

# Note: the following two properties file strings are intended for use as parameter {3}
# of LN_MSG_REQ_SWITCH
LN_MSG_SW_OUTPUT_STATE_ON = V\u00fdstup Zapnuto
LN_MSG_SW_OUTPUT_STATE_OFF = V\u00fdstup Vypnuto

# Note: in LN_MSG_THROTTLE_ID, the following string replacements will be used:
#   {0} is replaced with a hexadecimal string representing the ID2 value; the string
#       hexadecimal representation is created using LN_MSG_HEXADECIMAL_REPRESENTATION
#   {1} is replaced with a hexadecimal string representing the ID1 value; the string
#       hexadecimal representation is created using LN_MSG_HEXADECIMAL_REPRESENTATION
#   {2} is replaced with the integer representation of the combined ID1 and ID2 bytes

LN_MSG_THROTTLE_ID = {0} {1} ({2})

# Note: in LN_MSG_HEXADECIMAL_BYTE_REPRESENTATION, the following string replacement
# will be used:
#   {0} the string containing a raw hexadecimal value, without any prefix or suffix, such as 7A
LN_MSG_HEXADECIMAL_REPRESENTATION = 0x{0}

# Note: in LN_MSG_SW_STATE, the following string replacements will be used:
#   {0} is replaced with the turnout 'system name', such as 'LT51'
#   {1} is replaced with the turnout 'user name', if defined, such as 'West Allis Switch'
LN_MSG_SW_STATE = Po\u017eadavek stav v\u00fdhybky {0} ({1}).\n

LN_MSG_SLOT_REQ_SLOT_FC_SLOT = Po\u017eadavek na informaci o modelov\u00fdch hodin\u00e1ch.\n
LN_MSG_SLOT_REQ_SLOT_CFG_SLOT = Po\u017eadavek centr\u00e1ly OpSwitches (nebo DCS210/DCS240 kontrola na v\u00edce centr\u00e1l v LocoNet).\n
LN_MSG_SLOT_REQ_SLOT_EXT_CFG_SLOT = Po\u017eadavek centr\u00e1ly roz\u0161\u00ed\u0159en\u00fd OpSwitches (pouze DCS210/DCS240).\n
LN_MSG_SLOT_REQ_SLOT_PRG_SLOT = Po\u017eadavek na informaci o programovac\u00ed koleji.\n

# Note: in LN_MSG_SLOT_REQ_SLOT_LOCO_SLOT, the {0} parameter will be replaced with
# a slot number, i.e. 3
LN_MSG_SLOT_REQ_SLOT_LOCO_SLOT = Po\u017eadavek na data/stav pro slot {0}.\n

LN_MSG_MOVE_SL_GET_DISP = Z\u00edskat naposledy odeslan\u00fd slot.\n

# Note: in LN_MSG_MOVE_SL_NULL_MOVE, the {0} parameter will be replaced with a
# slot number, i.e. 3
LN_MSG_MOVE_SL_NULL_MOVE = Nastavit stav pro slot {0} na Pou\u017e\u00edv\u00e1n (IN_USE).\n

# Note: in LN_MSG_MOVE_SL_DISPATCH_PUT, the {0} parameter will be replaced with a
# slot number, i.e. 3
LN_MSG_MOVE_SL_DISPATCH_PUT = Ozna\u010dit slot {0} jako Odeslan\u00fd (DISPATCHED).\n

# Note: in LN_MSG_MOVE_SL_MOVE, the following parameter substitutions will
# be made:
#   {0} slot number of the "source" slot
#   {1} slot number of the "destination" slot
LN_MSG_MOVE_SL_MOVE = P\u0159esunout data ze slotu {0} do slotu {1}.\n

# Note: in LN_MSG_LINK_SLOTS, the following parameter substitutions will
# be made:
#   {0} slot number of the "source" slot
#   {1} slot number of the "destination" slot
LN_MSG_LINK_SLOTS = P\u0159\u00edp\u0159e\u017e/postrk lokomotivy ve slotu {0} s lokomotivou ve slotu {1}.\n

# Note: in LN_MSG_UNLINK_SLOTS, the following parameter substitutions will
# be made:
#   {0} slot number of the slot to be removed from the consist
#   {1} slot number of the slot from which the other slot is to be removed
LN_MSG_UNLINK_SLOTS = Odstranit lokomotivu ve slotu {0} z p\u0159\u00edp\u0159e\u017ee/postrku s lokomotivou ve slotu {1}.\n

# Note: in LN_MSG_CONSIST_FUNC, the following parameter substitutions will
# be made:
#   {0} slot number
#   {1} string containing direction and F0 thru F4 state information, from
#       LN_MSG_HELPER_DIRF, as appropriate

LN_MSG_CONSIST_FUNC = Nastavit p\u0159\u00edp\u0159e\u017e/postrk ve slotu {0} {1}.\n

LN_MSG_DIRECTION_FWD = Vp\u0159ed
LN_MSG_DIRECTION_REV = Vzad

LN_MSG_FUNC_OFF = Vypnuto
LN_MSG_FUNC_ON = Zapnuto

# Note: in LN_MSG_SLOT_STAT1, the following parameter substitutions will
# be made:
#   {0} slot number
#   {1} status value to be written, in decimal notation
#   {2} status value to be written, in hexadecimal notation
#   {3} consist state to be written, in readable text, from one of LN_MSG_CONSIST_STATE_NONE,
#       LN_MSG_CONSIST_STATE_CON_TOP, LN_MSG_CONSIST_STATE_CON_MID, or
#       LN_MSG_CONSIST_STATE_CON_SUB, as appropriate.  (These Reference Names are found in
#       the bundle at the jmri.jmrix.loconet level.)
#   {4} loco (slot) status, from one of LN_MSG_SLOT_STATE_IN_USE, LN_MSG_SLOT_STATE_FREE,
#       LN_MSG_SLOT_STATE_COMMON, or LN_MSG_SLOT_STATE_IDLE.  (These Reference Names are found in
#       the bundle at the jmri.jmrix.loconet level.)
#   {5} loco speed-step mode, from one of LN_MSG_SLOT_SPEED_STEP_128A,
#       LN_MSG_SLOT_SPEED_STEP_28A, LN_MSG_SLOT_SPEED_STEP_128,  LN_MSG_SLOT_SPEED_STEP_14,
#       LN_MSG_SLOT_SPEED_STEP_28TRI, or  LN_MSG_SLOT_SPEED_STEP_28.  (These Reference
#       Names are found in the bundle at the jmri.jmrix.loconet level.)
LN_MSG_SLOT_STAT1 = Zapsat slot {0} se stavovou hodnotou {1} ({2}) - Lokomotiva je {3}, {4} a pracuje v re\u017eimu {5} rychlostn\u00edch stup\u0148\u016f.\n

LN_MSG_LONG_ACK_LOCO_ADR = LONG_ACK: \u017d\u00c1DN\u00c9 VOLN\u00c9 SLOTY!\n
LN_MSG_LONG_ACK_LINK_SLOTS = LONG_ACK: Neplatn\u00e1 p\u0159\u00edp\u0159e\u017e/postrk, nemohu spojit.\n
LN_MSG_LONG_ACK_SW_ACK_FULL = LONG_ACK: FIFO centr\u00e1ly je pln\u00fd, p\u0159\u00edkaz pro v\u00fdhybku byl odm\u00edtnut.\n
LN_MSG_LONG_ACK_SW_ACK_ACCEPT = LONG_ACK: Centr\u00e1la p\u0159ijala p\u0159\u00edkaz pro v\u00fdhybku.\n

# Note: in LN_MSG_LONG_ACK_SW_ACK_UNKNOWN, parameter {0} will be replaced by a
# hexadecimal representation of the acknowledgement code.
LN_MSG_LONG_ACK_SW_ACK_UNKNOWN = LONG_ACK: Nezn\u00e1m\u00e1 odpov\u011b\u010f na p\u0159\u00edkaz 'Po\u017eadavek V\u00fdhybka s ACK', hodnota {0}.\n

LN_MSG_LONG_ACK_SW_REQ_FAIL = LONG_ACK: Po\u017eadavek V\u00fdhybka selhal!\n

LN_MSG_LONG_ACK_WR_SL_FAIL = LONG_ACK: P\u0159\u00edkaz Slot Z\u00e1pis byl odm\u00edtnut.\n
LN_MSG_LONG_ACK_WR_SL_OK = LONG_ACK: P\u0159\u00edkaz Slot Z\u00e1pis byl p\u0159ijat.\n
LN_MSG_LONG_ACK_WR_SL_PROG_DCS51_OK = LONG_ACK: Odpov\u011b\u010f programov\u00e1n\u00ed DCS51 je pova\u017eov\u00e1na za OK.\n
LN_MSG_LONG_ACK_WR_SL_BLIND  = LONG_ACK: P\u0159\u00edkaz Slot Z\u00e1pis byl slep\u011b akceptov\u00e1n (nebude posl\u00e1na \u017e\u00e1dn\u00e1 odpov\u011b\u010f).\n
LN_MSG_LONG_ACK_WR_SL_NOT_IMPL = LONG_ACK: Funkce nen\u00ed implementov\u00e1na, nebude n\u00e1sledovat \u017e\u00e1dn\u00e1 odpov\u011b\u010f.\n

# Note: in LN_MSG_LONG_ACK_WR_SL_UNKNOWN, parameter {0} will be replaced by a
# hexadecimal representation of the acknowledgement code.
LN_MSG_LONG_ACK_WR_SL_UNKNOWN = LONG_ACK: Nezn\u00e1m\u00e1 odpov\u011b\u010f na Slot Zapsat Datov\u00e1 zpr\u00e1va hodnota {0}.\n

# Note: in LN_MSG_LONG_ACK_SW_STATE, the following parameter substituations will
# be applied:
#   {0} a hexadecimal representation of the acknowledgement code.
#   {1} the turnout position, from one of LN_MSG_SW_STATE_THROWN or
#       LN_MSG_SW_STATE_CLOSED, as appropriate.  (These Reference Names are found
#       in the bundle at the jmri.jmrix.loconet level.)
LN_MSG_LONG_ACK_SW_STATE = LONG_ACK: Odpov\u011b\u0161 centr\u00e1ly na po\u017eadavek stavu v\u00fdhybky {0} ({1}).\n

LN_MSG_LONG_ACK_MOVE_SL_REJECT = LONG_ACK: P\u0159\u00edkaz p\u0159esunout Sloty byl odm\u00edtnut.\n
LN_MSG_LONG_ACK_MOVE_SL_ACCEPT = LONG_ACK: P\u0159\u00edkaz p\u0159esunout Sloty byl p\u0159ijat.\n

# Note: in LN_MSG_LONG_ACK_MOVE_SL_UNKNOWN, parameter {0} will be replaced by a
# hexadecimal representation of the acknowledgement code.
LN_MSG_LONG_ACK_MOVE_SL_UNKNOWN = LONG_ACK: Nezn\u00e1m\u00e1 odpov\u011b\u010f na Slot P\u0159esunut zpr\u00e1va {0}.\n

LN_MSG_LONG_ACK_OPC_IMM_REJECT = LONG_ACK: P\u0159\u00edkaz Odeslat IMM paket byl odm\u00edtnut, buffer je pln\u00fd/zanepr\u00e1zdn\u011bn\u00fd.\n
LN_MSG_LONG_ACK_OPC_IMM_ACCEPT = LONG_ACK: P\u0159\u00edkaz Odeslat IMM paket byl p\u0159ijat.\n
LN_MSG_LONG_ACK_OPC_IMM_UHL_PROG = Long_ACK: Uhlenbrock IB-COM / Intellibox II CV po\u017eadavek programov\u00e1n\u00ed byl p\u0159ijat.\n

# Note: in LN_MSG_LONG_ACK_OPC_IMM_UNKNOWN, parameter {0} will be replaced by a
# hexadecimal representation of the acknowledgement code.
LN_MSG_LONG_ACK_OPC_IMM_UNKNOWN = LONG_ACK: Nezn\u00e1m\u00e1 odpov\u011b\u010f na Odeslat IMM paket hodnota {0}.\n

# Note: in LN_MSG_LONG_ACK_OPC_IMM_LIM_MASTER, the following parameter substituations will
# be applied:
#   {0} a decimal representation of the acknowledgement code.
#   {1} a hexadecimal representation of the acknowledgement code.
LN_MSG_LONG_ACK_OPC_IMM_LIM_MASTER = LONG_ACK: Lim Master odpov\u011bd\u011bl na p\u0159\u00edkaz Odeslat IMM paket {0} ({1}).\n

LN_MSG_LONG_ACK_SPEC_CASE1_2_ACCEPTED = LONG_ACK: Operace OpSwitch p\u0159ijata.\n

# Note: in LN_MSG_LONG_ACK_SPEC_CASE1_2_REPORT, the following parameter substituations will
# be applied:
#   {0} will be replaced by a value of 0 or 1, corresponding to "thrown" and
#       "closed", respectively.
#   {1} will be replaced by a OpSw state string, from one of LN_MSG_OPC_MULTI_SENSE_OPSW_HELPER_THROWN or
#       LN_MSG_OPC_MULTI_SENSE_OPSW_HELPER_CLOSED, as appropriate.  (These Reference Names are found
#       in the bundle at the jmri.jmrix.loconet level.)
LN_MSG_LONG_ACK_SPEC_CASE1_2_REPORT = LONG_ACK: Zpr\u00e1va OpSwitch - opSwitch je {0} ({1}).\n

# Note: in LN_MSG_LONG_ACK_SLOT_NOT_SUPPORTED, the following parameter substituations will
# be applied:
#   {0} a hexadecimal representation of the OPCODE for which its is a reply
LN_MSG_LONG_ACK_SLOT_NOT_SUPPORTED = LONG_ACK: opcode {0} nepodporuje po\u017eadovan\u00fd Slot.\n

# Note: in LN_MSG_OPC_INPUT_REP, the following parameter substituations will
# be applied:
#   {0} the sensor's system name.
#   {1} the sensor's user name, when available.
#   {2} the sensor's state string, from one of LN_MSG_SENSOR_STATE_LOW or
#       LN_MSG_SENSOR_STATE_HIGH, as appropriate.  (These Reference Names are found
#       in the bundle at the jmri.jmrix.loconet level.)
#   {3} is a string representing the BDL board name, its Board ID number, and the
#       BDL input number which could be the source of this report.  This string is
#       generated using LN_MSG_OPC_INPUT_REP_BDL_INFO.
#   {4} is a string containing a list of other board types which may be the source
#       of this report, from one of LN_MSG_OPC_INPUT_REP_ALL_EQUIV_BOARDS or
#       LN_MSG_OPC_INPUT_REP_NO_SE8C, as appropriate.  Note that for sensor numbers
#       above a certain threhold, the SE8c cannot be a source for this report, so
#       will not appear in the message.
#   {5} is a string from one of LN_MSG_OPC_INPUT_REPORT_INPUT_NAMES_ALL_EQUIV_BOARDS = {0}/{1}/{2}
#       LN_MSG_OPC_INPUT_REPORT_INPUT_NAMES_NO_SE8C or LN_MSG_OPC_INPUT_REP, containing
#       the computed list of board input pins.
LN_MSG_OPC_INPUT_REP = Sn\u00edma\u010d {0} ({1}) je {2}.  ({3}; {4}, {5}).\n

# Note: in LN_MSG_OPC_INPUT_REP_BDL_INFO, the following parameter substituations will
# be applied:
#   {0} the computed BoardID number, in decimal.
#   {1} the computed detection section input number, in decimal.
LN_MSG_OPC_INPUT_REP_BDL_INFO = BDL16 # {0}, DS{1}

# Note: in LN_MSG_OPC_INPUT_REP_NO_SE8C, parameter {0} will be replaced by a
# decimal representation of the computed Board ID number.
LN_MSG_OPC_INPUT_REP_ALL_EQUIV_BOARDS = DS54/DS64/SE8c # {0}

# Note: in LN_MSG_OPC_INPUT_REP_NO_SE8C, parameter {0} will be replaced by a
# decimal representation of the computed Board ID number.
LN_MSG_OPC_INPUT_REP_NO_SE8C = DS54/DS64 # {0}

LN_MSG_OPC_INPUT_REPORT_INPUT_NAMES_ALL_EQUIV_BOARDS = {0}/{1}/{2}
LN_MSG_OPC_INPUT_REPORT_INPUT_NAMES_NO_SE8C = {0}/{1}

# Note: in LN_MSG_OPC_SW_REP_OUTPUT_STATE, the following parameter substituations will
# be applied:
#   {0} the turnout's system name.
#   {1} the turnout's user name, when available.
#   {2} the turnout's "closed output" state string, from one of LN_MSG_SENSOR_SW_OUTPUT_STATE_ON or
#       LN_MSG_SENSOR_SW_OUTPUT_STATE_OFF, as appropriate.
#   {3} the turnout's "thrown output" state string, from one of LN_MSG_SENSOR_SW_OUTPUT_STATE_ON or
#       LN_MSG_SENSOR_SW_OUTPUT_STATE_OFF, as appropriate.
LN_MSG_OPC_SW_REP_OUTPUT_STATE = V\u00fdhybka {0} ({1}) stav v\u00fdstupu: v\u00fdstup P\u0159\u00edmo je {2}, v\u00fdstup Do odbo\u010dky je {3}.\n

LN_MSG_SENSOR_SW_OUTPUT_STATE_ON = Zapnuto (propojeno)
LN_MSG_SENSOR_SW_OUTPUT_STATE_OFF = Vypnuto (rozpojeno)

# Note: in LN_MSG_OPC_SW_REP_INPUTS_STATE, the following parameter substituations will
# be applied:
#   {0} the turnout's system name.
#   {1} the turnout's user name, when available.
#   {2} the turnout's "Switch input" type string, from one of LN_MSG_SENSOR_SW_INPUT_TYPE_HI or
#       LN_MSG_SENSOR_SW_INPUT_TYPE_LO, as appropriate.
#   {2} the turnout's "Switch input" state string, from one of LN_MSG_SENSOR_SW_INPUT_STATE_HI or
#       LN_MSG_SENSOR_SW_INPUT_STATE_LO, as appropriate.
LN_MSG_OPC_SW_REP_INPUTS_STATE = V\u00fdhybka {0} ({1}) {2} je {3}.\n

LN_MSG_SENSOR_SW_INPUT_TYPE_HI = Vstup V\u00fdhybka
LN_MSG_SENSOR_SW_INPUT_TYPE_LO = Vstup Pomocn\u00fd
LN_MSG_SENSOR_SW_INPUT_STATE_HI = P\u0159\u00edmo (vstup Vypnuto)
LN_MSG_SENSOR_SW_INPUT_STATE_LO = Do odbo\u010dky (vstup Zapnuto)

# Note: in LN_MSG_OPC_SW_REQ_NORMAL_WITH_USERNAME, the following string replacements will be used:
#   {0} is replaced with the turnout 'system name', such as 'LT51'
#   {1} is replaced with the turnout 'user name', if defined, such as 'West Allis Switch'
#   {2} is replaced with the turnout position.  This will be the text from one of
#       these two properties file strings:
#           LN_MSG_SW_POS_CLOSED
#       or
#           LN_MSG_SW_POS_THROWN
#   {3} is replaced with the turnout output state.  This will be the text from one
#       of these two properites file strings:
#           LN_MSG_SW_OUTPUT_STATE_ON
#       or
#           LN_MSG_SW_OUTPUT_STAT_OFF
LN_MSG_OPC_SW_REQ_NORMAL_WITH_USERNAME = V\u00fdhybka {0} ({1}) po\u017eaduje {2} ({3}).\n

# Note: in LN_MSG_OPC_SW_REQ_NORMAL_WITHOUT_USERNAME, the following string replacements will be used:
#   {0} is replaced with the turnout 'system name', such as 'LT51'
#   {1} is replaced with the turnout position.  This will be the text from one of
#       these two properties file strings:
#           LN_MSG_SW_POS_CLOSED
#       or
#           LN_MSG_SW_POS_THROWN
#   {2} is replaced with the turnout output state.  This will be the text from one
#       of these two properites file strings:
#           LN_MSG_SW_OUTPUT_STATE_ON
#       or
#           LN_MSG_SW_OUTPUT_STAT_OFF
LN_MSG_OPC_SW_REQ_NORMAL_WITHOUT_USERNAME = V\u00fdhybka {0} po\u017eaduje {1} ({2}).\n

# Note: in LN_MSG_OPC_SW_REQ_INTERROGATE_TURNOUTS and LN_MSG_OPC_SW_REQ_INTERROGATE_SENSORS_TURNOUTS,
# the following string replacements will be used:
#   {0} the "a" bit from the LocoNet message
#   {1} the "c" bit from the LocoNet message
#   {2} the "d" bit from the LocoNet message
#   {3} a string containing the address ranges being queried
LN_MSG_OPC_SW_REQ_INTERROGATE_TURNOUTS = Dotaz dekod\u00e9ru p\u0159\u00edslu\u0161enstv\u00ed s bity a/c/b z {0}/{1}/{2}; v\u00fdhybky...\n{3}.\n
LN_MSG_OPC_SW_REQ_INTERROGATE_SENSORS_TURNOUTS = Dotaz LocoNet V\u00fdhybky/Sn\u00edma\u010de s bity a/c/b z {0}/{1}/{2}; adresy...\n{3}.\n

# Note: in LN_MSG_OPC_LOCO_SND, the following string replacements will be used:
#   {0} slot number
#   {1} the F5 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {2} the F6 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {3} the F7 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {4} the F8 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
LN_MSG_OPC_LOCO_SND = Nastavit lokomotivu ve Slotu {0} Zvuk1/F5={1} Zvuk2/F6={2} Zvuk3/F7={3} Zvuk4/F8={4}.\n

# Note: in LN_MSG_OPC_LOCO_DIRF, the following parameter substitutions will
# be made:
#   {0} slot number
#   {1} direction and F0 thru F4 values, via LN_MSG_HELPER_DIRF, as appropriate
LN_MSG_OPC_LOCO_DIRF = Nastavit lokomotivu ve Slotu {0} {1}.\n


# Note: in LN_MSG_HELPER_DIRF, the following parameter substitutions will
# be made:
#   {0} direction of travel, from LN_MSG_DIRECTION_FWD or LN_MSG_DIRECTION_REV,
#       as required
#   {1} the F0 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {2} the F1 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {3} the F2 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {4} the F3 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {5} the F4 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required

LN_MSG_HELPER_DIRF = sm\u011br {0} F0={1} F1={2} F2={3} F3={4} F4={5}

# Note: in LN_MSG_OPC_LOCO_SPD_ESTOP, parameter {0} will be replaced by a
# decimal representation of the slot number.
LN_MSG_OPC_LOCO_SPD_ESTOP = Nastavit rychlost lokomotivy ve Slotu {0} na Nouzov\u00fd STOP!\n

# Note: in LN_MSG_OPC_LOCO_SPD_NORMAL, the following parameter substitutions will
# be made:
#   {0} slot number
#   {1} speed number
LN_MSG_OPC_LOCO_SPD_NORMAL = Nastavit rychlost lokomotivy ve Slotu {0} na {1}.\n

LN_MSG_OPC_DF_TETHERLESS_QUERY = Dotaz bezdr\u00e1tov\u00e9 p\u0159ij\u00edma\u010de.\n

# Note: in LN_MSG_OPC_DF_SET_LOCONETID, parameter {0} will be replaced by a
# decimal representation of the new LocoNet ID number.
LN_MSG_OPC_DF_SET_LOCONETID = Nastavit LocoNet ID na {0}.\n

# Note: in LN_MSG_OPC_D7_TETHERLESS_REPORT_UR92, the following parameter substitutions will
# be made:
#   {0} a decimal representation of the LocoNet ID number
#   {1} a string which is empty when duplex is not supported, else from
#       LN_MSG_HELPER_D7_UR92_DUPLEX.
LN_MSG_OPC_D7_TETHERLESS_REPORT_UR92 = UR92 odpov\u00edd\u00e1 s LocoNet ID {0}{1}.\n

LN_MSG_HELPER_D7_UR92_DUPLEX = , duplex povolen

# Note: in LN_MSG_OPC_DF_TETHERLESS_UNKNOWN and LN_MSG_OPC_D7_TETHERLESS_REPORT_UR91,
# parameter {0} will be replaced by a decimal representation of the LocoNet ID number.
LN_MSG_OPC_D7_TETHERLESS_REPORT_UR90 = UR90 odpov\u00edd\u00e1 s LocoNet ID {0}.\n
LN_MSG_OPC_D7_TETHERLESS_REPORT_UR91 = UR91 odpov\u00edd\u00e1 s LocoNet ID {0}.\n

# Note: in LN_MSG_OPC_MULTI_SENSE_POWER_PM4X, the following parameter substitutions will
# be made:
#   {0} a decimal representation of the PM4x Board ID number
#   {1} a string which represents the PM4x Sub-district 1 operating mode, from
#       LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_AUTOREV or
#       LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_PROTECT, as required
#   {2} a string which represents the PM42 Sub-district 1 state, from one of
#       LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_REV,
#       LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_NORM,
#       LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_SHORT,
#       LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_NONSHORT, as required
#   {3} Same description as {1}, except for Sub-district 2.
#   {4} Same description as {2}, except for Sub-district 2.
#   {5} Same description as {1}, except for Sub-district 3,
#   {6} Same description as {2}, except for Sub-district 3.
#   {7} Same description as {1}, except for Sub-district 4.
#   {8} Same description as {2}, except for Sub-district 4.
LN_MSG_OPC_MULTI_SENSE_POWER_PM4X = PM4x (Deska ID {0}) Zpr\u00e1va Stav Nap\u00e1jen\u00ed\n\tPodoblast 1 - {1} {2}.\n\tPodoblast 2 - {3} {4}.\n\tPodoblast 3 - {5} {6}.\n\tPodoblast 4 - {7} {8}.\n
LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_AUTOREV = Re\u017eim Automatick\u00e9ho p\u0159ep\u00f3lov\u00e1n\u00ed -
LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_PROTECT = Re\u017eim Jisti\u010d -
LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_REV = Zp\u011btn\u00fd
LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_NORM = Norm\u00e1ln\u00ed
LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_SHORT = Zkratov\u00e1n
LN_MSG_OPC_MULTI_SENSE_POWER_PM4X_HELPER_MODE_NONSHORT = Nezkratov\u00e1n

# Note: in LN_MSG_OPC_MULTI_SENSE_OPSW_ACCESS and LN_MSG_OPC_MULTI_SENSE_OPSW_ACCESS_QUERY,
# the following parameter substitutions will be made:
#   {0} a string representing the board name, from one of
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_BDL16X,
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_DS64,
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_PM4X,
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_SE8C, or
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_UNKNOWN, as required.
#   {1} is a number representing the device's Board ID number
#   {2} is a decimal number representing the OpSw number which is being accessed
#   {3} is a decimal number representing the data written to or read from the OpSw
#   {4} is a string representing the equivalent data state, from
#       LN_MSG_OPC_MULTI_SENSE_OPSW_HELPER_THROWN or LN_MSG_OPC_MULTI_SENSE_OPSW_HELPER_CLOSED,
#       as appropriate.
LN_MSG_OPC_MULTI_SENSE_OPSW_WRITE_ACCESS = {0} {1} Zapsat OpSw{2} hodnota={3} ({4}).\n
LN_MSG_OPC_MULTI_SENSE_OPSW_QUERY_ACCESS = {0} {1} Dotaz OpSw{2}.\n
LN_MSG_OPC_MULTI_SENSE_OPSW_ACCESS_QUERY_ALL = PM4x 1 Dotaz OpSw1 - Chov\u00e1 se tak\u00e9 jako dotazovac\u00ed za\u0159\u00edzen\u00ed u n\u011bkter\u00fdch typ\u016f za\u0159\u00edzen\u00ed.\n
LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_BDL16X = BDL16x
LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_DS64 = DS64
LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_PM4X = PM4x
LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_SE8C = SE8C
LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_UNKNOWN = Nezn\u00e1m\u00fd typ za\u0159\u00edzen\u00ed
LN_MSG_OPC_MULTI_SENSE_OPSW_HELPER_THROWN = Do odbo\u010dky
LN_MSG_OPC_MULTI_SENSE_OPSW_HELPER_CLOSED = P\u0159\u00edmo

# Note: in LN_MSG_OPC_MULTI_SENSE_OPSW_DEV_TYPE_RPT, the following parameter
# substitutions will be made:
#   {0} a string representing the board name, from one of
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_BDL16X,
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_DS64,
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_PM4X,
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_SE8C, or
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_UNKNOWN, as required.
#   {1} is a number representing the device's Board ID number
#   {2} is a string representing the device version, or
#       LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_VER_UNKNOWN, as required
LN_MSG_OPC_MULTI_SENSE_OPSW_DEV_TYPE_RPT = Zpr\u00e1va Typ za\u0159\u00edzen\u00ed - {0} Deska ID {1} Verze {2} je p\u0159\u00edtomen.\n
LN_MSG_OPC_MULTI_SENSE_DEV_RPT_HELPER_VER_UNKNOWN = (nezn\u00e1m\u00fd)

# Note: in LN_MSG_OPC_MULTI_SENSE_OPSW_UNKNOWN_OP, the following parameter
# substitutions will be made:
#   {0} is a number representing the device's Board ID number
#   {1} is a hexadecimal number representing the unknown command type
LN_MSG_OPC_MULTI_SENSE_OPSW_UNKNOWN_OP = Nezn\u00e1m\u00e1 zpr\u00e1va OPC_MULTI_SENSE, Deska ID {0} nezn\u00e1m\u00fd CMD={1}.\n

# Note: in # LN_MSG_OPC_MULTI_SENSE_TRANSP_REPORT_WITH_BXP88, the following parameter
# substitutions will be made:
#   {0} is a string representing the decoder address which triggered the report,
#       and whether that address is 'long' or 'short', from
#       LN_MSG_LOCO_ADDRESS_HELPER_MIXED_ADDRESS or
#       LN_MSG_LOCO_ADDRESS_HELPER_UNMIXED_ADDRESS, as appropriate
#   {1} is a string representing the new state of the decoder in the zone, from
#       LN_MSG_OPC_MULTI_SENSE_TRANSP_HELPER_IS_PRESENT or LN_MSG_OPC_MULTI_SENSE_TRANSP_HELPER_IS_ABSENT,
#       as appropriate.
#   {2} is a string representing the system name of the reporter associated with the
#       transponding report, if available.
#   {3} is a string representing the user name of the reporter associated with the
#       transponding report, if available.
#   {4} is a number representing the BDL16x device's Board ID number
#   {5} is a string representing the BDL16x zone which triggered the report, from one of
#       LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEA, LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEB,
#       LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEC, LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONED,
#       LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEE, LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEF,
#       LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEG, LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEH,
#       or LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONE_UNKNOWN, as approprite.
#   {6} is a number representing the BXP88 device's Board ID number
#   {7} is a number representing the BXP88 transponding section (zone) number
#   {8} is a number representing the BXPA1 Board ID Number
LN_MSG_OPC_MULTI_SENSE_TRANSP_REPORT_WITH_BXP88 = Adresa Transpond\u00e9r {0} {1} {2} ({3}) (BDL16x Deska ID {4} RX4 z\u00f3na {5} nebo BXP88 Deska ID {6} sekce {7} nebo BXPA1 Deska ID {8} sekce).\n

# Note: in # LN_MSG_OPC_MULTI_SENSE_TRANSP_REPORT_NOT_BDL16X, the following parameter
# substitutions will be made:
#   {0} is a string representing the decoder address which triggered the report,
#       and whether that address is 'long' or 'short', from
#       LN_MSG_LOCO_ADDRESS_HELPER_MIXED_ADDRESS or
#       LN_MSG_LOCO_ADDRESS_HELPER_UNMIXED_ADDRESS, as appropriate
#   {1} is a string representing the new state of the decoder in the zone, from
#       LN_MSG_OPC_MULTI_SENSE_TRANSP_HELPER_IS_PRESENT or LN_MSG_OPC_MULTI_SENSE_TRANSP_HELPER_IS_ABSENT,
#       as appropriate.
#   {2} is a string representing the system name of the reporter associated with the
#       transponding report, if available.
#   {3} is a string representing the user name of the reporter associated with the
#       transponding report, if available.
#   {4} is a number representing the BXP88 device's Board ID number
#   {5} is a number representing the BXP88 transponding section (zone) number
#   {6} is a number representing the BXPA1 Board ID Number
LN_MSG_OPC_MULTI_SENSE_TRANSP_REPORT_NOT_BDL16X = Adresa Transpond\u00e9r {0} {1} {2} ({3}) (BXP88 Deska ID {4} sekce {5} nebo BXPA1 Deska ID {6} sekce).\n

LN_MSG_OPC_MULTI_SENSE_TRANSP_HELPER_IS_PRESENT = p\u0159\u00edtomen na
LN_MSG_OPC_MULTI_SENSE_TRANSP_HELPER_IS_ABSENT = nep\u0159\u00edtomen na 

LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEA = A
LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEB = B
LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEC = C
LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONED = D
LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEE = E
LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEF = F
LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEG = G
LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONEH = H
# Note: in LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONE_UNKNOWN, parameter {0} will be
# replaced by a decimal representation of the LS 4 bits of byte 2 of the message.
LN_MSG_OPC_MULTI_SENSE_TRANSP_ZONE_UNKNOWN = (Nezn\u00e1m\u00fd {0})

# Note: in LN_MSG_SLOT_ACCESS_FAST_CLOCK, the following parameter
# substitutions will be made:
#   {0} is a string representing the type of access, from
#       LN_MSG_SLOT_HELPER_ACCESS_TYPE_REQUEST or LN_MSG_SLOT_HELPER_ACCESS_TYPE_RESPONSE,
#       as appropriate.
#   {1} is a string representing whether the message shows the fast clock as synchronized,
#       and is an empty string when unsynchronized, or from LN_MSG_SLOT_HELPER_FC_SYNC
#       when synchronized, as appropriate.
#   {2} is a string representing whether the fast clock is running or frozen, from
#       LN_MSG_SLOT_HELPER_FC_RUNNING or LN_MSG_SLOT_HELPER_FC_FROZEN, as appropriate.
#   {3} is an integer representing the fast clock rate.
#   {4} is an integer representing the day.
#   {5} is a string representing the time, from LN_MSG_SLOT_HELPER_FC_TIME.
#   {6} is a string showing a representation of the Throttle ID, from LN_MSG_THROTTLE_ID,
#       as appropriate.
#   {7} is a string representing the interpreted track status, from
#       LN_MSG_SLOT_HELPER_TRK_STAT, as appropriate.
LN_MSG_SLOT_ACCESS_FAST_CLOCK = {0} Modelov\u00e9 hodiny jsou {1} {2}, zrychlen\u00ed je {3}:1. Den {4}, {5}. Naposledy nastaven\u00e9 od ID {6}.\n\t{7}.\n

LN_MSG_SLOT_HELPER_ACCESS_TYPE_REQUEST = Po\u017eadavek
LN_MSG_SLOT_HELPER_ACCESS_TYPE_RESPONSE = Odpov\u011b\u010f
LN_MSG_SLOT_HELPER_FC_SYNC = Synchronizov\u00e1no,
LN_MSG_SLOT_HELPER_FC_RUNNING = B\u011b\u017e\u00edc\u00ed
LN_MSG_SLOT_HELPER_FC_FROZEN = Zmazeno

# Note: in LN_MSG_SLOT_HELPER_FC_TIME, the following parameter
# substitutions will be made:
#   {0} is string containing the localized fast-clock time including hours and minutes.
#       The code using this ReferenceName performs the localization, in order to guarantee
#       that only hours and minutes are provided in the output.
LN_MSG_SLOT_HELPER_FC_TIME = {0}

# Note: in LN_MSG_SLOT_HELPER_TRK_STAT, the following parameter
# substitutions will be made:
#   {0} is a string which describes the LocoNet messaging capabilities, from
#       LN_MSG_SLOT_HELPER_TRK_STATUS_LN1_1 or LN_MSG_SLOT_HELPER_TRK_STATUS_DT200,
#       as appropriate.
#   {1} is a string which describes whether track power is on or off, from
#       LN_MSG_SLOT_HELPER_TRK_STATUS_TRK_PWR_ON, LN_MSG_SLOT_HELPER_TRK_STATUS_TRK_PWR_OFF,
#       as appropriate.
#   {2} is a string which describes whether track signal is paused or running, from
#       LN_MSG_SLOT_HELPER_TRK_STATUS_TRK_PWR_PAUSED, LN_MSG_SLOT_HELPER_TRK_STATUS_TRK_PWR_RUNNING,
#       as appropriate.
#   {3} is a string which describes the current programming track state, from
#       LN_MSG_SLOT_HELPER_TRK_STATUS_PRG_BUSY or LN_MSG_SLOT_HELPER_TRK_STATUS_PRG_AVAILABLE,
#       as appropriate.
LN_MSG_SLOT_HELPER_TRK_STAT = Master podporuje {0}; Stav provozn\u00ed koleje: {1}/{2}; Stav programovac\u00ed koleje: {3}

LN_MSG_SLOT_HELPER_TRK_STATUS_LN1_1 = LocoNet 1.1
LN_MSG_SLOT_HELPER_TRK_STATUS_DT200 = DT200

LN_MSG_SLOT_HELPER_TRK_STATUS_TRK_PWR_ON = Zapnuto
LN_MSG_SLOT_HELPER_TRK_STATUS_TRK_PWR_OFF = Vypnuto
LN_MSG_SLOT_HELPER_TRK_STATUS_TRK_PWR_PAUSED = Pozastaveno
LN_MSG_SLOT_HELPER_TRK_STATUS_TRK_PWR_RUNNING = B\u011b\u017e\u00ed
LN_MSG_SLOT_HELPER_TRK_STATUS_PRG_BUSY = Zanepr\u00e1zdn\u011bn
LN_MSG_SLOT_HELPER_TRK_STATUS_PRG_AVAILABLE = K dispozici

# Note: for the following messages:
#   LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_PAGED_RD,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_PAGED_WR,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_DIR_BYTE_RD,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_DIR_BYTE_WR,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_DIR_BIT_RD,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_DIR_BIT_WR,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_REG_BYTE_RD,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_REG_BYTE_WR,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_RD_RESERVED,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_WR_RESERVED,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_UHLENBROCK_RD, and
#   LN_MSG_SLOT_PROG_MODE_REQUEST_UHLENBROCK_WR
# the following parameter substitution will be made:
#   {0} is a description of the CV access, from
#       LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_WRITE_REQ or
#       LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_READ_REQ, as appropriate.
LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_PAGED_RD = \u010cten\u00ed Byte ve Str\u00e1nkov\u00e9m re\u017eimu na Programovac\u00ed koleji: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_PAGED_WR = Z\u00e1pis Byte ve Str\u00e1nkov\u00e9m re\u017eimu na Programovac\u00ed koleji: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_DIR_BYTE_RD = \u010cten\u00ed Byte v P\u0159\u00edm\u00e9m re\u017eimu na Programovac\u00ed koleji: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_DIR_BYTE_WR = Z\u00e1pis Byte v P\u0159\u00edm\u00e9m re\u017eimu na Programovac\u00ed koleji: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_DIR_BIT_RD = \u010cten\u00ed Bitu v P\u0159\u00edm\u00e9m re\u017eimu na Programovac\u00ed koleji: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_DIR_BIT_WR = Z\u00e1pis Bitu v P\u0159\u00edm\u00e9m re\u017eimu na Programovac\u00ed koleji: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_REG_BYTE_RD = \u010cten\u00ed Byte v Registrov\u00e9m re\u017eimu na Programovac\u00ed koleji: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_REG_BYTE_WR = Z\u00e1pis Byte v Registrov\u00e9m re\u017eimu na Programovac\u00ed koleji: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_RD_RESERVED = Programovac\u00ed kolej Zji\u0161t\u011bn REZERVOVAN\u00dd RE\u017dIM \u010cten\u00ed!: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_SRVC_TRK_WR_RESERVED = Programovac\u00ed kolej Zji\u0161t\u011bn REZERVOVAN\u00dd RE\u017dIM Z\u00e1pis!: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_UHLENBROCK_RD = Uhlenbrock IB-COM / Intellibox II Programov\u00e1n\u00ed \u010cten\u00ed: {0}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_UHLENBROCK_WR = Uhlenbrock IB-COM / Intellibox II Programov\u00e1n\u00ed Z\u00e1pis: {0}.\n

# Note: for the following messages:
#   LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BYTE_RD_NO_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BYTE_WR_NO_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BYTE_RD_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BYTE_WR_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BIT_RD_NO_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BIT_WR_NO_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BIT_RD_FEEDBACK,
#   and LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BIT_WR_FEEDBACK
# the following parameter substitution will be made:
#   {0} is the DCC address of the decoder being programmed.
#   {1} is a description of the CV access, from
#       LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_WRITE_REQ or
#       LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_READ_REQ, as appropriate.
LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BYTE_RD_NO_FEEDBACK = \u010cten\u00ed Byte (bez ohlasu) na Provozn\u00ed koleji (re\u017eim Ops): Adresa dekod\u00e9ru {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BYTE_WR_NO_FEEDBACK = Z\u00e1pis Byte (bez ohlasu) na Provozn\u00ed koleji (re\u017eim Ops): Adresa dekod\u00e9ru {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BYTE_RD_FEEDBACK = \u010cten\u00ed Byte na Provozn\u00ed koleji (re\u017eim Ops): Adresa dekod\u00e9ru {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BYTE_WR_FEEDBACK = Z\u00e1pis Byte na Provozn\u00ed koleji (re\u017eim Ops): Adresa dekod\u00e9ru {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BIT_RD_NO_FEEDBACK = \u010cten\u00ed Bitu (bez ohlasu) na Provozn\u00ed koleji (re\u017eim Ops): Adresa dekod\u00e9ru {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BIT_WR_NO_FEEDBACK = Z\u00e1pis Bitu (bez ohlasu) na Provozn\u00ed koleji (re\u017eim Ops): Adresa dekod\u00e9ru {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BIT_RD_FEEDBACK = \u010cten\u00ed Bitu na Provozn\u00ed koleji (re\u017eim Ops): Adresa dekod\u00e9ru {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_REQUEST_OPS_BIT_WR_FEEDBACK = Z\u00e1pis Bitu na Provozn\u00ed koleji (re\u017eim Ops): Adresa dekod\u00e9ru {0}: {1}.\n

# Note: in LN_MSG_SLOT_PROG_MODE_REQUEST_UNKNOWN, the following parameter
# substitutions will be made:
#   {0} is a decimal number reflecting the requested programming mode.
#   {1} is a string containing the hexadecimal number which reflects the requested
#       programming mode, generated from LN_MSG_HEXADECIMAL_REPRESENTATION.
LN_MSG_SLOT_PROG_MODE_REQUEST_UNKNOWN = Nezn\u00e1m\u00fd Slot programov\u00e1n\u00ed p\u0159\u00edstup s re\u017eimem programov\u00e1n\u00ed {0} ({1}).\n

LN_MSG_SLOT_PROG_HELPER_RESPONSE_USER_ABORT = Selh\u00e1n\u00ed, P\u0159eru\u0161eno u\u017eivatelem
LN_MSG_SLOT_PROG_HELPER_RESPONSE_NO_READ_COMPARE_ACK_DETECT = Selh\u00e1n\u00ed, \u010cten\u00ed Potvrzen\u00ed porovn\u00e1n\u00edm nebylo zji\u0161t\u011bno
LN_MSG_SLOT_PROG_HELPER_RESPONSE_NO_WRITE_ACK_DETECT = Selh\u00e1n\u00ed, \u017d\u00e1dn\u00e9 Potvrzen\u00ed z\u00e1pisu od dekod\u00e9ru
LN_MSG_SLOT_PROG_HELPER_RESPONSE_NO_LOCO_ON_PROGRAMMING_TRACK = Selh\u00e1n\u00ed, Servisn\u00ed re\u017eim pr\u00e1zdn\u00e1 programovac\u00ed kolej
LN_MSG_SLOT_PROG_HELPER_RESPONSE_SUCCESS_VIA_RX4_BDL16X = Bylo \u00fasp\u011b\u0161n\u00e9 prost\u0159ednictv\u00edm RX4/BDL16x
LN_MSG_SLOT_PROG_HELPER_RESPONSE_SUCCEEDED = Bylo \u00fasp\u011b\u0161n\u00e9

# for LN_MSG_SLOT_PROG_HELPER_RESPONSE_UNDECODED, the following parameter
# substitution will be made:
#   {0} is a string showing the hexadecimal value representing programming response failure code
LN_MSG_SLOT_PROG_HELPER_RESPONSE_UNDECODED = Nelze dek\u00f3dovat odpov\u011b\u010f = {0}

# Note: for the following messages:
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_PAGED_RD,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_PAGED_WR,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_DIR_BYTE_RD,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_DIR_BYTE_WR,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_DIR_BIT_RD,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_DIR_BIT_WR,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_REG_BYTE_RD,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_REG_BYTE_WR,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_RD_RESERVED,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_WR_RESERVED,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_UHLENBROCK_RD, and
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_UHLENBROCK_WR
# the following parameter substitution will be made:
#   {0} is a string reporting the details of the programmer's pass/fail status, from
#       one of :
#           LN_MSG_SLOT_PROG_HELPER_RESPONSE_USER_ABORT,
#           LN_MSG_SLOT_PROG_HELPER_RESPONSE_NO_READ_COMPARE_ACK_DETECT,
#           LN_MSG_SLOT_PROG_HELPER_RESPONSE_NO_WRITE_ACK_DETECT,
#           LN_MSG_SLOT_PROG_HELPER_RESPONSE_NO_LOCO_ON_PROGRAMMING_TRACK,
#           LN_MSG_SLOT_PROG_HELPER_RESPONSE_SUCCESS_VIA_RX4_BDL16X, or
#           LN_MSG_SLOT_PROG_HELPER_RESPONSE_SUCCEEDED
#       as appropriate.
#   {1} is a description of the CV access, from LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_REPLY.
LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_PAGED_RD = Odpov\u011b\u010f programov\u00e1n\u00ed: \u010cten\u00ed Byte ve Str\u00e1nkov\u00e9m re\u017eimu na Programovac\u00ed koleji {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_PAGED_WR = Odpov\u011b\u010f programov\u00e1n\u00ed: Z\u00e1pis Byte ve Str\u00e1nkov\u00e9m re\u017eimu na Programovac\u00ed koleji {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_DIR_BYTE_RD = Odpov\u011b\u010f programov\u00e1n\u00ed: \u010cten\u00ed Byte v P\u0159\u00edm\u00e9m re\u017eimu na Programovac\u00ed koleji {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_DIR_BYTE_WR = Odpov\u011b\u010f programov\u00e1n\u00ed: Z\u00e1pis Byte v P\u0159\u00edm\u00e9m re\u017eimu na Programovac\u00ed koleji {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_DIR_BIT_RD = Odpov\u011b\u010f programov\u00e1n\u00ed: \u010cten\u00ed Bitu v P\u0159\u00edm\u00e9m re\u017eimu na Programovac\u00ed koleji {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_DIR_BIT_WR = Odpov\u011b\u010f programov\u00e1n\u00ed: Z\u00e1pis Bitu v P\u0159\u00edm\u00e9m re\u017eimu na Programovac\u00ed koleji {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_REG_BYTE_RD = Odpov\u011b\u010f programov\u00e1n\u00ed: \u010cten\u00ed Byte v Registrov\u00e9m re\u017eimu na Programovac\u00ed koleji {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_REG_BYTE_WR = Odpov\u011b\u010f programov\u00e1n\u00ed: Z\u00e1pis Byte v Registrov\u00e9m re\u017eimu na Programovac\u00ed koleji {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_RD_RESERVED = Odpov\u011b\u010f programov\u00e1n\u00ed: Programovac\u00ed kolej Zji\u0161t\u011bn REZERVOVAN\u00dd RE\u017dIM \u010cten\u00ed!: {0}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_SRVC_TRK_WR_RESERVED = Odpov\u011b\u010f programov\u00e1n\u00ed: Programovac\u00ed kolej Zji\u0161t\u011bn REZERVOVAN\u00dd RE\u017dIM Z\u00e1pis!: {0}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_UHLENBROCK_RD = Odpov\u011b\u010f programov\u00e1n\u00ed: Uhlenbrock IB-COM / Intellibox II Programov\u00e1n\u00ed \u010cten\u00ed {0}: {1}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_UHLENBROCK_WR = Odpov\u011b\u010f programov\u00e1n\u00ed: Uhlenbrock IB-COM / Intellibox II Programov\u00e1n\u00ed Z\u00e1pis {0}: {1}.\n

# Note: for the following messages:
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BYTE_RD_NO_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BYTE_WR_NO_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BYTE_RD_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BYTE_WR_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BIT_RD_NO_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BIT_WR_NO_FEEDBACK,
#   LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BIT_RD_FEEDBACK,
#   and LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BIT_WR_FEEDBACK
# the following parameter substitution will be made:
#   {0} is a string reporting the details of the programmer's pass/fail status, from
#       Ln_MSG_SLOT_PROG_MODE_HELPER_*, as appropriate.
#   {1} is the DCC address of the decoder being programmed.
#   {2} is a description of the CV access, from
#       LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_REPLY.
LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BYTE_RD_NO_FEEDBACK = Odpov\u011b\u010f programov\u00e1n\u00ed: \u010cten\u00ed Byte (bez ohlasu) na Provozn\u00ed koleji (re\u017eim Ops) {0}: Adresa dekod\u00e9ru {1}: {2}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BYTE_WR_NO_FEEDBACK = Odpov\u011b\u010f programov\u00e1n\u00ed: Z\u00e1pis Byte (bez ohlasu) na Provozn\u00ed koleji (re\u017eim Ops) {0}: Adresa dekod\u00e9ru {1}: {2}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BYTE_RD_FEEDBACK = Odpov\u011b\u010f programov\u00e1n\u00ed: \u010cten\u00ed Byte na Provozn\u00ed koleji (re\u017eim Ops) {0}: Adresa dekod\u00e9ru {1}: {2}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BYTE_WR_FEEDBACK = Odpov\u011b\u010f programov\u00e1n\u00ed: Z\u00e1pis Byte na Provozn\u00ed koleji (re\u017eim Ops) {0}: Adresa dekod\u00e9ru {1}: {2}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BIT_RD_NO_FEEDBACK = Odpov\u011b\u010f programov\u00e1n\u00ed: \u010cten\u00ed Bitu (bez ohlasu) na Provozn\u00ed koleji (re\u017eim Ops) {0}: Adresa dekod\u00e9ru {1}: {2}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BIT_WR_NO_FEEDBACK = Odpov\u011b\u010f programov\u00e1n\u00ed: Z\u00e1pis Bitu (bez ohlasu) na Provozn\u00ed koleji (re\u017eim Ops) {0}: Adresa dekod\u00e9ru {1}: {2}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BIT_RD_FEEDBACK = Odpov\u011b\u010f programov\u00e1n\u00ed: \u010cten\u00ed Bitu na Provozn\u00ed koleji (re\u017eim Ops) {0}: Adresa dekod\u00e9ru {1}: {2}.\n
LN_MSG_SLOT_PROG_MODE_RESPONSE_OPS_BIT_WR_FEEDBACK = Odpov\u011b\u010f programov\u00e1n\u00ed: Z\u00e1pis Bitu na Provozn\u00ed koleji (re\u017eim Ops) {0}: Adresa dekod\u00e9ru {1}: {2}.\n

# Note: in LN_MSG_SLOT_PROG_MODE_RESPONSE_UNKNOWN, the following parameter
# substitutions will be made:
#   {0} is a decimal number reflecting the requested programming mode.
#   {1} is a string containing the hexadecimal number which reflects the requested
#       programming mode, generated from LN_MSG_HEXADECIMAL_REPRESENTATION.
#   {2} is a string reporting the details of the programmer's pass/fail status, from
#       Ln_MSG_SLOT_PROG_MODE_HELPER_*, as appropriate.
#   {3} is a description of the CV access, from
#       LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_REPLY.
LN_MSG_SLOT_PROG_MODE_RESPONSE_UNKNOWN = Odpov\u011b\u010f programov\u00e1n\u00ed: Nezn\u00e1m\u00fd Slot programov\u00e1n\u00ed p\u0159\u00edstup s re\u017eimem programov\u00e1n\u00ed {0} ({1}) {2}: {3}.\n

# Note: in LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_REPLY and
# LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_WRITE_REQ, the following parameter
# substitutions will be made:
#   {0} is a decimal number reflecting the CV number to be read/written.
#   {1} is a decimal number reflecting the value to be written, or the value seen
#       upon read.
#   {2} is a hexadecimal representation of the value to be written, or the value seen
#       upon read.
#   {3} is a binary representation of the value to be written, or the value seen
#       upon read.
LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_REPLY = CV{0} hodnota {1} ({2}, {3}b)
LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_WRITE_REQ = CV{0} hodnota {1} ({2}, {3}b)

# Note: in LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_READ_REQ, the following parameter
# substitutions will be made:
#   {0} is a decimal number reflecting the CV number to be read.
LN_MSG_SLOT_PROG_MODE_CV_INFO_HELPER_READ_REQ = CV{0}

# Note: in LN_MSG_SLOT_CMD_STN_CFG_WRITE_REQ, and LN_MSG_SLOT_CMD_STN_CFG_READ_REPORT,
# the following parameter substitutions will be made:
#   {0} is a string containing values for OpSw1 thru OpSw8, from
#       LN_MSG_SLOT_CMD_STN_CFG_HELPER_EIGHT_OPSWS, as appropriate
#   {1} is a string containing values for OpSw9 thru OpSw16, from
#       LN_MSG_SLOT_CMD_STN_CFG_HELPER_EIGHT_OPSWS, as appropriate
#   {2} is a string containing values for OpSw17 thru OpSw24, from
#       LN_MSG_SLOT_CMD_STN_CFG_HELPER_EIGHT_OPSWS, as appropriate
#   {3} is a string containing values for OpSw25 thru OpSw32, from
#       LN_MSG_SLOT_CMD_STN_CFG_HELPER_EIGHT_OPSWS, as appropriate
#   {4} is a string containing values for OpSw33 thru OpSw40, from
#       LN_MSG_SLOT_CMD_STN_CFG_HELPER_EIGHT_OPSWS, as appropriate
#   {5} is a string containing values for OpSw41 thru OpSw48, from
#       LN_MSG_SLOT_CMD_STN_CFG_HELPER_EIGHT_OPSWS, as appropriate
#   {6} is a string containing values for OpSw49 thru OpSw56, from
#       LN_MSG_SLOT_CMD_STN_CFG_HELPER_EIGHT_OPSWS, as appropriate
#   {7} is a string containing values for OpSw57 thru OpSw64, from
#       LN_MSG_SLOT_CMD_STN_CFG_HELPER_EIGHT_OPSWS, as appropriate
LN_MSG_SLOT_CMD_STN_CFG_WRITE_REQ = Z\u00e1pis centr\u00e1la OpSw hodnoty:\n\t{0},\n\t{1},\n\t{2},\n\t{3},\n\t{4},\n\t{5},\n\t{6},\n\t{7}.\n
LN_MSG_SLOT_CMD_STN_CFG_READ_REPORT = Zpr\u00e1va aktu\u00e1ln\u00ed centr\u00e1ly OpSw hodnoty:\n\t{0},\n\t{1},\n\t{2},\n\t{3},\n\t{4},\n\t{5},\n\t{6},\n\t{7}.\n
LN_MSG_SLOT_CMD_STN_EXT_CFG_WRITE_REQ = Z\u00e1pis roz\u0161\u00ed\u0159en\u00fd centr\u00e1ly OpSw hodnoty:\n\t{0},\n\t{1},\n\t{2},\n\t{3},\n\t{4},\n\t{5},\n\t{6},\n\t{7}.\n
LN_MSG_SLOT_CMD_STN_EXT_CFG_READ_REPORT = Zpr\u00e1va aktu\u00e1ln\u00ed roz\u0161\u00ed\u0159en\u00fd centr\u00e1ly OpSw hodnoty:\n\t{0},\n\t{1},\n\t{2},\n\t{3},\n\t{4},\n\t{5},\n\t{6},\n\t{7}.\n

# Note: in LN_MSG_SLOT_CMD_STN_CFG_HELPER_EIGHT_OPSWS, the following parameter
# substitutions will be made:
#   {0} is a decimal number indicating the an OpSw numbers, as appropriate.
#   {1} is a string indicating the state of the OpSw, from
#       LN_MSG_OPC_MULTI_SENSE_OPSW_HELPER_THROWN or LN_MSG_OPC_MULTI_SENSE_OPSW_HELPER_CLOSED,
#       as appropriate.
LN_MSG_SLOT_CMD_STN_CFG_HELPER_EIGHT_OPSWS = OpSw{0}={1}, OpSw{2}={3}, OpSw{4}={5}, OpSw{6}={7}, OpSw{8}={9}, OpSw{10}={11}, OpSw{12}={13}, OpSw{14}={15}

# Note: in LN_MSG_SLOT_LOCO_INFO_READ and LN_MSG_SLOT_LOCO_INFO_WRITE, the following parameter
# substitutions will be made:
#   {0} is a decimal number indicating the slot number
#   {1} is a representation of the locomotive address, usually a simple integer number,
#       but may be include information about "2-digit aliasing" and/or may contain a
#       "mixed mode" address, as appropriate.
#   {2} is a string representing the slot's consisting status (not-consisted,
#       top of consist, mid-consist, or sub-consist)
#   {3} is a string representing the loco's status (in-use, common, idle, or free)
#   {4} is a string representing the speed-step mode
#   {5} is a string representing the direction of travel (if not consisted or if
#       top of consist, else represents the dirtection wit respect to the direction
#       of the "top-of-consist" locomotive
#   {6} is a string representing the speed of travel (if not consisted or if top of consist)
#   {7} is the F0 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {8} is the F1 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {9} is the F2 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {10} is the F3 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {11} is the F4 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {12} is the F5 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {13} is the F6 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {14} is the F7 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {15} is the F8 state, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as required
#   {16} is a string representing the track status byte information, from
#       LN_MSG_SLOT_HELPER_TRK_STAT, as appropriate
#   {17} is a string representation of the LocoNet message STAT2 byte,
#       from LN_MSG_SLOT_HELPER_SS2_SIMPLE
#   {18} is a string representation of the LocoNet message ID1/ID2 (EX1/EX2) bytes,
#       from LN_MSG_SLOT_HELPER_ID1_ID2_AS_THROTTLE_ID
LN_MSG_SLOT_LOCO_INFO_READ = Zpr\u00e1va ze Slotu {0} informace:\n\tLokomotiva {1} je {2}, {3}, provoz v {4} SS re\u017eimu, a pohybuj\u00edc\u00ed se {5} p\u0159i rychlosti {6},\n\tF0={7}, F1={8}, F2={9}, F3={10}, F4={11}, F5={12}, F6={13}, F7={14}, F8={15}\n\t{16}; {17}, {18}.\n
LN_MSG_SLOT_LOCO_INFO_WRITE = Z\u00e1pis Slot {0} informace:\n\tLokomotiva {1} is {2}, {3}, provoz \
v {4} SS re\u017eim, a pohybuj\u00edc\u00ed se {5} p\u0159i rychlosti {6},\n\tF0={7}, F1={8}, F2={9}, F3={10}, F4={11}, F5={12}, \
F6={13}, F7={14}, F8={15}\n\t{16}; {17}, {18}.\n

# in LN_MSG_SLOT_HELPER_TRK_SS2_SIMPLE, the following parameter
# substitution will be made:
#   {0} is a string containting the hexadecimal representation of the STAT2 byte
#       from the LocoNet message.
LN_MSG_SLOT_HELPER_SS2_SIMPLE = STAT2={0}

LN_MSG_QUERY_ALIAS_INFO = Z\u00edskat informace o pseudonymech.\n
LN_MSG_ALIAS_INFO_REPORT = Zpr\u00e1va o pseudonymech: {0} pseudonym\u016f podporov\u00e1no.\n
LN_MSG_SET_ALIAS_2_ALIASES = Nastavit pseudonymn\u00ed dvojici {0}: {1} je pseudonymem pro {2}; {3} je pseudonymem pro {4}.\n
LN_MSG_SET_ALIAS_1_ALIAS = Nastavit pseudonymn\u00ed dvojici {0}: {1} je pseudonymem pro {2}.\n
LN_MSG_REPORT_ALIAS_2_ALIASES = Zpr\u00e1va pseudonymn\u00ed dvojice {0}: {1} je pseudonymem pro {2}; {3} je pseudonymem pro {4}.\n
LN_MSG_REPORT_ALIAS_1_ALIAS = Zpr\u00e1va pseudonymn\u00ed dvojice {0}: {1} je pseudonymem pro {2}.\n
LN_MSG_QUERY_ALIAS = Z\u00edskat pseudonymn\u00ed dvojici {0}.\n

# in LN_MSG_SLOT_HELPER_ID1_ID2_AS_THROTTLE_ID, the following parameter
# substitution will be made:
#   {0} is a string containting the hexadecimal representation of the ID1 and ID2 bytes
#       from the LocoNet message.
LN_MSG_SLOT_HELPER_ID1_ID2_AS_THROTTLE_ID = Ovlada\u010d ID={0}

# in LN_MSG_LOCO_ADDR_HELPER_ALIAS_2_DIGIT_WITH_UNKNOWN_4_DIGIT, the following parameter
# substitution will be made:
#   {0} is a string containing a representation of the Loco address, and, when
#       the address is a so-called "2-digit" address greater than 99, shall also
#       contain a "mixed-mode" representation of the 2-digit address.
LN_MSG_LOCO_ADDR_HELPER_ALIAS_2_DIGIT_WITH_UNKNOWN_4_DIGIT = {0} (p\u0159es pseudonym)

# in LN_MSG_LOCO_ADDR_HELPER_ALIAS_2_DIGIT_WITH_KNOWN_4_DIGIT, the following parameter
# substitutions will be made:
#   {0} is a string containing a representation of the Loco address, and, when
#       the address is a so-called "2-digit" address greater than 99, shall also
#       contain a "mixed-mode" representation of the 2-digit address.
#   {1} is a string containing a number representing the "long address" which shall
#       control the locomotive which has a decoder running in 2-digit address mode.
LN_MSG_LOCO_ADDR_HELPER_ALIAS_2_DIGIT_WITH_KNOWN_4_DIGIT = {0} (Pseudonym pro lokomotivu {1})

# in LN_MSG_ALM_WRITE and LN_MSG_ALM_WRITE_REPLY, the following parameter
# substitutions will be made:
#   {0} is the value from byte 2 of the message, expressed as a decimal integer
#   {1} is the value from byte 3 of the message, expressed as a decimal integer
#   {2} is a string containing the ALM operation type, from
#       LN_MSG_ALM_OP_TYPE_HELPER_RD, LN_MSG_ALM_OP_TYPE_HELPER_WR,
#       LN_MSG_ALM_OP_TYPE_HELPER_ID, or LN_MSG_ALM_OP_TYPE_HELPER_UNKNOWN, as
#       appropriate
#   {3} is the value from byte 4 of the message, expressed as a decimal integer
#   {4} is the value from byte 5 of the message, expressed as a decimal integer
#   {5} is the value from byte 6 of the message, expressed as a decimal integer
#   {6} is the value from byte 7 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {7} is the value from byte 8 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {8} is the value from byte 9 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {9} is the value from byte 10 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {10} is the value from byte 11 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {11} is the value from byte 12 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {12} is the value from byte 13 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {13} is the value from byte 14 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION

LN_MSG_ALM_WRITE = Z\u00e1pis ALM msg {0} ATASK={1} {2} BLKL={3} \
BLKH={4} LOGIC={5}\n\tARG1L={6} ARG1H={7} ARG2L={8} ARG2H={9}\n\tARG3L={10} \
ARG3H={11} ARG4L={12} ARG4H={13}.\n

LN_MSG_ALM_WRITE_REPLY = \u010cten\u00ed ALM msg (Write reply) {0} ATASK={1} {2} BLKL={3} \
BLKH={4} LOGIC={5}\n\tARG1L={6} ARG1H={7} ARG2L={8} ARG2H={9}\n\tARG3L={10} \
ARG3H={11} ARG4L={12} ARG4H={13}.\n

LN_MSG_ALM_HELPER_TASK_TYPE_RD = (RD)
LN_MSG_ALM_HELPER_TASK_TYPE_WR = (WR)
LN_MSG_ALM_HELPER_TASK_TYPE_ID = (ID)

# in LN_MSG_ALM_HELPER_TASK_TYPE_UNKONWN, the following parameter substitution
# will be made:
#   {0} is the value from the task type byte of the message, expressed as a decimal integer
LN_MSG_ALM_HELPER_TASK_TYPE_UNKONWN = (Nezn\u00e1m\u00e1 \u00faloha typ {0})

# in LN_MSG_IPL_SETUP, the following parameter substitutions will be
#   made:
#   {0} is the manufacturer number, represented as a decimal integer
#   {1} is the hardware version number, represented as a decimal integer
#   {2} is the software version number, represented as a decimal integer
#   {3} is the device number, represented as a hexadecimal decimal integer, via
#       LN_MSG_HEXADECIMAL_REPRESENTATION, as appropriate
#   {4} is the options number, represented as a decimal integer
LN_MSG_IPL_SETUP = Download nastaven\u00ed zpr\u00e1va: v\u00fdrobce={0}, H/W verze={1}, S/W verze={2}, za\u0159\u00edzen\u00ed={3}, volby={4}.\n

# in LN_MSG_IPL_SET_ADDRESS, the following parameter substitution will be
#   made:
#   {0} is the address, represented as a hexadecimal integer, via
#       LN_MSG_HEXADECIMAL_REPRESENTATION, as appropriate
LN_MSG_IPL_SET_ADDRESS = Download nastaven\u00ed adresy {0}.\n

# in LN_MSG_IPL_SEND_DATA and LN_MSG_IPL_VERIFY_REQUEST, the following
#   parameter substitutions will be made:
#   {0} data byte 0, as a hexadecimal integer, via
#       LN_MSG_HEXADECIMAL_REPRESENTATION, as appropriate
#   {1} data byte 1, as a hexadecimal integer, via
#       LN_MSG_HEXADECIMAL_REPRESENTATION, as appropriate
#   {2} data byte 2, as a hexadecimal integer, via
#       LN_MSG_HEXADECIMAL_REPRESENTATION, as appropriate
#   {3} data byte 3, as a hexadecimal integer, via
#       LN_MSG_HEXADECIMAL_REPRESENTATION, as appropriate
#   {4} data byte 4, as a hexadecimal integer, via
#       LN_MSG_HEXADECIMAL_REPRESENTATION, as appropriate
#   {5} data byte 5, as a hexadecimal integer, via
#       LN_MSG_HEXADECIMAL_REPRESENTATION, as appropriate
#   {6} data byte 6, as a hexadecimal integer, via
#       LN_MSG_HEXADECIMAL_REPRESENTATION, as appropriate
#   {7} data byte 7, as a hexadecimal integer, via
#       LN_MSG_HEXADECIMAL_REPRESENTATION, as appropriate
LN_MSG_IPL_SEND_DATA = Download odeslat data {0} {1} {2} {3} {4} {5} {6} {7}.\n
LN_MSG_IPL_VERIFY_REQUEST = Download ov\u011b\u0159it po\u017eadavek {0} {1} {2} {3} {4} {5} {6} {7}.\n

LN_MSG_IPL_DISCOVER_ALL_DEVICES = Po\u017eadavek objevit v\u0161echna za\u0159\u00edzen\u00ed podporuj\u00edc\u00ed IPL.\n

# in LN_MSG_IPL_DISCOVER_SPECIFIC_DEVICES, the following parameter substitutions
# will be made:
#   {0} a string containing the device name, from
#       LN_MSG_IPL_DEVICE_HELPER_MFG_PROD, or from
#       LN_MSG_IPL_DEVICE_HELPER_UNDEFINED_MFG_PROD, as appropriate.
#   {1} a string containing the "slave device" name, from
#       LN_MSG_IPL_DEVICE_HELPER_MFG_PROD, or from
#       LN_MSG_IPL_DEVICE_HELPER_UNDEFINED_MFG_PROD, as appropriate.
LN_MSG_IPL_DISCOVER_SPECIFIC_DEVICES = Objevit {0} za\u0159\u00edzen\u00ed a/nebo {1} za\u0159\u00edzen\u00ed.\n

# in LN_MSG_IPL_DEVICE_HELPER_MFG_PROD, the following parameter substitutions
# will be made:
#   {0} is a string containing the device manufacturer name
#   {1} is a string containing the device name
LN_MSG_IPL_DEVICE_HELPER_MFG_PROD = {0} {1}

# in LN_MSG_IPL_DEVICE_HELPER_UNDEFINED_MFG_PROD, the following parameter substitutions
# will be made:
#   {0} is the device manufacturer number, represented as a decimal integer
#   {1} is the device number, represented as a decimal integer
LN_MSG_IPL_DEVICE_HELPER_UNDEFINED_MFG_PROD = Nezn\u00e1m\u00e9 za\u0159\u00edzen\u00ed (K\u00f3d v\u00fdrobce {0}, k\u00f3d v\u00fdrobku {1})
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_ALLDEVICES = Digitrax (nebyl zad\u00e1n \u017e\u00e1dn\u00fd typ za\u0159\u00edzen\u00ed host)
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_UT4 = Digitrax UT4(x) host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_UR92 = Digitrax UR92 host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_DT402 = Digitrax DT402(x) host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_DCS51 = Digitrax DCS51 host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_PR3 = Digitrax PR3 host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_DCS210 = Digitrax DCS210 host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_DCS240 = Digitrax DCS240 host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_DT500 = Digitrax DT500(x) host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_BXP88 = Digitrax BXP88 host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_PR4 = Digitrax PR4 host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_LNWI = Digitrax LNWI host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_DB210 = Digitrax DB210 host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_DB210OPTO = Digitrax DB210 Opto host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_DB220 = Digitrax DB220 host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_LNRP = Digitrax LNRP host
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_WTL12 = Walthers (Digitrax) WTL12 host

# in LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_UNKNOWN, the following parameter
# substitution will be made:
#   {0} is the host device type from the LocoNet message, represented as a decimal integer.
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_HOST_UNKNOWN = Digitrax (nezn\u00e1m\u00fd host za\u0159\u00edzen\u00ed typ {0})

LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_SLAVE_ALLDEVICES = Digitrax (nebylo zad\u00e1no \u017e\u00e1dn\u00e9 za\u0159\u00edzen\u00ed typu slave)
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_SLAVE_RF24 = Digitrax RF24 slave

# in LN_MSG_IPL_DEVICE_HELPER_HOST_DETAILS, the following parameter substitutions
# will be made:
#   {0) is a string containing the host device name
#   {1} is a string containing the host device S/N
#   {2} is a string containing the host device S/W version
LN_MSG_IPL_DEVICE_HELPER_HOST_DETAILS = Host: {0}, S/N={1}, S/W Verze={2}

# in LN_MSG_IPL_DEVICE_HELPER_SLAVE_DETAILS, the following parameter substitutions
# will be made:
#   {0) is a string containing the slave device name
#   {1} is a string containing the slave device S/N
#   {2} is a string containing the slave device S/W version
LN_MSG_IPL_DEVICE_HELPER_SLAVE_DETAILS = Slave: {0}, S/N={1}, S/W Verze={2}

LN_MSG_IPL_DEVICE_HELPER_SLAVE_NO_SLAVE = Slave: \u017d\u00e1dn\u00fd

# in LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_SLAVE_UNKNOWN, the following parameter
# substitution will be made:
#   {0} is the slave device type from the LocoNet message, represented as a decimal integer.
LN_MSG_IPL_DEVICE_HELPER_DIGITRAX_SLAVE_UNKNOWN = Digitrax (nezn\u00e1m\u00fd slave za\u0159\u00edzen\u00ed typ {0})

LN_MSG_IPL_END = Download konec operace.\n

# in LN_MSG_IPL_DEVICE_IDENTITY_REPORT, the following parameter substitutions will
# be made:
#   {0} is a string containing interpreted information about the "host" device, from
#       LN_MSG_IPL_DEVICE_HELPER_HOST_DETAILS, as appropriate
#   {1} is a string containing interpreted information about the "slave" device, from
#       LN_MSG_IPL_DEVICE_HELPER_SLAVE_DETAILS or LN_MSG_IPL_DEVICE_HELPER_SLAVE_NO_SLAVE,
#        as appropriate
LN_MSG_IPL_DEVICE_IDENTITY_REPORT = IPL Identity zpr\u00e1va.\n\t{0}\n\t{1}.\n

# in LN_MSG_LOCOIO_HELPER_FIRMWARE_REV_DOTTED_ONE_DIGIT, LN_MSG_LOCOIO_HELPER_FIRMWARE_REV_DOTTED_TWO_DIGITS,
#   and LN_MSG_LOCOIO_HELPER_FIRMWARE_REV_DOTTED_THREE_DIGITS, the following parameter substitutions
#   will be made:
#   {0} is the minor revision number, represented as a decimal integer
#   {1} is the middle revision number, represented as a decimal integer, if available
#   {2} is the major revision number, represented as a decimal integer, if available
LN_MSG_LOCOIO_HELPER_FIRMWARE_REV_DOTTED_ONE_DIGIT = {0,number,integer}
LN_MSG_LOCOIO_HELPER_FIRMWARE_REV_DOTTED_TWO_DIGITS = {0,number,integer}.{1,number,integer}
LN_MSG_LOCOIO_HELPER_FIRMWARE_REV_DOTTED_THREE_DIGITS = {0,number,integer}.{1,number,integer}.{2,number,integer}

# in LN_MSG_LOCOIO_HELPER_FIRMWARE_REV_OUT_OF_RANGE, the following parameter substitutions
#   will be made:
#   {0) is the revision number which cannot be decoded, represented as a decimal integer
LN_MSG_LOCOIO_HELPER_FIRMWARE_REV_OUT_OF_RANGE = (nerozlu\u0161titeln\u00e1 hodnota {0} je mimo o\u010dek\u00e1van\u00fd rozsah)


# in LN_MSG_THROTTLE_SEMAPHORE, the following parameter substitutions will be made:
#   {0} is a string containing a representation of the Loco address, and, when
#       the address is a so-called "2-digit" address greater than 99, shall also
#       contain a "mixed-mode" representation of the 2-digit address.
#   {1) the lit status of the semaphore body icon, from LN_MSG_THROTTLE_SEMAPHORE_HELPER_LIT
#       or LN_MSG_THROTTLE_SEMAPHORE_HELPER_UNLIT, as appropriate
#   {2} the lit status of the semaphore vertical arm icon, from
#       LN_MSG_THROTTLE_SEMAPHORE_HELPER_LIT or
#       LN_MSG_THROTTLE_SEMAPHORE_HELPER_UNLIT, as appropriate
#   {3} the lit status of the semaphore diagonal arm icon, from
#       LN_MSG_THROTTLE_SEMAPHORE_HELPER_LIT or
#       LN_MSG_THROTTLE_SEMAPHORE_HELPER_UNLIT, as appropriate
#   {4} the lit status of the semaphore horizontal arm icon, from
#       LN_MSG_THROTTLE_SEMAPHORE_HELPER_LIT or
#       LN_MSG_THROTTLE_SEMAPHORE_HELPER_UNLIT, as appropriate
#   {5} the blinkingt status of any lit semaphore arm icon, from
#       LN_MSG_THROTTLE_SEMAPHORE_HELPER_BLINKING or
#       LN_MSG_THROTTLE_SEMAPHORE_HELPER_UNBLINKING, as appropriate
LN_MSG_THROTTLE_SEMAPHORE = Symboly ovl\u00e1d\u00e1n\u00ed n\u00e1v\u011bstidel ovlada\u010dem: Lokomotiva {0}, N\u00e1v\u011bstidlo {1}, Vertik\u00e1ln\u00ed rameno {2}, Diagon\u00e1ln\u00ed rameno {3}, Horizont\u00e1ln\u00ed rameno {4}; Jak\u00e1koliv osv\u011btlen\u00e1 ramena jsou {5}.\n

LN_MSG_THROTTLE_SEMAPHORE_HELPER_LIT = osv\u011btleno
LN_MSG_THROTTLE_SEMAPHORE_HELPER_UNLIT = neosv\u011btleno
LN_MSG_THROTTLE_SEMAPHORE_HELPER_BLINKING = blikaj\u00edc\u00ed
LN_MSG_THROTTLE_SEMAPHORE_HELPER_UNBLINKING = neblikaj\u00edc\u00ed

# in LN_MSG_THROTTLE_TEXT_MESSAGE_ALL_THROTTLES, the following parameter
# substitutions will be made:
#   {0} the first (leftmost) character of the message to be placed on possible throttle displays
#   {1} the second character of the message to be placed on possible throttle displays
#   {2} the third character of the message to be placed on possible throttle displays
#   {3} the fourth character of the message to be placed on possible throttle displays
#   {4} the fifth character of the message to be placed on possible throttle displays
#   {5} the sixth character of the message to be placed on possible throttle displays
#   {6} the seventh character of the message to be placed on all possible throttle displays
#   {7} the last (rightmost) character of the message to be placed on all possible throttle displays
LN_MSG_THROTTLE_TEXT_MESSAGE_ALL_THROTTLES = Textov\u00e1 zpr\u00e1va ovlada\u010de v\u0161em ovlada\u010d\u016fm zpr\u00e1va {0}{1}{2}{3}{4}{5}{6}{7}.\n

# in LN_MSG_THROTTLE_TEXT_MESSAGE_SPECIFIC_THROTTLE, the following parameter
# substitutions will be made:
#   {0} the first (leftmost) character of the message to be placed on the targeted throttle's display
#   {1} the second character of the message to be placed the targeted throttle's display
#   {2} the third character of the message to be placed the targeted throttle's display
#   {3} the fourth character of the message to be placed the targeted throttle's display
#   {4} the fifth character of the message to be placed on the targeted throttle's display
#   {5} the sixth character of the message to be placed on the targeted throttle's display
#   {6} the seventh character of the message to be placed on the targeted throttle's display
#   {7} the last (rightmost) character of the message to be placed on the targeted throttle's display
#   {8} the Throttle ID of the throttle to display the message, via LN_MSG_THROTTLE_ID
LN_MSG_THROTTLE_TEXT_MESSAGE_SPECIFIC_THROTTLE = Textov\u00e1 zpr\u00e1va ovlada\u010de ovlada\u010di {8} zpr\u00e1va {0}{1}{2}{3}{4}{5}{6}{7}.\n

# in LN_MSG_GENERIC_PEER_TO_PEER, the following parameter substitutions will be made:
#   {0} the value from the SRC byte, in hexadecimal integer form as provided via
#       LN_MSG_HEXADECIMAL_REPRESENTATION
#   {1} the value from the DSTL byte, in hexadecimal integer form as provided via
#       LN_MSG_HEXADECIMAL_REPRESENTATION
#   {2} the value from the DSTH byte, in hexadecimal integer form as provided via
#       LN_MSG_HEXADECIMAL_REPRESENTATION
#   {3} the value from the PXCT1 byte, in hexadecimal integer form as provided via
#       LN_MSG_HEXADECIMAL_REPRESENTATION
#   {4} the value from the PXCT2 byte, in hexadecimal integer form as provided via
#       LN_MSG_HEXADECIMAL_REPRESENTATION
#   {5} the value from the D0 byte (including bit seven from PXCT1), in hexadecimal
#       integer form as provided via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {6} the value from the D1 byte (including bit seven from PXCT1), in hexadecimal
#       integer form as provided via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {7} the value from the D2 byte (including bit seven from PXCT1), in hexadecimal
#       integer form as provided via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {8} the value from the D3 byte (including bit seven from PXCT1), in hexadecimal
#       integer form as provided via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {9} the value from the D4 byte (including bit seven from PXCT2), in hexadecimal
#       integer form as provided via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {10} the value from the D5 byte (including bit seven from PXCT2), in hexadecimal
#       integer form as provided via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {11} the value from the D6 byte (including bit seven from PXCT2), in hexadecimal
#       integer form as provided via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {12} the value from the D7 byte (including bit seven from PXCT2), in hexadecimal
#       integer form as provided via LN_MSG_HEXADECIMAL_REPRESENTATION
LN_MSG_GENERIC_PEER_TO_PEER = P\u0159enos Peer-to-Peer: SRC={0}, DSTL={1}, DSTH={2}, PXCT1={3}, PXCT2={4}\n\tData [{5} {6} {7} {8}, {9} {10} {11} {12}].\n

# in LN_MSG_GENERIC_PEER_TO_PEER, the following parameter substitutions will be made:
#   {0} a string representing the TCNTRL value from the message as a hexadecimal
#       integer, via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {1} a string representing an interpreted version of the TCNTRL value, from one
#       of LN_MSG_THROTTLE_STATUS_HELPER_OK, LN_MSG_THROTTLE_STATUS_HELPER_NO_KEYPRESS,
#       LN_MSG_THROTTLE_STATUS_HELPER_PLUS_KEY, LN_MSG_THROTTLE_STATUS_HELPER_MINUS_KEY,
#       LN_MSG_THROTTLE_STATUS_HELPER_RUNSTOP_KEY,
#       LN_MSG_THROTTLE_STATUS_HELPER_RESP_SEM_DISP_CMD, or
#       LN_MSG_THROTTLE_STATUS_HELPER_UNKONWN, as appropriate
#   {2} the Throttle ID of the throttle to display the message, via LN_MSG_THROTTLE_ID
#   {3} the SLA value from the LocoNet message, displayed as a hexadecimal integer,
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {4} the SLB value from the LocoNet message, displayed as a hexadecimal integer,
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
LN_MSG_THROTTLE_STATUS = Stav ovlada\u010de TCNTRL={0} {1}, Ovlada\u010d ID={2}, SLA={3}, SLB={4}.\n

LN_MSG_THROTTLE_STATUS_HELPER_OK = (OK)
LN_MSG_THROTTLE_STATUS_HELPER_NO_KEYPRESS = (\u017e\u00e1dn\u00e1 kl\u00e1vesa, okam\u017eit\u011b, ignorov\u00e1no)
LN_MSG_THROTTLE_STATUS_HELPER_PLUS_KEY = (+ kl\u00e1vesa b\u011bhem zpr\u00e1vy)
LN_MSG_THROTTLE_STATUS_HELPER_MINUS_KEY = (- kl\u00e1vesa b\u011bhem zpr\u00e1vy)
LN_MSG_THROTTLE_STATUS_HELPER_RUNSTOP_KEY = (R/S kl\u00e1vesa b\u011bhem zpr\u00e1vy, p\u0159eru\u0161eno)
LN_MSG_THROTTLE_STATUS_HELPER_RESP_SEM_DISP_CMD = (Odpov\u011b\u010f ovlada\u010de na p\u0159\u00edkaz zobrazen\u00ed n\u00e1v\u011bstidla)
LN_MSG_THROTTLE_STATUS_HELPER_UNKONWN = (nezn\u00e1m\u00fd)

LN_MSG_DUPLEX_RECEIVER_QUERY = Dotaz na duplexn\u00ed p\u0159ij\u00edma\u010de.\n
LN_MSG_DUPLEX_RECEIVER_RESPONSE = Odpov\u011b\u010f duplexn\u00ed p\u0159ij\u00edma\u010d.\n

# in LN_MSG_DUPLEX_CHANNEL_SET and LN_MSG_DUPLEX_CHANNEL_REPORT, the following
# parameter substitution will be made:
#   {0} the duplex channel reported in the message, represented as a decimal integer.
LN_MSG_DUPLEX_CHANNEL_SET = Nastavit kan\u00e1l duplexu na {0}.\n
LN_MSG_DUPLEX_CHANNEL_REPORT = Nahl\u00e1\u0161en\u00fd duplexn\u00ed kan\u00e1l je {0}.\n

LN_MSG_DUPLEX_CHANNEL_QUERY = Dotaz na duplexn\u00ed kan\u00e1l.\n

# in LN_MSG_DUPLEX_NAME_WRITE, the following parameter substitution will be made:
#   {0} is a string representing the Duplex Group 'Name' from the message.
LN_MSG_DUPLEX_NAME_WRITE = Nastavit skupinu duplex N\u00e1zev na {0}.\n

# in LN_MSG_DUPLEX_NAME_REPORT, the following parameter substitution will be made:
#   {0} is a string representing the Duplex Group 'Name' from the message.
#   {1} is a string representing the Duplex Group 'Password' from the message.
#   {2} is a string representing the Duplex Group 'Channel' from the message.
#   {3} is a string representing the Duplex Group 'ID' from the message.
LN_MSG_DUPLEX_NAME_REPORT = Odpov\u011b\u010f skupiny duplex N\u00e1zev="{0}", Heslo={1}, Kan\u00e1l={2}, ID={3}.\n

LN_MSG_DUPLEX_NAME_QUERY = Dotaz na n\u00e1zev duplexn\u00ed kan\u00e1l.\n

# in LN_MSG_DUPLEX_ID_SET and LN_MSG_DUPLEX_ID_REPORT, the following
# parameter substitution will be made:
#   {0} the duplex ID reported in the message, represented as a decimal integer.
LN_MSG_DUPLEX_ID_SET = Nastavit duplex ID na {0}.\n
LN_MSG_DUPLEX_ID_REPORT = Odpov\u011b\u010f Duplex ID je {0}.\n

LN_MSG_DUPLEX_ID_QUERY = Dotaz na duplex ID.\n

# in LN_MSG_DUPLEX_PASSWORD_SET and LN_MSG_DUPLEX_PASSWORD_REPORT, the following
# parameter substitution will be made:
#   {0} the duplex Password reported in the message, represented as a string of four characters
LN_MSG_DUPLEX_PASSWORD_SET = Nastavit duplex Heslo na {0}.\n
LN_MSG_DUPLEX_PASSWORD_REPORT = Odpov\u011b\u010f duplex Heslo je {0}.\n

LN_MSG_DUPLEX_PASSWORD_QUERY = Dotaz na duplex Heslo.\n

# in LN_MSG_DUPLEX_CHANNEL_SCAN_QUERY, the following parameter substitution will be
#   made:
#   {0} the Duplex Group channel number, represented as a decimal integer.
LN_MSG_DUPLEX_CHANNEL_SCAN_QUERY = Dotaz na duplex kan\u00e1l {0} \u0161um/aktivita.\n

# in LN_MSG_DUPLEX_CHANNEL_SCAN_REPORT, the following parameter substitutions will be
#   made:
#   {0} the Duplex Group channel number, represented as a decimal integer.
#   {1} the reported noise/activity level, represented as a decimal integer.
LN_MSG_DUPLEX_CHANNEL_SCAN_REPORT = Odpov\u011b\u010f duplex kan\u00e1l {0} \u0161um/aktivita \u00farove\u0148 je {1}/255.\n

# in LN_MSG_DUPLEX_PING_REQUEST, the following parameter substitution will be made:
#   {0} is string containing a hexadecimal representation of the device serial number
#       which is encoded in the LocoNet message, such as 'D3ADB33F'.  Note that this number is generated from
#       32 bits of LocoNet data, so has an effective range of '0' to
#       'FFFFFFFF'.
LN_MSG_DUPLEX_PING_REQUEST = Ping-kaj\u00edc\u00ed za\u0159\u00edzen\u00ed se s\u00e9riov\u00fdm \u010d\u00edslem 0x{0}.\n

# in LN_MSG_DUPLEX_PING_REPORT, the following parameter substitutions will be made:
#   {0} is string containing a hexadecimal representation of the device serial number
#       which is encoded in the LocoNet message, such as 'D3ADB33F'.  Note that
#       this number is generated from 32 bits of LocoNet data, so has an effective range of "00" to
#       "FFFFFFFF".
#   {1} is a string containing a hexadecimal representation of the local RSSI reported
#       in the LocoNet message, such as 'A1'.  Note that this number is generated
#       from 8 bits of LocoNet data, so has an effective range of "00" to  "FF".
#   {2} is a string containing a hexadecimal representation of the remote RSSI reported
#       in the LocoNet message, such as 'A1'.  Note that this number is generated
#       from 8 bits of LocoNet data, so has an effective range of "00" to  "FF".
LN_MSG_DUPLEX_PING_REPORT = Ping Zpr\u00e1va odpov\u011b\u010f ze za\u0159\u00edzen\u00ed se s\u00e9riov\u00fdm \u010d\u00edslem {0}: Lok\u00e1ln\u00ed RSSI={1}, Vzd\u00e1len\u00e9 RSSI={2}.\n

# in LN_MSG_TRANSP_FIND_QUERY, the following parameter substitution will be made:
#   {0} is a string containing a representation of the Loco address, and, when
#       the address is a so-called "2-digit" address greater than 99, shall also
#       contain a "mixed-mode" representation of the 2-digit address.
LN_MSG_TRANSP_FIND_QUERY = Transponding naj\u00edt dotaz pro lokomotivu adresa {0}.\n

# in LN_MSG_TRANSP_HELPER_UNKNOWN_ZONE, the following parameter substitution will be made:
#   {0} is the number from the loconet message which does not decode to a zone letter,
#       represented as a decimal integer.
LN_MSG_TRANSP_HELPER_UNKNOWN_ZONE = nezn\u00e1m\u00fd ({0})

# in LN_MSG_TRANSP_REPORT_KNOWN_REPORTER_USERNAME, the following parameter substitutions
# will be made:
#   {0} is a string containing a representation of the Loco address, and, when
#       the address is a so-called "2-digit" address greater than 99, shall also
#       contain a "mixed-mode" representation of the 2-digit address.
#   {1} is a string containing the system name of the reporter which provided the
#       report.
#   {2} is a string containing the user name of the reporter.
#   {3} is the BDL16x boardID number
#   {4} is a string containing the decoded zone letter, or, if decoding fails, from
#       LN_MSG_TRANSP_HELPER_UNKNOWN_ZONE, as appropriate
LN_MSG_TRANSP_REPORT_KNOWN_REPORTER_USERNAME = Transponder naj\u00edt zpr\u00e1va: adresa {0} p\u0159\u00edtomn\u00e1 na {1} ({2}) (BDL16x Deska {3} RX4 z\u00f3na {4}).\n

# in LN_MSG_TRANSP_REPORT_KNOWN_REPORTER_UNKNOWN_USERNAME, the following parameter substitutions
# will be made:
#   {0} is a string containing a representation of the Loco address, and, when
#       the address is a so-called "2-digit" address greater than 99, shall also
#       contain a "mixed-mode" representation of the 2-digit address.
#   {1} is a string containing the system name of the reporter which provided the
#       report.
#   {2} is the BDL16x boardID number
#   {3} is a string containing the decoded zone letter, or, if decoding fails, from
#       LN_MSG_TRANSP_HELPER_UNKNOWN_ZONE, as appropriate
LN_MSG_TRANSP_REPORT_KNOWN_REPORTER_UNKNOWN_USERNAME = Transponder naj\u00edt zpr\u00e1va: adresa {0} p\u0159\u00edtomn\u00e1 na {1} (BDL16x Deska {2} RX4 z\u00f3na {3}).\n

LN_MSG_UHLENBROCK_STOP_PROGRAMMING_TRACK = Uhlenbrock IB-COM / Intellibox II Stop Programovac\u00ed kolej.\n
LN_MSG_UHLENBROCK_START_PROGRAMMING_TRACK = Uhlenbrock IB-COM / Intellibox II Start Programovac\u00ed kolej.\n

# in LN_MSG_LISSY_IR_REPORT_LOCO_MOVEMENT, the following parameter substitutions
# will be made:
#   {0} is the Lissy IR unit number.
#   {1} is a string containing a representation of the Loco address, and, when
#       the address is a so-called "2-digit" address greater than 99, shall also
#       contain a "mixed-mode" representation of the 2-digit address.
#   {2} is a string containing the direction of travel, from
#       LN_MSG_LISSY_IR_REPORT_HELPER_DIRECTION_NORTH or
#       LN_MSG_LISSY_IR_REPORT_HELPER_DIRECTION_SOUTH, as appropriate
LN_MSG_LISSY_IR_REPORT_LOCO_MOVEMENT = Lissy {0} IR Zpr\u00e1va: Lokomotiva {1} pohybuj\u00edc\u00ed {2}\n
LN_MSG_LISSY_IR_REPORT_HELPER_DIRECTION_NORTH = sever
LN_MSG_LISSY_IR_REPORT_HELPER_DIRECTION_SOUTH = jih

# in LN_MSG_LISSY_WHEEL_REPORT_LOCO_MOVEMENT, the following parameter substitutions
# will be made:
#   {0} is the Lissy wheel count unit number.
#   {1} is the wheel count number reported in the LocoNet message
#   {2} is a string containing the direction of travel, from
#       LN_MSG_LISSY_IR_REPORT_HELPER_DIRECTION_NORTH or
#       LN_MSG_LISSY_IR_REPORT_HELPER_DIRECTION_SOUTH, as appropriate
LN_MSG_LISSY_WHEEL_REPORT_LOCO_MOVEMENT = Lissy {0} Zpr\u00e1va kola: {1} pohybuj\u00edc\u00ed se kola {2}\n

# in LN_MSG_SE_REPORT, the following parameter substitutions will be made:
#   {0} is the SE number, where the lowest available SE number is "1"
#   {1} is the SE number re-interpreted, with the lowest available SE number "0"
#   {2} is the AX state, represented as a decimal integer
#   {3} is the XA state, represented as a decimal integer
#   {4} is the reservation status, from one of LN_MSG_SE_REPORT_HELPER_BOTH_RES,
#       LN_MSG_SE_REPORT_HELPER_AX_RES, LN_MSG_SE_REPORT_HELPER_XA_RES, or
#       LN_MSG_SE_REPORT_HELPER_NO_RES, as appropriate
#   {5} is the turnout state, via LN_MSG_SWITCH_STATE_THROWN or
#       LN_MSG_SWITCH_STATE_CLOSED, as appropriate
#   {6} is the occupancy state, via LN_MSG_SE_REPORT_HELPER_UNOCCUPIED or
#       LN_MSG_SE_REPORT_HELPER_OCCUPIED, as appropriate
LN_MSG_SE_REPORT = SE{0} ({1}) zpr\u00e1vy AX:{2} XA:{3} {4}; V\u00fdhybka {5} {6}.\n

LN_MSG_SE_REPORT_HELPER_BOTH_RES = AX, XA rezervov\u00e1no
LN_MSG_SE_REPORT_HELPER_AX_RES = AX rezervov\u00e1no
LN_MSG_SE_REPORT_HELPER_XA_RES = XA rezervov\u00e1no
LN_MSG_SE_REPORT_HELPER_NO_RES = bez rezervace
LN_MSG_SE_REPORT_HELPER_UNOCCUPIED = Neobsazeno
LN_MSG_SE_REPORT_HELPER_OCCUPIED = Obsazeno

LN_MSG_UNRECOGNIZED_SIG_STATE_REPORT_MAY_BE_FROM_CML_HW = Nerozpoznan\u00e1 zpr\u00e1va o stavu n\u00e1v\u011bstidla (obvykle odes\u00edl\u00e1na pomoc\u00ed CML SIGM10, SIGM20).\n

# in LN_MSG_PLAYABLE_WHISTLE_CONTROL, the following parameter substitutions
# will be made
#   {0} is the loco address
#   {1} is the whistle level, represented as a decimal integer
#   {2} is the number of times the DCC packet should be repeated on the DCC track
#       signal, represented as a decimal integer
LN_MSG_PLAYABLE_WHISTLE_CONTROL = Ovl\u00e1d\u00e1n\u00ed p\u00ed\u0161\u0165aly - Lokomotiva {0} p\u00ed\u0161\u0165ala na {1} (opakovat {2} kr\u00e1t).\n

# in LN_MSG_OPC_IMM_PKT_GENERIC, the following parameter substitutions will be made:
#   {0} the number of bytes to be sent in the NMRA DCC packet
#   {1} the repeat count
#   {2} the LocoNet message byte which contains the repeat count, represented as
#       a decimal integer
#   {3} the DHI value from the LocoNet message, represented as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {4} the IM1 value from the LocoNet message, represented as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {5} the IM2 value from the LocoNet message, represented as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {6} the IM3 value from the LocoNet message, represented as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {7} the IM4 value from the LocoNet message, represented as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {8} the IM5 value from the LocoNet message, represented as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {9} a string which contains a list of the NMRA DCC packet bytes, represented as
#       a list of hexadecimal values
LN_MSG_OPC_IMM_PKT_GENERIC = Okam\u017eit\u00e9 odesl\u00e1n\u00ed paketu: {0} byt\u016f, po\u010det opakov\u00e1n\u00ed {1}({2})\n\tDHI={3}, IM1={4}, IM2={5}, IM3={6}, IM4={7}, IM5={8}\n\tpaket: {9}.\n

# in LN_MSG_SEND_PACKET_IMM_SET_F21_TO_F28, the following parameter substitutions
# will be made:
#   {0} is the loco address
#   {1} is the F21 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {2} is the F22 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {3} is the F23 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {4} is the F24 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {5} is the F25 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {6} is the F26 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {7} is the F27 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {8} is the F28 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
LN_MSG_SEND_PACKET_IMM_SET_F21_TO_F28 = Okam\u017eit\u00e9 odesl\u00e1n\u00ed paketu: Lokomotiva {0} nastavit F21={1}, F22={2}, F23={3}, F24={4}, F25={5}, F26={6}, F27={7}, F28={8}.\n

# in LN_MSG_SEND_PACKET_IMM_SET_F13_TO_F20, the following parameter substitutions
# will be made:
#   {0} is the loco address
#   {1} is the F13 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {2} is the F14 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {3} is the F15 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {4} is the F16 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {5} is the F17 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {6} is the F18 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {7} is the F19 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {8} is the F20 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
LN_MSG_SEND_PACKET_IMM_SET_F13_TO_F20 = Okam\u017eit\u00e9 odesl\u00e1n\u00ed paketu: Lokomotiva {0} nastavit F13={1}, F14={2}, F15={3}, F16={4}, F17={5}, F18={6}, F19={7}, F20={8}.\n

# in LN_MSG_SEND_PACKET_IMM_SET_F9_TO_F12, the following parameter substitutions
# will be made:
#   {0} is the loco address
#   {1} is the F9 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {2} is the F10 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {3} is the F11 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {4} is the F12 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
LN_MSG_SEND_PACKET_IMM_SET_F9_TO_F12 = Okam\u017eit\u00e9 odesl\u00e1n\u00ed paketu: Lokomotiva {0} nastavit F9={1}, F10={2}, F11={3}, F12={4}.\n

# in LN_MSG_UHLEN_READ_CV_REG_MODE_FROM_PT, LN_MSG_UHLEN_WRITE_CV_REG_MODE_FROM_PT,
# LN_MSG_UHLEN_READ_CV_PAGED_MODE_FROM_PT, LN_MSG_UHLEN_WRITE_CV_PAGED_MODE_FROM_PT,
# and LN_MSG_UHLEN_READ_CV_DIRECT_BYTE_MODE_FROM_PT, the following parameter
# substitution will be made:
#   {0} is the number of the CV being accessed.
LN_MSG_UHLEN_READ_CV_REG_MODE_FROM_PT = \u010cten\u00ed CV v Registrov\u00e9m re\u017eimu z Prog. kol. pro Uhlenbrock IB-COM / Intellibox - CV: {0}\n
LN_MSG_UHLEN_WRITE_CV_REG_MODE_FROM_PT = Z\u00e1pis CV v Registrov\u00e9m re\u017eimu z Prog. kol. pro Uhlenbrock IB-COM / Intellibox - CV: {0}.\n
LN_MSG_UHLEN_READ_CV_PAGED_MODE_FROM_PT = \u010cten\u00ed CV ve Str\u00e1nkov\u00e9m re\u017eimu z Prog. kol. pro Uhlenbrock IB-COM / Intellibox - CV: {0}.\n
LN_MSG_UHLEN_WRITE_CV_PAGED_MODE_FROM_PT = Z\u00e1pis CV ve Str\u00e1nkov\u00e9m re\u017eimu z Prog. kol. pro Uhlenbrock IB-COM / Intellibox - CV: {0}.\n
LN_MSG_UHLEN_READ_CV_DIRECT_BYTE_MODE_FROM_PT = \u010cten\u00ed CV v P\u0159\u00edm\u00e9m re\u017eimu z Prog. kol. pro Uhlenbrock IB-COM / Intellibox - CV: {0}.\n

# in LN_MSG_UHLEN_WRITE_CV_DIRECT_BYTE_MODE_FROM_PT, and LN_MSG_UHLEN_CV_OPERATION_UNKNOWN,
#   the following parameter substitutions will be made:
#   {0} is the number of the CV being accessed.
#   {1} is the value to be written to the CV
LN_MSG_UHLEN_WRITE_CV_DIRECT_BYTE_MODE_FROM_PT = Z\u00e1pis CV v Registrov\u00e9m re\u017eimu z Prog. kol. pro Uhlenbrock IB-COM / Intellibox - CV: {0} Hodnota: {1}.\n
LN_MSG_UHLEN_CV_OPERATION_UNKNOWN = Nezn\u00e1m\u00fd Uhlenbrock IB-COM / Intellibox Prog. kol. p\u0159\u00edkaz CV: {0}  Hodnota: {1}.\n

# in LN_MSG_UHLEN_CV_OPS_MODE_WRITE, the following parameter substitutions will be made:
#   {0} is the loco address
#   {1} is the number of the CV being accessed.
#   {2} is the value to be written to the CV
LN_MSG_UHLEN_CV_OPS_MODE_WRITE = Z\u00e1pis CV na Provozn\u00ed koleji (Ops Mode) pro Uhlenbrock IB-COM / Intellibox - Adresa: {0} CV: {1} Hodnota: {2}.\n

# in LN_MSG_UHLEN_SEND_PKT_IMM_UNDEFINED, the following parameter substitutions will be made:
#   {0} is the value from byte 2 of the LocoNet message, expressed as a hexadecimal integer,
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
LN_MSG_UHLEN_SEND_PKT_IMM_UNDEFINED = Nedefinovan\u00e9 okam\u017eit\u00e9 odesl\u00e1n\u00ed paketu, 3-t\u00ed byte id {0} nen\u00ed 0x7f.\n

LN_MSG_SET_PR3_MODE_LOCONET_IF_WITHOUT_TERM = Nastavit PR3 na re\u017eim MS100 bez ukon\u010den\u00ed LocoNet PR3 (nap\u0159. pou\u017eit\u00ed PR3 s p\u0159\u00edtomnou centr\u00e1lou).\n
LN_MSG_SET_PR3_MODE_PR3_PROGRAMMING_TRACK_ONLY = Nastavit PR3 na re\u017eim dekod\u00e9r na programovac\u00ed koleji (nap\u0159. bez p\u0159\u00edtomn\u00e9 centr\u00e1ly).\n
LN_MSG_SET_PR3_MODE_LN_MSG_SET_PR3_MODE_LOCONET_IF_WITH_TERM = Nastavit PR3 na re\u017eim MS100 s ukon\u010den\u00edm LocoNet PR3 (nap\u0159. pou\u017eit\u00ed PR3 bez p\u0159\u00edtomn\u00e9 centr\u00e1ly).\n

# in LN_MSG_INTELLIBOX_SLOT_SET_F9_TO_F12, the following parameter substitutions
# will be made:
#   {0} is the intellibox slot number
#   {1} is the F9 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {2} is the F10 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {3} is the F11 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
#   {4} is the F12 state, via LN_MSG_FUNC_ON or LN_MSG_FUNC_ON, as appropriate
LN_MSG_INTELLIBOX_SLOT_SET_F9_TO_F12 = Nastavit (Intellibox-II form\u00e1t) Lokomotiva ve slotu {0} F9={1} F10={2} F11={3} F12={4}.\n

# in LN_MSG_INTELLIBOX_SPECIAL_FUNC_CTL, the following parameter substitutions will be made:
#   {0} is a string representing the operation format, from
#       LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_IB1 or LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_IB2,
#       as appropriate
#   {1} is the slot number
#   {2} is the first function information, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {3} is the second function information, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {4} is the third function information, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {5} is the fourth function information, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {6} is the fifth function information, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {7} is the sixth function information, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {8} is the seventh function information, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
LN_MSG_INTELLIBOX_FUNC_CTL = Nastavit {0} Lokomotiva ve slotu {1} {2} {3} {4} {5} {6} {7} {8}.\n

# in LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC, the following substitutions
# will be made:
#   {0} is the function number
#   {1} is the state of the function, from LN_MSG_FUNC_OFF or LN_MSG_FUNC_ON, as
#       appropriate
LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC = F{0}={1}

LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_IB1 = (Intellibox-I v2.x form\u00e1t)
LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_IB2 = (Intellibox-II form\u00e1t)

# in LN_MSG_INTELLIBOX_SPECIAL_FUNC_CTL, the following parameter substitutions will be made:
#   {0} is the slot number
#   {1} is the first function information, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {2} is the second function information, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {3} is the third function information, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
LN_MSG_INTELLIBOX_SPECIAL_FUNC_CTL = Nastavit (Intellibox-II form\u00e1t) Lokomotiva ve slotu {0} F12={1} F20={2} F28={3}.\n

# in LN_MSG_INTELLIBOX_SPECIAL_FUNC_CTL, the following parameter substitutions will be made:
#   {0} is the slot number
#   {1} is the F0 state, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {2} is the F1 state, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {3} is the F2 state, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {4} is the F3 state, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
#   {5} is the F4 state, via LN_MSG_INTELLIBOX_FUNC_CTL_HELPER_INDIV_FUNC,
#       as appropriate
LN_MSG_INTELLIBOX_FUNC_CTL_F0_TO_F4 = Nastavit (Intellibox-II v2.x form\u00e1t) Lokomotiva ve slotu {0} {1} {2} {3} {4} {5}.\n

LN_MSG_UNKNOWN_MESSAGE = Nelze analyzovat zpr\u00e1vu LocoNet.\n

# in LN_MONITOR_MESSGAGE_RAW_HEX_INFO, the following parameter substitution will
# be made:
#   {0} is a list of bytes in the message, shown as a string of hexadecimal values
LN_MONITOR_MESSGAGE_RAW_HEX_INFO = obsah: {0}\n

# in LN_MONITOR_MESSAGE_PREPEND_OPCODE_INFO, the following parameter substitution will
# be made:
#   {0} is a string containing the OPCODE "name" as interpreted by LnConstants.OPC_NAME
#   {1} is the interpreted LocoNet message
LN_MONITOR_MESSAGE_PREPEND_OPCODE_INFO = {0}: {1}
