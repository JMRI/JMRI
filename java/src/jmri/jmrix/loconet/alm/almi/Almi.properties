# Strings used by alm
#
# Author - Bob Milhaupt (c) 2022
# This file is based in part on key/value pairs previously implemented in
# loconet.messageinterp.MessageInterpretation.properties, but with added
# key/value pairs.
#

LN_MSG_QUERY_ALIAS_INFO = Get Aliasing Information.\n

LN_MSG_ALIAS_INFO_REPORT = Aliasing Report: {0} aliases supported.\n

LN_MSG_QUERY_ALIAS = Get Alias pair {0}.\n

LN_MSG_REPORT_ALIAS_2_ALIASES = Report Alias pair {0}: {1} is an alias for {2}; {3} is an alias for {4}.\n
LN_MSG_SET_ALIAS_2_ALIASES = Set Alias pair {0}: {1} is an alias for {2}; {3} is an alias for {4}.\n

# in LN_MSG_ALM_WRITE and LN_MSG_ALM_WRITE_REPLY, the following parameter
# substitutions will be made:
#   {0} is the value from byte 2 of the message, expressed as a decimal integer
#   {1} is the value from byte 3 of the message, expressed as a decimal integer
#   {2} is a string containing the ALM operation type, from
#       LN_MSG_ALM_OP_TYPE_HELPER_RD, LN_MSG_ALM_OP_TYPE_HELPER_WR,
#       LN_MSG_ALM_OP_TYPE_HELPER_ID, or LN_MSG_ALM_OP_TYPE_HELPER_UNKNOWN, as
#       appropriate
#   {3} is the value from byte 4 of the message, expressed as a decimal integer
#   {4} is the value from byte 5 of the message, expressed as a decimal integer
#   {5} is the value from byte 6 of the message, expressed as a decimal integer
#   {6} is the value from byte 7 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {7} is the value from byte 8 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {8} is the value from byte 9 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {9} is the value from byte 10 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {10} is the value from byte 11 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {11} is the value from byte 12 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {12} is the value from byte 13 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION
#   {13} is the value from byte 14 of the message, expressed as a hexadecimal integer
#       via LN_MSG_HEXADECIMAL_REPRESENTATION

LN_MSG_ALM_WRITE = Write ALM msg {0} ATASK={1} {2} BLKL={3} \
BLKH={4} LOGIC={5}\n\tARG1L={6} ARG1H={7} ARG2L={8} ARG2H={9}\n\tARG3L={10} \
ARG3H={11} ARG4L={12} ARG4H={13}.\n

LN_MSG_ALM_WRITE_REPLY = Read ALM msg (Write reply) {0} ATASK={1} {2} BLKL={3} \
BLKH={4} LOGIC={5}\n\tARG1L={6} ARG1H={7} ARG2L={8} ARG2H={9}\n\tARG3L={10} \
ARG3H={11} ARG4L={12} ARG4H={13}.\n

LN_MSG_ALM_HELPER_TASK_TYPE_RD = (RD)
LN_MSG_ALM_HELPER_TASK_TYPE_WR = (WR)
LN_MSG_ALM_HELPER_TASK_TYPE_ID = (ID)

# in LN_MSG_ALM_HELPER_TASK_TYPE_UNKONWN, the following parameter substitution
# will be made:
#   {0} is the value from the task type byte of the message, expressed as a decimal integer
LN_MSG_ALM_HELPER_TASK_TYPE_UNKONWN = (Unknown task type {0})

LN_MSG_ALM_RTS_CAP_Q = Routes capabilities (command station, DS7x, etc.) query.\n

LN_MSG_ALM_RTS_CAP_R2 = Command Station Routes Capabilities reply: 64 routes, 16 entries each route.\n
LN_MSG_ALM_RTS_CAP_R = Command Station Routes Capabilities reply: 32 routes, 8 entries each route.\n

# in LN_MSG_CMD_STN_ROUTE_QUERY, the following parameter substitutions will
# be made:
#   {0} is an int representing the DCS100/200 interpretation of "route number" beind queried
#   {1} is an int containing the DCS100/200 first route entry being queried
#   {2} is an int containing the DCS100/200 last route entry being queried
#   {3} is a int representing the DCS210/240 interpretation of "route number" being queried
#   {4} is a int containing the DCS210/240 first route entry being queried
#   {5} is a int containing the DCS210/240 last route entry being queried
LN_MSG_CMD_STN_ROUTE_QUERY = Query command station Route {0} entries {1}-{2} if 8 entries per route.  Or if 16 entries per route, query command station Route {3} entries {4}-{5}.\n

# in LN_MSG_CMD_STN_ROUTE_WRITE, LN_MSG_CMD_STN_ROUTE_REPORT, LN_MSG_ALM_ROUTE_DEV_WRITE,
# and LN_MSG_ALM_ROUTE_DEV_REPORT, the following parameter substitutions will be made:
#   {0} is an int representing the DCS100/200 interpretation of "route number" being written
#   {1} is an int containing the DCS100/200 first route entry being written
#   {2} is an int containing the DCS100/200 last route entry being written
#   {3} is a int representing the DCS210/240 interpretation of "route number" being written
#   {4} is a int containing the DCS210/240 first route entry being written
#   {5} is a int containing the DCS210/240 last route entry being written
#   {6} is the turnout number for the first entry of the group
#   {7} is the representation of the position of the first turnout number in the group
#   {8} is the turnout number for the second entry of the group
#   {9} is the representation of the position of the second turnout number in the group
#   {10} is the turnout number for the third entry of the group
#   {11} is the representation of the position of the third turnout number in the group
#   {12} is the turnout number for the fourth entry of the group
#   {13} is the representation of the position of the fourth turnout number in the group
LN_MSG_ALM_ROUTE_CMD_STN_WRITE = Write command station Route {0} entries {1}-{2} if 8 entries per route.  Or if 16 entries per route, write command station Route {3} entries {4}-{5} with {6}{7}, {8}{9}, {10}{11}, {12}{13}.\n
LN_MSG_ALM_ROUTE_CMD_STN_REPORT = Report command station Route {0} entries {1}-{2} if 8 entries per route.  Or if 16 entries per route, report command station Route {3} entries {4}-{5} with {6}{7}, {8}{9}, {10}{11}, {12}{13}.\n
LN_MSG_ALM_ROUTE_DEV_WRITE = Write device Route {0} entries {1}-{2} if 8 entries per route.  Or if 16 entries per route, write device Route {3} entries {4}-{5} with {6}{7}, {8}{9}, {10}{11}, {12}{13}.\n
LN_MSG_ALM_ROUTE_DEV_REPORT = Report device Route {0} entries {1}-{2} if 8 entries per route.  Or if 16 entries per route, report device Route {3} entries {4}-{5} with {6}{7}, {8}{9}, {10}{11}, {12}{13}.\n

# LN_MSG_DEVICE_ROUTES_CAPABILITIES_REPLY is used to report the message returned
# by a LocoNet device _other than a command station_ when it responds to the
# Routes Capabilities Query.
# The following parameter substitutions will be made:
# {0} is the string representing the device name, such as DS74
# {1} is the string representing the device serial number, in hexadecimal.
# {2} is a string representing the device's operating mode
# {3} is a string stating whether the device's routes are currently enabled or disabled
# {4} is the "starting address" of the device's primary object group, which may
#   map to switch addresses (as implied on the DT602 display), and/or general
#   sensor addresses, transponding zone addresses, etc., depending on the device
#   implementation.  The device may use additional objects of the same type, or
#   additional objects of different type.  Where different "object" types are
#   additionally used, those different object types may have different starting
#   addresses, object counts, etc., depending on device implementation, and
#   those object starting addresses and counts _are not_ displayed in this message.
# {5} is an integer representing the "ending address" of the device's primary
#   object group.  This differs from the DT602's display (with initial DT602
#   firmware!) for DS74 devices, of device addresses which were presented as,
#   for example, "Sw0009+4"; this can be misleading, because the device actually
#   implements Sw9, Sw10, Sw11, and Sw12, but _not_ Sw13 as implied by the
#   DT602 display.  JMRI's code will report the last address used in this field.
# {6} is an integer representing the number of routes the device is capable of
#   configuring.
# {7} is an integer representing the number of entries per route.

LN_MSG_DEVICE_ROUTES_CAPABILITIES_REPLY = Device {0} (s/n 0x{1}) in {2} mode (routes currently {3}), using turnout addresses {4} thru {5}, with {6} routes of {7} entries per route, may be configured using ALM messaging.\n

# LN_MSG_CMDSTN_ROUTES_CAPABILITIES_REPLY is used to report the message returned
# by the command station when it responds to the Routes Capabilities Query.
# The following parameter substitutions will be made:
# {0} is an integer representing the number of routes the device is capable of
#   configuring.
# {1} is an integer representing the number of entries per route.
LN_MSG_CMDSTN_ROUTES_CAPABILITIES_REPLY = The active command station, with {0} routes and {0} entries per route, may be configured using ALM messaging.\n

# LN_MSG_DEV_ROUTES_SELECT_REPLY is used to decode the message returned by a
# non-commmand station device when it has been "selected" for Routes configuration.
# The following parameter substitutions will be made:
# {0} is the string representing the device name, such as DS74
# {1} is the string representing the device serial number, in hexadecimal.
LN_MSG_DEV_ROUTES_SELECT_REPLY = Device {0}, s/n 0x{1}, using addresses {2} thru {3} has been selected for Routes configuration.\n

# LN_MSG_DEVICE_ROUTES_CAPABILITIES_REPLY is used to report the message returned
# by a LocoNet device _other than a command station_ when it responds to the
# Routes Capabilities Query.
# The following parameter substitutions will be made:
# {0} is the string representing the device name, such as DS74
# {1} is the string representing the device serial number, in hexadecimal.
# {2} is the "starting address" of the device's primary object group, which may
#   map to switch addresses (as implied on the DT602 display), and/or general
#   sensor addresses, transponding zone addresses, etc., depending on the device
#   implementation.  The device may use additional objects of the same type, or
#   additional objects of different type.  Where different "object" types are
#   additionally used, those different object types may have different starting
#   addresses, object counts, etc., depending on device implementation, and
#   those object starting addresses and counts _are not_ displayed in this message.
# {3} is an integer representing the "ending address" of the device's primary
#   object group.  This differs from the DT602's display (with initial DT602
#   firmware!) for DS74 devices, of device addresses which were presented as,
#   for example, "Sw0009+4"; this can be misleading, because the device actually
#   implements Sw9, Sw10, Sw11, and Sw12, but _not_ Sw13 as implied by the
#   DT602 display.  JMRI's code will report the last address used in this field.

LN_MSG_DEVICE_ROUTES_SELECT_REQUEST = Selecting device of type {0}, s/n 0x{1}, using addresses {2} thru {3} for Routes programming.\n


# MSG_LN_ALM_DEVICE_DESEL is used to report a specific-device deselection.
MSG_LN_ALM_DEVICE_DESEL = De-select the device currently selected for ALM Routes configuration, if any.\n

# LN_MSG_ALM_DEVICE_CHG_SA is used to report messages where a specific device is
# requested to change its starting address to a new starting address.
# The following parameter substitutions will be made:
# {0} is a string containing the device name (i.e. DS74).
# {1} is a string containing a hexadecimal representation of the device serial
#   number (i.e. 15be).
# {2} is an integer representing the new starting address.
LN_MSG_ALM_DEVICE_CHG_SA = Change {0}, s/n 0x{1} to use new starting address {2}.\n

# LN_MSG_ALM_SEL_ROUTE_QUERY is used to report messages which query the selected
# device's route data.
# The following parameter substitutions will be made:
# {0} an integer representing the route number.
# {1} an integer representing the entry number of the first route entry to be
#   reported.
# {2} an integer representing the entry number of the last route entry to be
#   reported.
LN_MSG_ALM_SEL_ROUTE_QUERY = Query the selected device, Route {0}, entries {1} thru {2}.\n

# LN_ROUTE_UNUSED_ENTRY_HELPER is used in decoding a "route entry report" or
# "route entry write" message when a route entry is not an active entry - i.e.
# an "unused" entry in a route.  It is a helper message used with any of the switch/state fields of
# LN_MSG_CMD_STN_ROUTE_WRITE and LN_MSG_CMD_STN_ROUTE_REPORT.
LN_ROUTE_UNUSED_ENTRY_HELPER = Unused

LN_SW_CLOSED = c
LN_SW_THROWN = t

LN_MSG_HELPER_ENABLED = enabled
LN_MSG_HELPER_DISABLED = disabled
LN_MSG_ALM_HELPER_DEVICE_UNKNOWN = (Unknown)

LN_MSG_ALM_HELPER_DEV_MODE_PS = Pulse/Solenoid
LN_MSG_ALM_HELPER_DEV_MODE_SM = Slow motion
LN_MSG_ALM_HELPER_DEV_MODE_LT = Light
LN_MSG_ALM_HELPER_DEV_MODE_S2 = Servo (2-position)
LN_MSG_ALM_HELPER_DEV_MODE_S3 = Servo (3-position)
LN_MSG_ALM_HELPER_DEV_MODE_UNDEF = undefined
