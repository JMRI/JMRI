/* This is a parser grammar for the responses to a client in
the SRCP protocol written for code generation with javacc */

options {
  STATIC=false;
  MULTI=true;
  VISITOR=true;
  TRACK_TOKENS=true;
}

PARSER_BEGIN(SRCPClientParser)

package jmri.jmrix.srcp.parser;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * This file defines a JavaTree/JavaCC parser implementation for
 * the SRCP protocol responses to the client.
 *
 * @author Paul Bender Copyright (C) 2011
 */

// This is generated code.  DO NOT ATTEMPT TO FIX ANY FINDBUGS WARNINGS
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"NM_METHOD_NAMING_CONVENTION","RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"})

public class SRCPClientParser {

   private final static Logger log = LoggerFactory.getLogger(SRCPClientParser.class.getName());

  }

PARSER_END(SRCPClientParser)

// The Tokenizer specification begins here:
<IN_REASON>
MORE :
{
  <REASON: ~[]>
}

<DEFAULT,IN_REASON>
TOKEN :
{
  < EOL :(["\n","\r"]){2} >:DEFAULT
}

<DEFAULT>
SKIP:
{
     <RETURN: "\r">
   | <NEWLINE: "\n">
   | <SPACE: " ">
}

<DEFAULT>
TOKEN :
{
  < ZEROADDR: ("0")( ["0"-"9"] )* >
| < NONZEROADDR: ["1"-"9"](["0"-"9"])* >
| < DRIVEMODE: ("="|"0"|"1"|"2") >
| < HOUR: (["0"-"2"])?["0"-"9"]>
| < MINSEC: ["0"-"5"]["0"-"9"]>
| < DELAY: ("-")?(["0"-"9"])+>
| < TIMESTAMP: (["0"-"9"])+((".")(["0"-"9"])+)? >
| < ONOFF: (<ON>|<OFF>) >:IN_REASON
| < #ON: <O><N>>
| < #OFF: <O>(<F>){2} >
| < PROTOCOL: (<A>|<F>|<L>|<P>|<S>|<N>|<M>|<Z>) >

// Device types
| < FB: <F><B> >
| < GA: <G><A> >
| < GL: <G><L> >
| < GM: <G><M> >
| < SM: <S><M> >
| < LOCK: <L><O><C><K> >
| < TIME: <T><I><M><E>>
| < POWER: <P><O><W><E><R>>
| < SESSION: <S><E><S><S><I><O><N>>
| < DESCRIPTION: <D><E><S><C><R><I><P><T><I><O><N> >
| < SERVER: <S><E><R><V><E><R>>:IN_REASON

// Constants and commands used for handshake mode only.
| < SRCP: <S><R><C><P>>
| < VERSION: (["0"-"9"])+"."(["0"-"9"])+"."(["0"-"9"])+>

// Client return codes
| < INFO: <I><N><F><O>>
| < OK: <O><K>>:IN_REASON
| < ERROR: <E><R><R><O><R>>:IN_REASON

| < COMMAND: <C><O><M><M><A><N><D>>

//programming modes
| <CVBIT: <C><V><B><I><T>>
| <CV: <C><V>>
| <REG: <R><E><G>>

| <#A:["a","A"]>
| <#B:["b","B"]>
| <#C:["c","C"]>
| <#D:["d","D"]>
| <#E:["e","E"]>
| <#F:["f","F"]>
| <#G:["g","G"]>
| <#H:["h","H"]>
| <#I:["i","I"]>
| <#J:["j","J"]>
| <#K:["k","K"]>
| <#L:["l","L"]>
| <#M:["m","M"]>
| <#N:["n","N"]>
| <#O:["o","O"]>
| <#P:["p","P"]>
| <#Q:["q","Q"]>
| <#R:["r","R"]>
| <#S:["s","S"]>
| <#T:["t","T"]>
| <#U:["u","U"]>
| <#V:["v","V"]>
| <#W:["w","W"]>
| <#X:["x","X"]>
| <#Y:["y","Y"]>
| <#Z:["z","Z"]>
}

// Lexical specifications begin here

SimpleNode handshakeresponse():{SimpleNode t; SimpleNode s;}
{
  // this should match any valid response to the client in handshake
  // mode.
  t=timestamp() ( s=serviceversion() | s=connectionmode() | s=inforesponse() )
  {
    jjtThis.jjtSetValue(s.jjtGetValue());
    log.debug("Handshake Response Production: "+jjtThis.jjtGetValue());
    return jjtThis;
  }
}

SimpleNode timestamp():{ Token t;}
{
   (t=<TIMESTAMP> | t=<NONZEROADDR> | t=<ZEROADDR> )
  {
    jjtThis.jjtSetValue(t.image);
    log.debug("Timestamp Production: "+jjtThis.jjtGetValue());
    return jjtThis;
  }
}

SimpleNode serviceversion():{Token t; Token s;}
{
  ( t=<SRCP> (s=<VERSION>) <EOL> )
  {
    log.debug("Service Version Production");
    jjtThis.jjtSetValue(t.image +" " + s.image);
    return jjtThis;
  }
}

SimpleNode connectionmode():{Token t;}
{
  (( t=<COMMAND> | t=<INFO> ) <EOL> )
  {
    log.debug("Connection Mode Production");
    jjtThis.jjtSetValue(t.image);
    return jjtThis;
  }
}

SimpleNode inforesponse() :{SimpleNode t; SimpleNode s;}
{
  //t=address() (s=info() | s=ok() | s=error() )
  address() (s=info() | s=ok() | s=error() )
  {
    jjtThis.jjtSetValue("");
    log.debug("Information Response Production: " + jjtThis.jjtGetValue() );
    return jjtThis;
  }
}

SimpleNode info():{Token t;SimpleNode s; SimpleNode r;}
{
   ( t=<INFO> bus() ( fb() <EOL> | ga() <EOL> | gl() <EOL> | sm() | time() | power() |session() | server() | description() | lock() ))
  {
    jjtThis.jjtSetValue(t.image );
    log.debug("Information Response Production: " + jjtThis.jjtGetValue() );
    return jjtThis;
  }
}

SimpleNode error():{Token t;Token r;}
{
   ( t=<ERROR> r=<EOL> )
  {
    jjtThis.jjtSetValue(t.image + r.image);
    //jjtThis.jjtSetValue(r.image);
    log.debug("Error Response Production: " + jjtThis.jjtGetValue() );
    return jjtThis;
  }
}

SimpleNode ok():{Token t;Token r;}
{
  ( t=<OK> r=<EOL> )
  {
    jjtThis.jjtSetValue(t.image + " " + r.image);
    log.debug("OK Response Production: " + jjtThis.jjtGetValue() );
    return jjtThis;
  }
}


SimpleNode commandresponse():{SimpleNode t; SimpleNode s; }
{
  // this should match any valid response to the client in
  // either command mode or info mode.
  t=timestamp() ( s=inforesponse() )
  {
    log.debug("Command Mode Response Production");
    jjtThis.jjtSetValue(s.jjtGetValue() );

    return jjtThis;
  }
}

SimpleNode cvno():{SimpleNode s;}
{
  ( s=nonzeroaddress())
  {
    log.debug("CV Number Production "+ s.jjtGetValue());
    jjtThis.jjtSetValue(s.jjtGetValue());
    return jjtThis;
  }
}


SimpleNode bus():{SimpleNode s;}
{
  (s=zeroaddress() | s=nonzeroaddress())
  {
    log.debug("BUS Production "+ s.jjtGetValue());
    jjtThis.jjtSetValue(s.jjtGetValue());
    return jjtThis;
  }
}

SimpleNode power():{Token t; SimpleNode r;}
{
  ( t=<POWER> ( r=onoff() | <EOL> ))
  {
    log.debug("POWER Production "+ t.image);
    //jjtThis.jjtSetValue(t.image + " " + r.jjtGetValue() );
    jjtThis.jjtSetValue(t.image );
    return jjtThis;
  }
}

void address() #void:{SimpleNode s;}
{
  (s=zeroaddress() | s=nonzeroaddress())
  {
    log.debug("Address Production "+ s.jjtGetValue());
    //jjtThis.jjtSetValue(s.jjtGetValue());
    //return jjtThis;
  }
}

SimpleNode zeroaddress():{Token t;}
{
  t=<ZEROADDR>
  {
    //Zero Address allows a leading zero
    log.debug("ZeroAddress Production "+ t.image);
    jjtThis.jjtSetValue(t.image);
    return jjtThis;
  }
}

SimpleNode nonzeroaddress():{Token t;}
{
  t=<NONZEROADDR>
  {
    //NonZero Address requires a value  >=1, without
    //a leading zero
    log.debug("NonZeroAddress Production "+ t.image);
    jjtThis.jjtSetValue(t.image);
    return jjtThis;
  }
}

SimpleNode port():{SimpleNode s;}
{
  (s=zeroaddress() | s=nonzeroaddress())
  {
    log.debug("PORT Production "+ s.jjtGetValue());
    jjtThis.jjtSetValue(s.jjtGetValue());
    return jjtThis;
  }
}


SimpleNode devicegroup():{Token t;}
{
  ( t=<FB> | t=<GA> | t=<GL> | t=<SM> | t=<TIME> | t=<SESSION> | t=<SERVER> |
    t=<LOCK> | t=<POWER>| t=<DESCRIPTION> )
  {
    log.debug("DeviceGroup Production");
    jjtThis.jjtSetValue(t.image);
    return jjtThis;
  }
}

SimpleNode gl():{Token t;}
{
  t=<GL> address() ( (<DRIVEMODE>|address()) (address())+ | <PROTOCOL> (address() address())? )?
  {
    jjtThis.jjtSetValue(t.image);
    return jjtThis;}
}

SimpleNode sm():{Token t;}
{
  t=<SM>
  {
    jjtThis.jjtSetValue(t.image);
    return jjtThis;}
}

SimpleNode ga():{Token t;}
{
  t=<GA> address() ( ( <PROTOCOL> ) | (port() zeroone()) )?
  {
    jjtThis.jjtSetValue(t.image);
    return jjtThis;
  }
}

SimpleNode fb():{Token t;}
{
  t=<FB> ( address() zeroone() )?
  {
    jjtThis.jjtSetValue(t.image);
    return jjtThis;}
}

SimpleNode time():{Token t;}
{
  t=<TIME>
  {
    jjtThis.jjtSetValue(t.image);
    return jjtThis;
  }
}

SimpleNode server():{Token t;Token r;}
{
  t=<SERVER> r=<EOL>
  {
    jjtThis.jjtSetValue(t.image + " " + r.image);
    return jjtThis;
  }
}

SimpleNode session():{Token t;}
{
  t=<SESSION> address() <EOL>
  {
    jjtThis.jjtSetValue(t.image);
    return jjtThis;
  }
}

SimpleNode lock():{Token t;}
{
  t=<LOCK> devicegroup() ( address() )+ <EOL>
  {
    jjtThis.jjtSetValue(t.image);
    return jjtThis;
  }
}

SimpleNode description():{Token t;}
{
 t=<DESCRIPTION> ( LOOKAHEAD(3) ( (devicegroup())+ <EOL> ) |  ( fb() <EOL> | ga() <EOL> | gl() <EOL> | sm() | time() | power() |session() | server() | lock() ))
  {
    jjtThis.jjtSetValue(t.image);
    return jjtThis;
  }
}

SimpleNode onoff():{Token t; Token r;}
{
  t=<ONOFF> r=<EOL>
  {
     log.debug("OnOff Production " +t.image + " " + r.image);
     jjtThis.jjtSetValue(t.image);
     return jjtThis;
  }
}

void zeroone() #void:{SimpleNode s;}
{
  (s=zeroaddress() | s=nonzeroaddress())
  {
     log.debug("ZeroOne Production ");
     //return jjtThis;
  }
}

SimpleNode delay():{Token t;}
{
  // time timeout is a non-zero integer.  It may be negative.
  t=<DELAY>
  {
     log.debug("Delay Production " +t.image);
     return jjtThis;
  }
}

SimpleNode timeout():{Token t;}
{
  // the timeout is a non-negative integer.
  address()
  {
     log.debug("Timeout Production ");
     return jjtThis;
  }
}

// service mode programming modes

SimpleNode progmode():{SimpleNode s;}
{
  // programming mode has 3 possibilities
  ( s=cvbit() | s=cv() | s=reg() )
  {
     log.debug("Programming Mode Production ");
     return jjtThis;
  }
}


SimpleNode cv():{}
{
  <CV>
  {return jjtThis;}
}

SimpleNode cvbit():{}
{
  <CVBIT>
  {return jjtThis;}
}

SimpleNode reg():{}
{
  <REG>
  {return jjtThis;}
}

