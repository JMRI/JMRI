# XNetBundle.properties
#
# Default properties for the jmri.jmrix.xpressnet (Lenz, Atlas et al) menu

MenuXpressNet                       = XpressNet

MenuItemXNetCommandMonitor          = XpressNet Monitor
MenuItemSendXNetCommand             = Send XpressNet Command
MenuItemLI101ConfigurationManager   = LI101 Configuration Manager
MenuItemLIUSBConfigurationManager   = LIUSB Configuration Manager
MenuItemCSDatabaseManager           = Command Station Database Manager
MenuItemLZ100ConfigurationManager   = LZ100 Configuration Manager
MenuItemLZV100ConfigurationManager  = LZV100 Configuration Manager
MenuItemLV102ConfigurationManager   = LV102 Configuration Manager
MenuItemXNetSystemInformation       = XpressNet System Information

# Turnout Text (compare with key TurnoutStateClosed in jmri.NamedBeanBundle.properties)
TurnoutStateClosed                  = Closed (-)
TurnoutStateThrown                  = Thrown (+)

# Command Station Version String {0} - hardware type, {1} - software version.
CSVersionString                     = hardware type: {0} software version: {1}

# Strings for command station types
CSTypeLZ100                         = LZ100/LZV100
CSTypeLH200                         = LH200
CSTypeCompact                       = Compact or Other
CSTypeMultiMaus                     = multiMaus
CSTypeZ21                           = Z21

#Strings for port speeds, used by the XpressNet Monitor.
LIBaud19200                         = 19200bps (default)
LIBaud38400                         = 38400bps
LIBaud57600                         = 57600bps
LIBaud115200                        = 115200bps
LIBaudOther                         = <undefined>

# Strings for Nibbles in feedback messages
FeedbackEncoderUpperNibble          = Upper Nibble
FeedbackEncoderLowerNibble          = Lower Nibble

# Message translation strings for the XpressNet Monitor.
XNetMessageRequestCSVersion                 = REQUEST: Command Station Version
XNetMessageRequestCSStatus                  = REQUEST: Command Station Status
XNetMessageRequestCSPowerModeAuto           = REQUEST: Set Power-up Mode to Automatic
XNetMessageRequestCSPowerModeManual         = REQUEST: Set Power-up Mode to Manual
XNetMessageRequestEmergencyOff              = REQUEST: Emergency Off
XNetMessageRequestNormalOps                 = REQUEST: Normal Operations Resumed
XNetMessageRequestServiceModeResult         = REQUEST: Service Mode Result
XNetMessageRequestServiceModeReadPaged      = Service Mode Request: Read CV {0} in Paged Mode
XNetMessageRequestServiceModeReadDirect     = Service Mode Request: Read CV {0} in Direct Mode
XNetMessageRequestServiceModeReadDirectV36  = Service Mode Request (V3.6): Read CV {0,number,####} in Direct Mode
XNetMessageRequestServiceModeReadRegister   = Service Mode Request: Read Register {0}
XNetMessageRequestServiceModeWritePaged     = Service Mode Request: Write {1} to CV {0} in Paged Mode
XNetMessageRequestServiceModeWriteDirect    = Service Mode Request: Write {1} to CV {0} in Direct Mode
XNetMessageRequestServiceModeWriteDirectV36 = Service Mode Request (V3.6): Write {1} to CV {0,number,####} in Direct Mode
XNetMessageRequestServiceModeWriteRegister  = Service Mode Request: Write {1} to Register {0}
XNetMessageOpsModeBitWrite                  = Operations Mode Programming Request: Bit Mode Write: {0} to CV {1,number,####} bit {2} For Decoder Address {3,number,####}
XNetMessageOpsModeBitVerify                 = Operations Mode Programming Request: Bit Mode Verify: {0} to CV {1,number,####} bit {2} For Decoder Address {3,number,####}
XNetMessageOpsModeByteWrite                 = Operations Mode Programming Request: Byte Mode Write: {0} to CV {1,number,####} For Decoder Address {2,number,####}
XNetMessageOpsModeByteVerify                = Operations Mode Programming Request: Byte Mode Verify: {0} to CV {1,number,####} For Decoder Address {2,number,####}
XNetMessageRequestLIVersion                 = REQUEST LI10x hardware/software version
XNetMessageRequestLIAddress                 = REQUEST LI101 Address {0}
XNetMessageRequestLIBaud                    = REQUEST LI101 Baud Rate {0}
XNetMessageBuildDoubleHeaderRequest         = Double Header Request: Establish Double Header with {0,number,####} and {1,number,####}
XNetMessageDisolveDoubleHeaderRequest       = Double Header Request: Dissolve Double Header that includes mobile decoder {0,number,####}
XNetMessageAddToConsistDirNormalRequest     = Mobile Decoder Operations Request: Add Locomotive:{0,number,####} To Multi Unit Consist: {1} With Loco Direction Normal
XNetMessageAddToConsistDirReverseRequest    = Mobile Decoder Operations Request: Add Locomotive:{0,number,####} To Multi Unit Consist: {1} With Loco Direction Reversed
XNetMessageRemoveFromConsistRequest         = Mobile Decoder Operations Request: Remove Locomotive:{0,number,####} From Multi Unit Consist: {1}
XNetMessageAddressedEmergencyStopRequest    = Emergency Stop {0,number,####}
XNetMessageSearchCSStackForward             = Search Command Station Stack Forward - Start Address: {0,number,####}
XNetMessageSearchCSStackBackward            = Search Command Station Stack Backward - Start Address: {0,number,####}
XNetMessageSearchCSStackForwardConsistAddress = Search Command Station Stack Forward from Consist Address: {0}
XNetMessageSearchCSStackBackwardConsistAddress = Search Command Station Stack Backward from Consist Address: {0}
XNetMessageSearchCSStackForwardNextMULoco   = Search Command Station Stack Forward for next address in Consist {0} Starting at {1,number,####}
XNetMessageSearchCSStackBackwardNextMULoco  = Search Command Station Stack Backward for next address in Consist {0} Starting at {1,number,####}
XNetMessageDeleteAddressOnStack             = Delete Address {0,number,####} from Command Station Stack.
XNetMessageRequestLocoInfo                  = Request for Address {0,number,####} speed/direction/function on/off status.
XNetMessageRequestLocoFunctionMomStatus     = Request for Address {0,number,####} function momentary/continuous status.
XNetMessageRequestLocoFunctionHighStatus    = Request for Address {0,number,####} F13-F28 on/off status.
XNetMessageRequestLocoFunctionHighMomStatus = Request for Address {0,number,####} F13-F28 momentary/continuous status.
XNetMessageFeedbackRequest                  = Accessory Decoder/Feedback Encoder Status Request: Base Address {0},{1}.
XNetMessageAccessoryDecoderOnRequest        = Accessory Decoder Operations Request: Turnout Address {0}(Base Address {1},Sub Address {2}) Turn Output {3} On.
XNetMessageAccessoryDecoderOffRequest       = Accessory Decoder Operations Request: Turnout Address {0}(Base Address {1},Sub Address {2}) Turn Output {3} Off.

XNetReplyErrorPCtoLI                        = Error occurred between the interface and the PC
XNetReplyErrorLItoCS                        = Error occurred between the interface and the command station.
XNetReplyErrorUnknown                       = Unknown Communication Error
XNetReplyOkMessage                          = Command Successfully Sent/Normal Operations Resumed after timeout
XNetReplyErrorNoTimeSlot                    = The Command Station is no longer providing the LI a timeslot for communication
XNetReplyErrorBufferOverflow                = Buffer overflow in the LI
XNetReplyTimeSlotRestored                   = Timeslot Restored
XNetReplyRequestSentWhileNoTimeslot         = Request Sent While the CS is not providing a timeslot
XNetReplyBadDataInRequest                   = Bad Data in Request sent to CS
XNetReplyRetransmitRequest                  = Retransmission Requested
XNetReplyCSTransferError                    = Command Station Reported Transfer Error
XNetReplyCSBusy                             = Command Station Busy
XNetReplyCSNotSupported                     = XpressNet Instruction not supported by Command Station
XNetReplyCSVersionV1                        = Command Station Software Version: {0} Type: Unknown (X-Bus V1 or V2)
XNetReplyCSVersion                          = Command Station Software Version: {0} Type: {1}
XNetReplyBCNormalOpsResumed                 = Broadcast: Normal Operations Resumed
XNetReplyBCEverythingOff                    = Broadcast: Emergency Off (short circuit)
XNetReplyBCEverythingStop                   = Broadcast: Emergency Stop (track power on)
XNetReplyBCServiceEntry                     = Broadcast: Service Mode Entry
XNetReplyServiceModeShort                   = Service Mode: Short Circuit
XNetReplyServiceModeDataByteNotFound        = Service Mode: Data Byte Not Found
XNetReplyServiceModeCSBusy                  = Service Mode: Command Station Busy
XNetReplyServiceModeCSReady                 = Service Mode: Command Station Ready
XNetReplyServiceModeDirectResponse          = Service Mode: Direct Programming Mode Response: CV:{0,number,####} Value: {1}
XNetReplyServiceModePagedResponse           = Service Mode: Register or Paged Mode Response: CV:{0,number,####} Value: {1}
XNetReplyV1DHErrorNotOperated               = XBus V1 and V2 MU+DH error: Selected Locomotive has not been operated by this XpressNet device or address 0 selected
XNetReplyV1DHErrorInUse                     = XBus V1 and V2 MU+DH error: Selected Locomotive is being operated by another XpressNet device
XNetReplyV1DHErrorAlreadyDH                 = XBus V1 and V2 MU+DH error: Selected Locomotive already in MU or DH
XNetReplyV1DHErrorNonZeroSpeed              = XBus V1 and V2 MU+DH error: Unit selected for MU or DH has speed setting other than 0
XNetReplyDHErrorNotOperated                 = XpressNet MU+DH error: Selected Locomotive has not been operated by this XpressNet device or address 0 selected
XNetReplyDHErrorInUse                       = XpressNet MU+DH error: Selected Locomotive is being operated by another XpressNet device
XNetReplyDHErrorAlreadyDH                   = XpressNet MU+DH error: Selected Locomotive already in MU or DH
XNetReplyDHErrorNonZeroSpeed                = XpressNet MU+DH error: Unit selected for MU or DH has speed setting other than 0
XNetReplyDHErrorLocoNotMU                   = XpressNet MU+DH error: Locomotive not in a MU
XNetReplyDHErrorLocoNotMUBase               = XpressNet MU+DH error: Locomotive address not a multi-unit base address
XNetReplyDHErrorCanNotDelete                = XpressNet MU+DH error: It is not possible to delete the locomotive
XNetReplyDHErrorStackFull                   = XpressNet MU+DH error: The Command Station Stack is Full
XNetReplyDHErrorOther                       = XpressNet MU+DH error: {0}
XNetReplyLIVersion                          = LI10x Hardware Version: {0} Software Version: {1}
XNetReplyLIBaud                             = RESPONSE LI101 Baud Rate: {0}
XNetReplyLIAddress                          = RESPONSE LI101 Address {0}
XNetReplyCSStatus                           = Command Station Status: 

# XNetReply Command Station Status Bytes.  These are concatenated together 
# in the code.
XNetCSStatusEmergencyOff                    = Emergency Off 
XNetCSStatusEmergencyStop                   = Emergency Stop 
XNetCSStatusServiceMode                     = Service Mode 
XNetCSStatusPoweringUp                      = Powering up 
XNetCSStatusPowerModeAuto                   = Auto power-up Mode 
XNetCSStatusPowerModeManual                 = Manual power-up Mode 
XNetCSStatusRamCheck                        = RAM check error!

# Configuration properties for XpressNet connections.
# Primarily used internally, but placed
# here just in case they need to be changed.
# Only overridden items copied to translated property file,
# any other are picked up from default (english) props
defaultMDNSServerName                       = XpressNet
defaultMDNSDomainName                       = local.
defaultMDNSServiceType                      = _http._tcp.local.
defaultMDNSServiceName                      = Lenz XpressNet Interface

# Hornby items
HornbyElitePortTitle                        = Hornby Elite USB port
HornbyEliteConnectionLabel                  = Elite connection uses: 
HornbyEliteCheckLabel                       = Check Buffer: 
