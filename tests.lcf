# Log4J configuration file for running JMRI JUnit tests

# #############################################################
#  Log4J configuration
# #############################################################

# For the general syntax of property based configuration files see the
# documentation of org.apache.log4j.PropertyConfigurator
# or jmri.org/help/en/html/doc/Technical/Logging.shtml

# This configures two appenders:  J and R.

# The default level for logging is WARN:  All the specific
# class loggers are set to ignore everything below that.
# You can set a specific class to e.g. debug so that it does
# log its information instead of ignoring it, see examples
# at the bottom.  Then the logging level on each appender (see
# below) is used to decide if the data is actually logged.

log4j.rootCategory= WARN, R, J

# The J appender is a JMRI-specific one, configured so that JMRI tests
# can examine their output. Changing the levels or 
# format of J can result in obscure test failures. 

# The R appender writes all logging output to the tests.log
# file.

# The conversion patterns use format specifiers. For details, see
# the org.apache.log4j.PatternLayout Javadocs. To summarize:
#
# c category, e.g. %c{2} for right-most two tokens
# C classname of call (slow)
# d date, e.g. %d{ISO8601}, %d{ABSOLUTE}, %d{DATE}, %d{HH:mm:ss,SSS} 
#              or %d{dd MMM yyyy HH:mm:ss,SSS}
# F filename of call (slow)
# l location, JVM-dependent (extremely slow)
# m message
# M method name (slow)
# n line separator
# p priority
# r milliseconds elapsed
# t thread
# x nested diagnostic context
# % the sequence %% emits a single %
#
# Justification, padding and truncation can be controlled e.g. %-5.10p 
# is left justified, at least 5 and no more than 10 characters wide

# J is a jmri.util.JUnitAppender which provides hooks used to test 
# whether a given log message is expected or not, and whether ERROR messages 
# have been logged.
log4j.appender.J=jmri.util.JUnitAppender
# J writes to system.err to synchronize with e.g. exception traces
log4j.appender.J.target=System.err
# J uses PatternLayout to control the format of the log messages.
log4j.appender.J.layout=org.apache.log4j.PatternLayout
log4j.appender.J.layout.ConversionPattern=%-5p - %m [%t] %c{4}.%M()%n
# always limit output to INFO
log4j.appender.J.Threshold=INFO

# R is set to output all enabled logging to the tests.log file
log4j.appender.R=org.apache.log4j.FileAppender
log4j.appender.R.File=tests.log
log4j.appender.R.Append=false
log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=%d{ss,SSS} [%t] %-5p %c{2}.%M() - %m%n
log4j.appender.R.Threshold=DEBUG

# ###################################################################
#   Configure some verbose components
# ###################################################################

# Default Jetty server to only logging WARN since it can be verbose at points
log4j.category.org.eclipse.jetty=WARN
log4j.category.org.eclipse.jetty.server.handler=WARN

# Turning off logging for Java Xerces; emits WARNING messages during routine use
log4j.category.org.jdom2.transform=SEVERE

# Turning off logging for Java JMDNS; logs SEVERE and WARNING to j.u.l too routinely
log4j.category.com.strangeberry=OFF
log4j.category.javax.jmdns=OFF

# Needed for Jenkins I18N testing
log4j.category.jmri.util.I18NTest=DEBUG

# Needed for jmri.util.Log4JUtilTest
log4j.category.jmri.util.Log4JUtilTest = WARN

# Needed for jmri.util.JUnitAppenderTest
log4j.category.jmri.util.JUnitAppenderTest = INFO

# Turn on INFO for application tests
log4j.category.apps.Apps = INFO
log4j.category.apps.PanelPro.PanelPro = INFO

# ###################################################################
#    Examples of how you can ask for more detailed logging
# ###################################################################

# Valid priority names are FATAL, ERROR, WARN, INFO, DEBUG, and TRACE. 

# Examples of changing priority of specific categories (classes, packages):
#
# log4j.category.jmri=DEBUG
# log4j.category.jmri.InstanceManager=DEBUG
# log4j.category.jmri.implementation.DefaultSignalMastLogic=DEBUG
# log4j.category.jmri.implementation.SignalSpeedMap=DEBUG
# log4j.category.jmri.jmrit.symbolicprog.DecVariableValue=DEBUG
# log4j.category.jmri.jmrit.symbolicprog.LongAddrVariableValueTest=DEBUG
# log4j.category.jmri.jmrix.nce=DEBUG
# log4j.category.jmri.jmrix.nce.NceTrafficController=DEBUG


